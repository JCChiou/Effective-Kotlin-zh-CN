{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["1","10","11","12","13","14","15","16","17","18","19","2","20","21","22","23","24","25","26","27","28","29","3","30","31","32","33","34","35","36","37","38","39","4","40","41","42","43","44","45","46","47","48","49","5","50","51","52","6","7","8","9","[","[x]","]","abstract","action","against","algorithm","api","argument","array","avoid","behavior","between","big","bundl","chang","chapter","cheap","class","clear","close","cn","code","collect","common","compar","complex","composit","consid","consist","constructor","contract","convent","creation","critic","custom","data","defin","deleg","design","differ","document","dsl","each","effect","effici","element","elimin","equal","error","essenti","expect","explicitli","expos","extens","extern","extract","factori","failur","function","gener","good","handl","hash","hierarchi","implement","infer","inherit","inlin","instead","interfac","introduct","item","knowledg","kotlin","lack","level","limit","make","mean","member","minim","modifi","modul","more","mutabl","name","non","null","number","object","obsolet","on","oper","option","over","paramet","part","pass","pattern","perform","platform","possibl","prefer","primari","primit","process","properli","properti","protect","readabl","receiv","refer","referenc","repeat","repres","resourc","respect","result","return","reus","reusabl","safeti","scope","sequenc","shadow","singl","soon","specifi","stabil","standard","state","step","tag","term","test","type","unit","unnecessari","us","variabl","varianc","visibl","wrap","write","written","zh","中文翻译","在线阅读地址","当前进度：英文原文搬运中"],"Part 1 Good code/Chapter 1 Safety/Introduction.html":["amaz","applic","argument","basket.","best","better,","both","bought","busi","business,","c++?","chapter","chapter,","check","code","collect","concis","convinc","crash","crashes,","decid","design","develop","don’t","elimin","error","errors.","errors.”","experi","featur","features.","fewer","found","gener","have","hour","import","instead","introduct","item","java,","javascript","kotlin","kotlin.","language,","less","live","make","need","out","out,","potenti","practic","produc","product","project","promot","prone","properly.","provid","purpos","realli","safe","safe.","safeti","safety,","see","signific","spent","still","support","talk","truli","upset","us","us,","user","value.","websit","we’ll","“whi"],"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":["!=","\"$it","\"$name","\")","\"aaa\")","\"bill\"","\"blanc\"))","\"braun\"","\"fabio\"","\"hansen\"))","\"kirill\"","\"maja\"","\"marcin\"","\"markiewicz\")","\"moskała\"","\"moskała\")","\"márton\"","\"zzz\"","$new\")","$old","$surname\"","(balanc","(bi","(elem","(for","(fullnam","(fullname2","(getter","(i","(like","(list","(part","(t)","(which",")","):","+","+=","//","//...","0","0.0","1","1..1000)","10","1000","1000,","16:","2","2,","20","3)","3,","37:","3:","41:","42","4]","911","=",">","@throws(insufficientfunds::class)","[1,","[]","[aaa","[fabio,","[fabio]","[zzz","_,","aaa,","abov","abstract","accessor","accidental.","account","account.","achiev","active:","actual","actualelement:","add","addit","advantag","advantages:","again.","alias","all.","allow","alreadi","also,","although","ambiguity:","announc","anoth","any()","anymor","api.","appli","approach","ar","are:","arraylist()","arraylist,","arrays.arraylist","ask","assign","assumpt","attent","balanc","balance:","bank","bankaccount","baselin","be.","because:","behav","behavior.","behavior:","behind","below","below.","better","between","bigger","biggest","bill]”","blanc,","book.","boolean","both","braun","break","bundl","buzz","cach","calculate()","calculate():","calculating...","call","case","cast","casted:","casting.","chang","change).","change,","change.","changed,","changed:","changing.","chapter","characterist","check","check,","choic","class","classes,","classif","classifi","clear.","close","code","code.","code:","collect","collection,","collection.","collection:","collections.","combin","come","complex","compos","comprehend.","concret","conflict","conflict.","cons.","consequences.","consid","consist","construct","constructor","contract","contract,","contract.","control","copi","copy.","copying.","core","coroutines,","coroutinescop","correct","correspond","cost.","couldn’t","creat","created.","critic","custom","danger","data","data.","david","deal","debug","decid","deep","default","default.","defens","defin","definition.","delay(10)","deleg","delegate,","delegate.","delegates.observable(listof())","depend","deposit(depositamount:","depositamount","describ","design","designed.","detail","develop","diagram","differ","discuss","doesn’t","don’t","doubl","double)","down","drawback","dure","each","easi","easier","edg","effici","efficiency)","efficient.","eleg","element","elements:","encapsul","error","errors.","especi","even","exampl","example:","except","exponenti","expos","extend","fact","fals","false”","familiar","faster","featur","feel","file,","filter","final","final.","find","first","fizz","flexibl","following:","found","freedom","freedom.","fullnam","fullname(\"aaa\",","fullname2:","fullname:","fun","function","function,","functions,","gener","get()","get():","getter","getter,","getter.","give","go","good","grow","guarante","guaranteed.","hand","hand,","hansen]","hard","hard,","harder","hash","hashcode.","haskell.","have","have,","help.","helpful:","here","hidden","hierarchi","history.","hold","hood","hood,","however,","idea","immut","immutable,","immutable.","implement","implementation.","import","important.","imposs","incorrect","inlin","insecur","instanc","instance,","instead","instead,","int","int.","interfac","interface,","interface.","interfaces.","intern","involved,","is.","issu","it,","it.","item","iter","iterable,","iterable.filt","iterable.map","iterable.map(","it’","java","java.lang.unsupportedoperationexcept","java.util.abstractlist.add(abstractlist.java:108)","java.util.abstractlist.add(abstractlist.java:148)","jordan","jvm","keep","key","kind","known","kotlin","kotlin,","kotlin.","kotlin/jvm,","lack","languag","language,","languages.","last","later","launch","lead","leak","learn","left","less","let’","level","life","limit","list","list,","list.","list.add(4)","list.add(transformation(elem))","list.tomutablelist","list.tomutablelist()","list1","list1.add(1)","list1.plusassign(1)","list1:","list2","list2.plus(1)","list2:","list3","list:","listof","listof()","listof(1,","listof(1,2,3)","loadal","loadall():","local","locat","lock","log","long","look","lose","lost.","lot","main","main()","mainstream","maintained.","maja","make","manag","mani","map","maps,","marcin","materi","mean","method","minu","model","modif","modifi","modification.","modified,","modify.","modify:","modul","moment","money","more","more,","moskała","much","multipl","multithread","multithreading,","multithreading.","mutability,","mutability.","mutabl","mutable,","mutable.","mutablecollection,","mutableiterable,","mutablelist","mutablelist)","mutablelist.add(4)","mutablelistof()","mutablelistof(1,2,3)","mutablemap","mutablemapof()","mutableset,","mutableus","mutableuser()","mutat","mutates,","mutation.","márton","name","name).","name:","name?.let","names)","names.add(fullname(\"david\",","names.add(fullname(\"jordan\",","names.add(person)","names:","necessarili","need","never","new","next","non","noth","notic","notifi","now.","null)","num","number","number,","numer","object","object,","object:","objects,","objects.","observ","occur:","offer","old,","on","onc","one,","one.","ones.","only,","only.","oper","operation.","operations,","operations.","opposit","optim","option,","ourselves,","outside.","over","overal","overrid","parallel","part","particular","perfect","perform","person","person.nam","place","place,","place.","platform","plu","point","point,","points.","position.","possibl","possible,","potenti","predictable.","prefer","preferred.","prepar","present","previou","primari","print(\"calculating...","print(buzz)","print(fizz)","print(list)","print(list.size)","print(names)","print(num)","print(person","print(s)","print(user)","print(userrepository.loadall())","println(\"nam","println(fullname)","println(fullname.length)","println(fullname2.length)","privat","private:","pro","problem","problemat","process","produc","program","program.","programs.everi","project","projects,","projects.","proper","properti","properties,","properties.","property,","property.","property:","pure","r","rare","read","real","realli","reason","recommend","refer","relationship","rememb","replac","repres","requir","rescue.","respect","result","return","right","risk","rule","rules.","safe","safer","safeti","same","same.","satisfi","second","see","see,","seen","separ","set","set,","set.","setter","setter).","setter.","setters)","setting:","share","short,","should,","shouldn’t","show","side,","similar","similarly,","simpl","simplifi","singl","situat","slightli","smart","snippet","snippet⁶.","solut","someth","sometim","sort","sorted.","sortedset","sourc","sparingli","special","specif","specifi","specific.","standard","state","state,","state.","state:","states.","stay","stdlib.","still","storedus","storedusers:","storedusers[4]","string","string)","string,","string?","such","summari","supertype:","support","surely,","surnam","surname)","surname:","surname=moskała)","surpris","suspend","sword.","synchron","synchronization,","synchronized(lock)","systems.","system”","tabl","table,","take","teams.","techniqu","tediou","test","test.","thank","that,","that.","that’","them,","them.","therefore,","this!","this)","those","though","though,","thread","thread.sleep(10)","thread.sleep(1000)","thread.sleep(5000)","time","time,","togeth","tool","top","track","trait,","transformation:","translat","treeset()","tri","true","truli","trust","two","type","typic","under","underli","understand","understood","understood,","unexpect","univers","unlik","unnecessari","up","upcast","us","user","user(","user(\"maja\",","user(name,","user(name=maja,","user(v","user.copy()","user.copy(surnam","user.withsurname(\"moskała\")","user:","userhold","userrepositori","userrepository()","userrepository.loadall()","val","valu","value)","value.","var","var.","var:","variable).","veri","way","way.","ways:","well","well,","well.","we’v","whenev","wise","withdraw(withdrawamount:","withsurnam","withsurname(surname:","won’t","work","work.","works:","world","worst","write","year","{","{4=kirill}","}","“hack","“main”"],"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":["!=","\"cold\"","\"hot\"","\"mild\"","$i","$user\")","%","((i,","(2..100).tolist()","(degre","(except","(hasvalue)","(i","(most","(numbers.isnotempty())","(true)","+","...",".filter","//","0","1","10","10,","11,","12]","13,","17,","19,","2","2).","2.","23,","29,","29]","3","3,","31,","37,","4","41,","43,","47,","5,","53,","59,","6,","61,","67,","7,","71,","73,","79,","8,","83,","89,","9,","97]","=",">","[2,","a,","abov","abuse,","access","add","algorithm","also,","although","alway","analyz","anoth","anymore.","applic","assign","avoid","awar","b","b)","bad","behavior.","better","braces,","break.","builder.","buzz","buzz,","by:","c","c)","captur","catch","challeng","chang","closest","code,","color.blu","color.r","color.yellow","color:","common","complete.","complication.","comput","conceptu","concret","consecut","control","coroutines,","correctli","counterparts.","creat","curli","danger.","dangerous.","deal","declar","defin","defined.","degre","describ","description:","destructur","develop","developer.","divis","done","drop","easier","element","element.","elvi","end","eratosthen","exampl","example,","example:","examples,","exercis","explain","express","expressions),","expressions:","extract","fact","filter","filters.","finally,","find","first","fizz","fizz()","forc","fun","function","functions.","gener","generatesequence(2)","getvalue()","group","happen.","harder","help","here","however,","if(hasvalue)","if,","immut","implement","import","infinit","initi","insid","instance,","instead","int","int)","is,","is:","it,","it.","item","iter","iteration,","keep","kotlin","kotlin,","lambda","lambdas.","last","lazili","lead","less","let’","like:","limit","list","local","look","loop","loop,","loop.","lot","manage.","mani","minim","modifi","more","multipl","mutabl","mutablelistof()","narrow","narrowest","nearli","need","needless","next","nicer","now","number","number.","numbers,","numbers.","numbers.drop(1)","numbers.filt","numbers.first()","numbers:","object","on","onc","one.","oper","out","outer","outsid","over","overus","person","point.","possibl","possible,","possible.","potenti","prefer","prevent","prime","prime.","prime:","primes.add(prime)","primes:","print(\"us","print(a","print(primes)","print(primes.take(10).tolist())","problem","produc","program","programming.","properly.","properti","properties,","read","realli","reason","reasoning.","reasons,","refer","region","remain","remov","rest","result","result.","rule","same","save","scope","scope,","scope.","second","see","sequenc","sequence.","set","siev","similar","similarly,","simpl","simple:","simpler","situat","smaller","solut","someth","start","state,","step,","still","stop","string","structur","such","summari","support","syntax","take","teach","terribl","therefor","think","third","this:","those","tighten","track","tri","trouble.","understand","unintent","up","updateweather(degrees:","us","us:","user","user()","user)","user:","users.indices)","users.withindex())","users[i]","val","valu","var","variabl","variable:","variables.","variable’","veri","visible.","want","way,","we’r","when,","whether","whole","wide","wider","with,","work","write,","yield","yield(prime)","yourself,","{","}","“optimized”","“optimize”"],"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":["!","!!","${text.length}\")","(@nonnul","(@nullabl","(@nullable,","(@nullable,@checkfornul","(and","(npe),","...","//","//***","//...","3","305","305’","=","@checkfornull,","@nonnul","@notnul","@nullabl","@parametersarenonnullbydefault","@possiblynul","absolut","adjust","all.","alternatively,","although","alway","amazing.","android","android.support.annotations)","androidx.annot","annot","annotation.","annotations?","anoth","anyon","api","approach","around","assert","assign","assum","be","becam","behav","behavior","between","bigger","both","by:","c","call","case,","cases,","caus","chang","change.","choos","citizen.","class","clear","code","code.","com.android.annot","come","comment,","commun","complet","complex","complicated:","connect","conscienti","constructors,","contract.","control","danger","dangerous,","decid","declar","default","default,","definit","denotable,","describ","design","develop","developers).","differ","disaster.","doesn’t","down","easi","eclips","edu.umd.cs.findbugs.annotations)","elements.","elimin","end","entirely.","error","even","everyth","example:","except","exclam","expect","expect:","explicitli","expos","expression.","fact,","few","fields.","filter","filternotnull.","find.","findbug","first","friendly.","fun","function","further.","future.","gener","get","getuser()","getusername()","getusername():","getusers()","getvalu","getvalue()","givename()","good","happens.","hasn’t","help","however,","idea","imagin","import","includ","infer","inform","instance,","instead","instead,","instead?","intellij","interfac","interface:","interoper","interpret","introduc","io.reactivex.annotations)","it!!.filternotnull()","item","it’","java","java,","java.","javaclass","javaclass().valu","javatest","javax","javax.annotation)","jetbrain","jsr","kind","know","known","koltin","kotlin","kotlin,","kotlin.","kotlin?","kotlin’","languag","language.","later","length","librari","line","list","list>","lombok","lombok)","made","main()","make","mani","map","mark","mean","mechan","method","middl","more","much","name","name,","need","non","not.","notat","note","notnul","now,","npe","null","null,","null.","null;","nullability.","nullabl","nullable.","nulls:","object.","on","org.eclipse.jdt.annotation)","org.jetbrains.annotations)","org.jetbrains.annotations.notnull;","over","overrid","part","place","platform","platformtyp","platformtype()","pointer","possibl","possible,","possible.","preciou","print(\"us","println(value.length)","problem","problem.","problematic,","problematic:","propag","propagate.","properties,","property,","protect","public","rare","reactivex","real","reason","reasons,","recip","recommend","rememb","repo","repo.getusername()","repo.us","repo:","repoimpl()","repoimpl:","rest","result","return","runtim","safe","safely,","safeti","same","secur","set.","similar","singl","site,","site:","situat","solid","someon","someth","soon","sooner","special","specifi","statedtyp","statedtype()","step","still","string","string!.","string.","string?","string?.","such","suggest","summari","support","supported,","system","take","text:","thank","then.","there’","thing","think","those","though","though,","throw","thrown","time","treat","trust","type","type.","types,","types.","understand","unknown","unsaf","unsafely,","up","us","us.","user","user!","user1","user2","user2:","user3","user3:","user?","userrepo","userrepo()","userrepo().groupedus","userrepo().groupedusers!!.map","userrepo().us","userrepo().users!!.filternotnull()","users:","val","valu","value:","variabl","veri","want","warning:","well","well.","wherev","whole","why,","without","won’t","write","wrong.","wrongli","{","}"],"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":["(item","(limit","(so","//","1","10","14:","2","3","4","=","abov","accident.","addition","all,","alway","angri","anim","animal()","animal:","anoth","anyway:","api","api).","api,","assign","car","carfactori","cases,","caught","chang","class","clear).","comfort","compar","control","danger","dangerous.","decid","default","default.","default_car","default_car:","defin","don’t","easili","error:","especi","evolves.","exact","example.","except","explicit","expos","exposit","extern","factori","factories,","factories:","featur","feature.","fiat126p()","fiat126p.","first","fixed.","follow","fun","gener","good.","hide","import","infer","inferred,","inferred:","inform","interfac","interface:","introduc","it.","item","java","jvm","know","kotlin","kotlin).","kotlin’","later","let’","librari","look","made","main()","make","mismatch","module.","need","noth","now,","omit","on","open","outsid","part","popular","probabl","problem","problem.","produc","produce()","produce():","project","readability,","realli","rememb","repres","restrict","return","right","rule","safety,","sake","see","side,","similarly,","solved:","someon","soon","specifi","specified:","such","summari","superclass","sure","that,","though,","type","type,","types.","us","users.","val","var","variabl","visibl","well","well,","world.","yourself,","zebra()","zebra:","{","}"],"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":["!=","\"","\"becaus","\"cannot","\"fail","$n","(assum","(n","(though","):","+","/*...*/","//","//...","0\"","0)","1):","10","5","5:","=","==",">=","?:","@test","`stack","abov","achieve.","action","actual","add","address","address\")","advantag","advantages:","again,","all,","allow","although","alway","anoth","anymor","anymore.","anyway.","appli","applic","appropri","are:","argument","arguments,","arguments.","ask","assert","assert(ret.s","assert.","assertequals(10,","assum","basic","befor","begin","beginning,","behavior","behavior.","below","better","block","blocks.","bodies).","boolean):","both","break","calcul","call","call.","call:","called.","capabl","case","case,","cases,","cases.","cast","casting,","chang","changedress(person:","characterist","check","check(isinitialized)","check(isopen)","check.","checking.","checknotnull(token)","checknotnull.","checks,","class","clear","clear.","closer","clusters,","code","code.","common","compil","concret","condit","conditions.","consequences,","contract","correct","correct.","correctli","correctly.","correctness.","current","custom","danger","decid","declar","default","default,","defin","degre","desir","differ","direct","document","documentation,","documentation.","doesn’t","dress","dress)","dress.","dress:","ea","early,","easili","edg","effect","element","elements.","elements`()","elvi","email","email,","email:","empty.","enabl","error","error,","error.","error:","especi","evalu","even","everyon","everyth","exact","exampl","examples:","except","exception.","exceptions.","execution.","expect","expectations,","expected.","experi","express","fact","factori","factorial(n:","fail","fails.","far","feel","few","final,","find","first","first.","flexibl","four","free","fun","function","function).","function,","function.","function:","functions.","functions:","gener","getuserinfo():","give","handl","happen","hard","harder","have","help","here","hesit","highli","hope","idiomat","ignored,","illegalargumentexcept","illegalstateexcept","immedi","implement","implementation,","implementation.","impli","import","in.","includ","incorrect,","incorrectli","initi","inlin","instance,","instead","instead.","int","int):","integer.","it.","it:","item","java.","jvm","keep","kind","know","kotlin","kotlin/jvm,","lambda","later","later.","lazi","lead","less","let’","list","local,","log","log(\"email","long","look","made","main","mainli","make","manage4.","mani","match","mayb","mean","mechan","mechanisms:","messag","message,","message:","met.","miss","mistak","mistakes.","mode","mode.","modif","modifi","more","much","naiv","nearli","necess","need","next():","not.","notic","notice.","null)","null,","null:","nullability,","nullabl","num)","number","number,","object","on","onc","one:","open.","oper","opposit","option.","other","outfit","part","person(v","person)","person,","person.email","person.outfit","person’","place","point","pop","pop(num:","popular","posit","possible,","possible.","potenti","practic","predic","probabl","problem","problem.","production.","programm","propag","properli","properti","protect","public","python.","read","readabl","real","reality:","realli","refactored.","reliable.","rememb","requir","require(isvalidemail(user.email))","require(n","require(num","require(person.email","require(person.outfit","require(points.isnotempty())","require(value)","require(value:","require,","require.","required.","requirement.\"","requirenotnul","requirenotnull(person.email)","requirenotnull(user.email)","result","ret","ret.size)","return","returns()","returns,","right","right.","run","run,","sake","same","satisfi","satisfied,","satisfied.","satisfied:","self","send","sendemail(person:","sendemail(user:","sent,","seriou","side.","signific","similarli","singl","situat","size","smaller","smart","so.","solut","someon","someth","soon","speak(text:","special","specifi","stability.","stable.","stack","stack(20)","stack.pop(10)","stacktest","standard","start","started.","state","state,","state.","still","stop","stopped:","strang","string","string)","string?)","structur","such","summari","suspect","system.","t","take","talk","test","testing.","tests.","text:","thank","that,","them.","thing","those","throw","throw.","thrown","time,","to:","treat","true","true,","true.","trust","type","uncommon","unexpect","unit","univers","unless","until","us","used,","user","user,","userinfo","using:","val","validateemail(email)","validateemail(email:","validateemail(person.email)","valu","variabl","variables,","variables.","veri","visibl","visible.","want","way","well","whole","won’t","words,","work","wrap","write","{","}","“unpack”"],"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":["(incorrectsign)","//...","5:","6","6:","api","argument","arraylist.get(int).","arrays.","ask","assert","avoid","be","check","class.","client","collect","common","concurr","concurrentmodificationexcept","contract","correct","cover","custom","declar","defin","describ","detected.","develop","easier","element","elements.","error","errors,","especi","establish","except","exist.","expect","file","format,","format:","fun","function","here","illegalargumentexcept","illegalstateexcept","implement","index","indexoutofboundsexcept","indic","indicate.","inlin","instanc","instance,","instead","item","iter","json","jsonparsingexcept","jsonparsingexception()","kind","known","kotlin","learn","librari","list","make","method","modif","more","need","next","nosuchelementexcept","object.","on","out","own.","paramet","pars","possible,","prefer","present","prohibit","provid","range.","reason","request","requir","require,","result","return","reus","reused.","situat","situation.","specifi","standard","state.","string.readobject():","such","suitabl","support","supported,","t","throw","thrown","understand.","unexpect","unsupportedoperationexcept","us","use:","valu","well","whenev","{","}"],"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":["(incorrectsign)","(that","//...","1","7","7:",":","=",">","?:","?:.","addit","ag","api.","application.","are:","ask","between","bloch).","block","both","both:","call","case","catch","certain","choos","circumstances,","class","class,","client","code","code.","common","compar","compil","conditions(effect","connect","criteria,","data","design","desir","develop","differ","documented.","doubts,","easier","easili","effici","efficient,","element","elvi","encourag","error","error.","even","exampl","examples:","except","exception()","expect","expected,","expected.","explicit","explicit,","explicit.","explicitli","expression:","failur","failure(jsonparsingexception())","failure(v","failure)","failure,","fast","featur","few","first","flow","forc","fun","function","gener","getordefault,","getornul","getornull,","given","good","hand,","handl","handled,","happens,","harder","here","hold","idiomat","implement","import","incent","incorrect,","indexoutofboundsexception.","indic","inform","information.","inhibit","inlin","insid","internet","interrupt","item","java","joshua","jsonparsingexcept","jvm","know","kotlin","lack","latter","less","list","littl","main","make","malformat","match","mechan","miss","miss.","more","name","need","need.","null","null,","null.","nullabl","object","occur","on","oper","operator:","optim","options,","otherwis","otherwise.","out","pars","pass","perfect","perform.","personresult","personresult.value.ag","place","position,","possibl","practic","prefer","problem","produc","programm","propag","properly.","range,","readabl","realli","reason","rememb","replac","result","result()","result,","result.","result:","return","rule","safe","safely,","safeti","same","seal","server,","situat","situation.","situations:","sometimes,","special","standard","stop","string.readobject():","string.readobjectornull():","success","success(result)","success(v","such","support","suppos","t)","t?","take","tests.","text","text,","them.","there,","those","throw","throwable)","throwable:","time,","treat","tri","two","two.","type","unchecked.","unexpect","union","us","user","usertext.readobject()","usertext.readobjectornull()?.ag","val","valu","value,","variant","varieti","visibl","way","way.","ways.","well","we’ll","when(personresult)","wherea","whole","won’t","{","}"],"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":["!!","!!,","!!.","!!:","!=","\"unnamed\"","${name.touppercase()}\")","(!name.isnullorblank())","(!news.isnullorempty())","(item","(printer","(programm",".getboolean(from_notification_arg)","//","21:","3","4","5:","7:","8","8:","=",">","?.,","?:","@beforeeach","@test","abov","abus","accept","activity()","activity,","actual","ad","addit","against","agre","all.","allow","alway","analyz","android","annoy","api","applic","approach","appropriately.","approv","are:","arg(doctor_id_arg)","arg(from_notification_arg)","argument","argument.","arguments9.","ask","assert","associ","assum","avoid","b,","b:","back","be","befor","before,","behind","best","better","between","biggest","blanket","block","book,","boolean","boolean)","boolean.","both","braun","bundle?)","c,","c:","call","called.","can:","careful”","case","cases,","cast","casting,","casting:","checkand","checknotnull(context)","checknotnull,","class","clear","client.","clutter","code","code.","coincidence.","collect","collection,","collection.","collection?","comfort","common","community.","compil","complain","componentdidmount","conceptu","conflict,","consid","context","contract","control","controller!!.dosomething()","controller.dosomething()","controller:","correct","correctli","correctly.","cost","creation,","creation.","current","d).max()!!","d:","dao","dao:","data,","day.","deal","decid","deeper","default","defend","defens","definit","deleg","delegates,","delegates.notnul","delegates.notnull()","delegates.notnull.","depend","describ","deserv","design","desir","detail","detekt","develop","developers,","developers.","differ","direct","doctoractivity:","doctorid","doctorid:","done","doubl","dure","easi","easili","element","element)","elements,","elvi","empti","empty.","empty:","enum","error","error(\"print","etc.","even","evolv","exampl","except","expect","expected,","expected.","explain","explanation.","explicit","express","extens","extract","extreme,","fact","featur","find","find.","first","forc","fromnotif","fromnotification:","fun","function","function:","functions:","futur","future,","future.","gener","general,","getnetworkservice(context)","getnews()","getornul","getprinter()","good","handl","handled,","handled.","happen","hard","help","here","here”.","hidden","hide","highli","however,","idea","implement","import","important.","imposs","impossible.","includ","incorrect","increas","indic","inform","information.","init()","initi","initialized,","instanc","instance,","instead","int","int):","int,","intent.extra","intent.extras.getint(doctor_id_arg)","interact","interoper","invok","io","isn’t","it.","item","item,","iterable.firstornull(()","java","junit","jvm,","kind","know","known","kotlin","kotlin,","kotlin’","lack","languages.","largest","largestof()","largestof(a:","largestof(vararg","lateinit","later","later:","lazi","lazily:","lead","led","let","let’","librari","lifecycl","list","list.","list?","listof(a,","long,","look","loudli","main","mainli","make","mani","match","max","mean","meaning","meaningless","mention","messag","message,","messages.","met,","method","miss","misuse.","mockk()","mode","modifi","more","much","márton","name","name?\")","named\")","nearli","need","needed.","networkservic","networkservice.getdata","never","news.foreach","news:","nobodi","nointernetconnection()","none","norm.","nothing.","notifyuser(it)","notnul","npe","npe.","null","null)","null,","null.","nullability.","nullabl","nullwhen","number","nums.max()!!","nums:","object","offens","on","onc","oncreat","oncreate(savedinstancestate:","oncreate,","one.","ones.","oper","operator,","option","option.","option:","orempti","others,","overrid","pack","pars","pass","pattern","patterns.","point","polici","popular","possibl","possible).","possible.","practic","predic","predict","prefer","preferred.","present","present.","primitive,","print","printer","printer!!.print()","printer.print()","printer:","printer?","printer?.nam","printer?.print()","printername1","printername2","printername3","println(\"hello","println(\"what","privat","problem","process(user:","production,","program","programm","programmers.","programming.","project","properli","properly.","properti","property,","provid","quietli","rare","react","react.component.","read","readline()","realli","reason","refactor","removed.","repeat","replac","require,","requirenotnull(user.name)","requirenotnull,","result","return","returned.","review","right","safe","safely,","safest","safety,","sake","scari","scream","seal","see","seem","sens","separately,","set","set?,","short","shouldn’t","show(data!!,","shown","side","side:","silenc","similar","similarli","simpl","simple,","simplest","situat","situation,","situation.","situations.","slightli","slower,","smart","smell.","solut","someon","someth","sometim","sound","special","specifi","stabil","state","state.","static","string","string.tointornull()","string?.","strong","such","suggest","super.oncreate(savedinstancestate)","support","support.","sure","surpris","talk","team","techniqu","tempt","term","test()","tests.","that,","think","those","though","throw","throw,","thrown","thrown.","time","time,","tri","two","type","type.","types:","typic","uiviewcontroller,","uncommon","understand","undesirable.","unexpect","uniniti","unpack","unsaf","up","us","use.","used.","user","user)","usercontrol","usercontroller(dao!!)","usercontroller(dao)","usercontroller?","usercontrollertest","userdao","userdao?","userdata","userdata!!)","val","valu","value.","values.","var","variabl","variables.","variant","variou","veri","view.","viewdidappear","want","want.","way","well","whenev","wide","wider","wonder","won’t","wouldn’t","wrong","wrong,","yang.","yin","{","}","“be","“there","“unpack”"],"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":["(filereader,","(reader","(string)","(the","49:","9","9:","=",">","abov","ad","also,","alway","anymore.","aren’t","argument","as:","autoclos","autocloseable.","automatically,","behavior","big","block","blocks,","bodi","both","bufferedreader(filereader(path))","bufferedreader(filereader(path)).us","bufferedreader,","call","case)","cases,","caught.","close","closeabl","collect","collector","common","complete:","complic","complicated,","consid","contain","content","correct","cost","countcharactersinfile(path:","cssparser),","demand","easi","easili","error","error,","even","eventu","exceptions.","expect","expens","expression:","extend","extract","file","file(path).uselin","file,","file.","files,","final","fun","function","garbag","give","handl","hold","implement","incorrect","incorrect.","inform","inputstream","instead","int","interface,","invok","it.","it.length","item","iter","java","java.io.read","java.new.socket","java.sql.connection,","java.util.scanner.","keep","kotlin","kotlin/jvm,","lambda,","larg","librari","library,","library.","line","line,","lines.","lines.sumbi","load","long","longer","lot","memory.","method","miss","more","need","new","next","object","object:","on","onc","once,","once.","one.","open","oper","option.","outputstream,","over","pass","prefer","previou","problem","process","produc","propagated.","proper","properli","read","reader","reader.close()","reader.linesequence().sumbi","reader.us","receiv","refer","resourc","resource,","resources,","return","safe","sequenc","shortened:","standard","step.","string):","structur","such","summari","support","sure","syntax","take","thank","them,","themselv","there:","therefore,","throw","time","time).","tradition","tri","underli","us","use.","usefunct","uselin","val","way","whole","wrap","{","}"],"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":["(tdd)","(the","10","10:","5","@test","`fib","abov","above,","accident","accumul","achiev","adjust","advantag","afraid","all.","api","applic","approach","architectures.","are:","argument","assertequals(1,","assertequals(2,","assertequals(3,","assertequals(5,","assur","autom","automat","behav","best","better","better.","big","biggest","break","bug","bugs:","build","busi","calcul","call","case","challeng","chang","chapter","chapter,","cheaper","check","check:","clearly,","code","code.","common","complex","concret","confid","correct","correctli","correctly.","cost","cours","debug","develop","developers,","developers:","development.","differ","disadvantag","driven","dure","easili","edg","effect","element","engineers.","ensur","error","especi","establish","even","everyon","exampl","expect","experienc","fast","faster","feedback","few","fib","fib(0))","fib(1))","fib(2))","fib(3))","fib(4))","fibonacci","fill","find","first","first.","fix","forc","fun","function","gener","give","goal","good","good.","hand,","handl","happi","hard","hard,","harm","help","here","illeg","implement","import","int","int.max_value.","internally.","introduc","invest","it.","it10.","item","kind","know","kotlin","later.","learn","legaci","less","logic","long","look","loop","lot","maintainability.","make","manag","manual","manually.","more","much","n","need","neg","null","nullabl","number","numbers.","numbers:","object","object,","obtain","on","oper","or,","orthogon","outside,","over","part","past.","path)","perspective.","pleasurable11.","poorli","posit","positions,","positions`()","potenti","practic","present","primari","prioriti","problem","problemat","product","program","programmers,","proper","properli","provid","psycholog","public","quicker","quit","realli","recogn","reduc","refactor","reflect","regression.","reliabl","reliable.","requir","respons","rest","result","result,","run","run,","safer,","safeti","safety.","satisfi","save","scare","section","seen","short","shown","skill","small","softwar","someth","spend","start","stop","such","suffici","sufficient.","summari","support","suppos","system","take","tend","tendenc","term","term,","test","testable.","tested,","tester","testing,","testing.","tests,","tests.","tests:","th","that,","them,","them.","then.","there.","those","though","time","touch","typic","ultim","understand","unit","us","used.","user’","values.","way","well","without","work","works.","write","written","you’v","{","}"],"Part 1 Good code/Chapter 2 Readability/Introduction.html":["(and","1","15","2:","4=/[:+/(,/,\"0/~i:1)|.])*.1,:]","abstract","absurdli","allow","although","ambit","apis.","apl","apl.","apl:","bit","boilerpl","book.","challeng","champion","chapter","charact","characterist","class","clean","code","code,","come","common","compar","comput","concentr","concept","concis","concise.","contests.","conway’","design","design,","design.","develop","dive","done","don’t","elimin","especi","even","example,","exist","experienc","fact","featur","few","first","fool","fowler,","function","gener","golf","good","hard","help","here","hide","highlight","honest:","human","implement","important,","improv","instance,","introduc","introduct","isn’t.","item","j:","john","keyboard.","know","kotlin","languag","languages,","languages.","let’","life=:[:+/(3","life”","lot","make","meaning","misconcept","more","much","never","noise:","p.","part","particular","popular","probabl","problem.","program","programm","provid","read.","readability,","readabl","readable.","realiz","realli","refactoring:","refer","relat","repetit","rest","same","serv","set","short”.","start","structures.","such","suggestions.","that’","those","thought","thu","tool","topic","two","understand","understand.","us","veri","want.","whatev","wisely.","works.","world),","write","–martin","“game","“wow,"],"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":["!=","\"${it.name}","\"\\n\")","\"a\"","\"b\"","\"c\"","${it.result}\"","${it.surname},","&&","&&,","()","(after","(and","(both","(if/else,","(person","(safe","(structure,","(thi","+",".filter",".jointostring(separ",".let(::bufferedinputstream)",".let(::objectinputstream)",".let(::print)",".let(::zipinputstream)",".readobject()","//","11","11:","50","=",">=",">string):","?.,","?.let","?.let(view::showperson)","?:","?:,","abc","acknowledg","actual","ad","add","addit","addition","additionally,","adult.","alreadi","alway","analyz","anoth","answer.","anymore.","api,","append","are,","are.","argument","argument’","art","art.","ask","avoided.","b","b.","b?","back","bad","balanc","base","basic","beginn","behavior","behind","believ","better,","better.","bit","block","block.","book","both","bound","brain","branch","branch.","break","build","c.","calcul","call","calls).","came","care","career","case","cast","chanc","chang","chapter","clarifi","class","clean","clear","clearli","code","code).","code,","code.","code:","cognit","common","commonli","compar","complex","complexities.","comprehend","concaten","confusing.","constantli","construct","context","convent","cover","day","deal","deal.","debug","decor","definit","depend","describ","design","develop","developers,","developers.","differ","difference?","disciplines.","discuss","distance.","don’t","each","easier","easili","easy.","elvi","enough.","error","error.","especi","estim","even","everyon","everyone.","exampl","experi","experienc","explicit","express","expression.","expressiveness.","extrem","f()","fact","fair","fall","familiar","fast","featur","fewer","fight","fileinputstream(\"/file.gz\")","find","fine","first","fix","flexibl","focu","follow","form","francisco","fruitless","fun","function","function,","functions,","gave","gener","go","good","great","group","grow","guard","hard","harder","here","hire","hold","however,","idiom","idioms.","if/els","if/else,","implement","implementation,","implementation.","implementations:","implicit,","import","individu","infix","instanc","instance:","instead","intellij","introduc","invok","invoked.","isn’t","it.","it.isadult","it.result","item","it’","junior","know","known","kotlin","kotlin,","kotlin.","lambda","languag","last","later:","learn","less","let,","let.","let:","let’","li","line","line.","load","load.","logic","lot","made","make","mani","martin","mean","means.","method","method.","mind.","minut","misused,","modifi","modify.","month","more","more.","mostli","move","much","mutabl","naiv","name","name:","names,","nearli","need","never","new","not.","notic","now.","null","null,","null.","nullabl","obj","object","observ","obvious,","on","onc","once,","oper","operator.","operator:","operators.","over","overrid","pain","pattern","pattern).","pay","peopl","person","person(v","person.isadult)","person:","person?","person?.let","person?.takeif","plu","popular","possibl","prefer","present","previou","price","print(abc)","print(it.name)","printname()","probabl","problem","program","programming.","properti","puzzl","quickly.","ratio","read","readabl","readable.","reading,","reason","reason.","reasoning,","recogn","recognizable.","reduc","refactorization,","refer","references):","reinvent","remembered.","remov","result","return","rewritten.","right","robert","rule","run","s","safe","same","san","saw","science.","search","second","see","seem","senior)","sens","shorten","show","showerror","showperson","side","simpler.","singl","situat","smart","someobject","someth","specif","spend","spent","spot","start","statement","still","still,","string","string)","string.and(s:","string.invoke(f:","structur","structures,","structures.","student","style.","such","suggestions,","sum","supported.","sure","surely,","syntax","take","takeif,","teach","ten","terribl","them).","them.","they’v","thing","things.","think","third","this,","this:","those","though","thread.","throughout","time","togeth","together,","tool","total","train","tri","turn,","two","typic","unbelievable,","understand","understood","unexpect","us","usag","use,","use.","usual","val","var","varieti","veri","view","view.hideprogress()","view.hideprogresswithsuccess()","view.showerror()","view.showperson(it)","view.showperson(person)","view::showperson).","violat","want","way","way.","way?","weeks,","well","well!","we’v","wheel.","whole","wide","wonder","work","work.","works.","workshop","worst","wouldn’t","wrap","write","writing.","year","{","}","‘lambda","“creative”"],"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":["!6)","()","(1..this).product()","(dsl).","(x.plus(y))?.equal(z)","(z","*","+","+\"some","//","10","12","12:","3","6!","6.factorial())","6.not())","7200","=","==","===",">",">unit",">unit)","?:","acc","acc,","accept","add","alreadi","alway","amount","anoth","answer","apply.","as:","avoid","away","be","behavior.","below.","better","biggest","bodi","breach","break","calcul","call","capabilities.","carri","case","categori","clarifi","classes.","classic","clear","clearli","code","coher","come","concret","confus","connect","conscientiously.","consist","context,","convenient:","convention,","conventions.","danger","decision.","declar","defin","descript","design","develop","developers.","differ","difficult","discov","distribut","div","domain","don’t","dsl","each","element","even","example,","example:","exclam","exercis","expect","expression:","extens","factori","factorial()","factorial.","factorials.","familiar","favor","featur","feature,","fine","first","fold(1)","follow","for.","freedom","fulfil","fun","function","function.","function?","functions.","give","great","happen.","harder","hellohellohello","highli","html","imagin","implement","import","indicate.","infix","infix:","instance,","instead","instead.","instead:","int","int,","int.factorial():","int.not()","int.times(operation:","int.timesrepeated(operation:","invok","involv","item","iterable.product():","it’","i’v","keep","know","known","kotlin","kotlin,","languag","languages,","level","librari","like,","like?","logic","look","make","mark","mathematician","mean","meaning","meaning,","meaning.","mind","misleading.","misus","modifi","more","name","name,","names,","need","never","no.","not.","notat","notic","noticed,","now","null)","nullabl","number:","numer","on","oper","operation()","operation,","operator,","others,","overload","overloading.","part","particip","peopl","people,","piec","plu","power","present","print(\"hello\")","print(10","prints:","problem","programming,","read","reader","regular","rememb","repeat","repeat(3)","repeat(this)","repres","responsibility.","restrict","return","rule","rule?","same","same.","scala,","see","seen","separately,","simplest","sometim","special","specif","statement.","stay","stdlib:","strang","string.unaryplus.","such","sugar","suggests,","summari","support","surpris","syntact","syntax,","syntax.","tabl","text","text\"","theory.","think","this,","time","times1:","times:","timesrep","top","trainer,","tripl","tripledhello","tripledhello()","type:","unclear","unclear,","unclear.","understand","understand.","unfamiliar","unit):","unlimit","us","usag","val","veri","want","way","way.","way:","we?","well.","whole","wish","workshop","x","x.plus(y).equal(z)","y","z","{","}"],"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":["!=","&&","(person","//...","13","13:","2","=","?:","alreadi","alway","answer","answer.","appear","asked,","avoid","boolean","boolean.","both","call.","called.","case","code,","compar","confusing.","detect.","discuss","dure","elvi","ergo,","error","even","expect","express","false.","follow","found","friend","friend’","fun","function?”.","gener","getdata","getdata()?.let{","hard","if(!keyiscorrect(key))","import","instead","interchangeably.","interview","isomorphic,","it.","it?”.","item","keyiscorrect(key:","lead","less","logic","look","mine","mislead","miss","more","nearli","necessarili","never","nice","notations:","null","null,","null.","of:","on","oper","option.","person.isadult)","possibl","process,","question:","read","readabl","readable:","recruit","replac","repres","return","rule","safe","showdata","showerror","singl","something?","standard","string):","surprising:","this:","trick","tricki","true","two","type","unit","unit?","unit?.","us","valu","values:","verifykey(key)","verifykey(key:","view.showdata(it)","view.showerror()","view.showperson(person)","want","way","well,","we’v","write","{","}","“but","“whi"],"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":["\"marcin\"","10","112,","14","14:","3:","4:","554,","997)","=","addit","allow","also,","alway","argu","both","can,","case","chapter:","check","clear","clear,","clear:","code","compiler.","context","cost","data","data:","deeper","deeper.","design","develop","developers:","elimin","end","environ","even","expos","function","getsomedata()","github","go","good","great","help","hesit","hide","however,","id","idea.","implementation.","import","improv","infer","inform","is,","item","jump","kotlin","limit","listof(12,","littl","lot.","memori","messy.","name","num","obviou","omit","overus","platform","possibl","read","readability,","readabl","reader","reader.","redund","return","safeti","shown","soon","specif","specifi","specification.","specified.","support","system","there.","those","time,","type","type.","types.","up","user","userdata","val","valid","variabl","veri","wast","well","whenev","work"],"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":["\"","\"+","\"a\",","\"b\").quicksort()","\"d\",","${it?.name}\")","${name}\")","${this.name}\")","${this?.name}","${this?.name}\")","${this@node.name}\")","(an","(size","(thi","(this.siz","+\"column","+\"valu","+=","...",".also",".appli","/*...*/","//","0","1\"","1,","15","15:","2\"","2,","3,","5,","6).quicksort()","6]","=",">","@dslmarker","@htmldsl","[1,","[a,","accident","accordingly.","actual","addit","all.","annot","annotation,","annotation.","annotations)","answer","answer.","anyway.","appli","apply,","apply.","argument","argument.","associated:","avoid","b,","bad","basic","be","beersdrunk:","befor","better","better.","both","builder","builder,","c,","call","call.","can.","case","chang","choic","choos","clarifi","class","clear,","closest","code2:","come","common","compar","compil","confus","consid","context","correct:","creat","create(\"$name.$childname\")","create(\"$name.$childname\").appli","create(name:","d]","danger","default","design","differ","direct","directly.","don’t","drinkbeers(num:","dsl","dsl:","dslmarker","dslmarker.","dsls,","dsls.","error","especi","even","exampl","expect","explicit","explicit.","explicitli","explicitly.","extens","fact","final","first,","follow","forc","from.","fun","function","functions.","functions:","function’","gener","give","help","here","highlight","however,","html","htmldsl","implement","implicit","implicitly:","import","improv","inform","insid","instanc","instead","instead,","int","int)","investigate,","item","kotlin","label","label,","label.","later","level","list","list.quicksort():","listof(\"c\",","listof(3,","local","longer","main()","make","makechild(childname:","mani","marker","mean","mean.","mechan","mess","meta","method","method)","more","much","name","name:","need","nest","node","node(\"parent\")","node(name)","node(v","node.makechild(\"child\")","node?","notic","now","nullabl","num","object","on","one.","oper","outer","parent","parent.child","parent.child”,","parent”.","person()","place","possible.","prefer","print(\"creat","prints:","privat","probabl","problem","problem,","prohibit","properti","protect","quicksort","read","readability.","readabl","receiv","receiver,","receiver.","receivers,","receivers.","receivers:","refer","referenc","requir","respect","restrict","result","result?","run","safe","safer","same","scope","scope,","scope.","see","serv","show","similarly,","simpl","situat","so,","someth","special","spend","stop","string)","string):","structur","such","summari","tabl","table(f:","table:","tabledsl","tabledsl.()","taken","talk","td","that,","them.","them:","think","this.beersdrunk","this@table.tr","time","top","tr","tri","type","understand","unit)","unpack","us","usag","usage,","usage.","usage:","use.","use:","used:","user:","val","value.","var","variable.","veri","want","way","way.","why?","without","won’t","wouldn’t","written","yourself","{","}","“creat"],"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":["\"\"","\"$name","$surname\"","(1..100).sum()","(getter","(how","(thi","(this)","+",".getdefaultsharedpreferences(this)","//","16","16:","1_800_275_2273","21:","42",":","=",">","accessor","accessors,","action","acts)","actual","algorithm","all.","alway","answer","anymore.","anyth","applecomput","applic","back","behavior","behavior,","behavior.","behaviour","below:","better","big","bound","busi","cach","calcul","call","capabilities.","care","case","chang","class","code,","collections,","common","commun","complex","complexity.","comput","computation","concept.","conceptu","concretely,","connecttodb()","consid","context.inflater:","context.layout_inflater_service)","context.notificationmanager:","context.preferences:","convent","convers","conversion,","custom","data","data,","databas","date","date(millis)","date:","db:","decid","default","default.","defin","deleg","deriv","describ","detail","determinist","develop","differ","don’t","element","element.","encapsul","essenti","even","exampl","expect","expens","expensive.","extens","extract","fact","field","field?.touppercase()","fields,","fields.","find","for.","freeli","fullname:","fun","function","function,","function.","function:","functions,","gener","get()","get/set?","getname()","getsystemservice(","getsystemservice(context.notification_service)","getter","getter.","getters:","good","hand,","heavi","here","heurist","higher","hold","identifier.","if(!value.isnullorblank())","imagin","implement","inner","instance,","instead","instead:","int","int.todouble()","interfac","interfaces:","involv","involved.","is,","is:","issue,","it,","it.","item","iter","java","known","kotlin","kotlin,","later,","layoutinflat","lazi","leaf","left.sum","left.sum()","let","librari","lift","linear","listeners,","logging,","logic","long","longer","look","main","make","mani","matter","mayb","mean","member","method","milli","millis,","misleading:","modifi","modifications.","module.","more","move","name","name:","need","node","not,","notifi","notificationmanag","null","null;","o(1)","object","object.","open","oper","over","overrid","parsimoni","part","patterns.","perhap","person","point","preferencemanag","prefix","privat","problem","problem,","produc","project.","promis","properti","properties,","properties:","property,","property.","rather,","read","reason","reason,","reason.","refer","referenc","rememb","repres","requir","results.","right.sum","right.sum()","rule","s","same","see","see,","seem","separ","serial","set","set(value)","setname(name:","setter","setter.","setters:","sharedprefer","similar","simpl","situat","someth","standard","start","state","state)","state,","stdlib.","store","string","string)","string?","success","such","sum","supercomput","supercomputer()","theanswer:","them,","them.","therefor","this!","this.nam","though","throughout","thumb","tree.sum():","tree.sum:","twice","type","typic","uncommon.","unless","updat","us","user","usercorrect","userincorrect","val","val,","val:","valu","value.tim","var","var).","var,","way","way,","well:","whole","without","worri","wrap","wrap/unwrap","write","{","}"],"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":["\"contact@kt.academy\",","\"hello,","\"|\"","\"|\")","\"|\"?","()","(1..10).jointostring(\"|\")","(1..10).jointostring(separ","(1..10).jointostring(separator)","(extens","(or","(throwabl",")","*/","...","...\"",".subscribe((list",".subscribeby(","/*","/*...*/","//","1","100","100)","17","17:","2","46:","=",">",">unit","achiev","advantages:","after()","after:","all3.","all:","altern","although","alway","anyway:","argument","argument,","argument:","arguments,","arguments.","arguments.4","arguments:","arguments?","before()","below\")","best","block","bodi","builder","button(onclick","button({","call","call(aft","call(befor","call(before:","call({","call:","called:","callmiddl","case","case.","chang","change.","changed?","clarif","clarifi","class","cleaner","clear","clearli","clearly,","click","code","code,","code.","comment","concern","confusing:","consid","correctness.","creat","default","describ","develop","differ","don’t","dsl","dsl.","dsl:","each","easi","easier","efficiency,","error,","especi","example:","except","expect","expected.","express","expressions,","extens","finally,","finished.","first","follow","forward","freedom","fun","function","functions).","functions.","gener","good","help","here","import","improv","incorrect","independ","indic","inform","information.","inlin","instance,","instead:","intention,","intuit","is:","item","i’v","java","jointostr","know","kotlin","kotlin,","kotlin:","lambda","languag","last","libraries.","linearlayout","list","listen","listener?","longer,","look","made","make","mani","mayb","mean.","meaning,","means.","mechan","messag","message:","method","middlecal","misinterpret","miss","mistak","modifi","more","move","ms?","much","multipl","name","name.","named.","names.","names:","nearli","necessarili","need","new","non","not.","notic","observ","observable,","observable.getusers()","on","oncomplet","onerror","ones.","onnext","option","order","order.","outsid","paramet","parameter.","parameters,","parameters:","part","pass","peopl","place","posit","position.","position?","positions.","prefix.","preserv","prevent","print(\"call\")","print(\"middle\")","problems.","properti","protect","reactiv","read","reason","receiv","reliable.","repeat,","repeated.","required.","result","rxjava","safe","safer","safeti","safety,","said,","same","seconds?","see","seen","sendemail(","sendemail(to:","separ","separator)","separator.","set","similar","simpl","singl","situat","situations,","skip","sleep(100)","sleep(100.ms)","sleep(millis(100))","sleep(timemilli","sleep?","solv","sometim","special","specially.","specifi","static","step","still","string)","string,","subscrib","subscribeby.","such","suggest","summari","syntax:","take","text","text(\"click","them.","they’r","this,","those","thread","thread,","thread.","throwabl","throwable)","throwable:","time","treat","true","two","type","type,","type.","types)","types,","types.","unclear.","unit:","up","us","used.","users)","users:","val","valu","values.","variabl","variable:","view","want","way","well","well,","whose","wrapper","written","wrong","{","{}){","{},","}","})","});","},"],"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":["\"\"","\"\")","\"\",","\",","\"...\",","((t)",")","):","...","/","//","0,","1,","18","18:","2",":","=",">","accord","adjust","all.","also,","analyz","anoth","appli","aptli","argument","around","automat","base","best","better","between","bodi","book","both,","call","chang","chapter","charsequ","charsequence)?","checker","class","click","close","code","common","commun","consist","constructor","convent","conventions,","conventions.","conventions”.","corner,","couldn’t","decid","dedic","defin","degre","describ","develop","developers,","developers.","differ","document","documentation.","don’t","each","easier","editor","enough","establish","even","extern","familiar","fight","fine,","first","follow","format","formatt","formatted.","from…”","fullname(v","fun","function","function:","given","go","group","guess","guide”","happen","hard","help","help:","however,","human(id,","id:","important,","indent","int","intellij","interfaces.","intuit","it.","item","iterable.jointostring(","java","keyword","kotlin","kotlin,","ktlint","last","later","leav","limit:","line","line,","line:","link","linter","long","longest","look","make","mani","menu.","merg","more","mostli","move","name","name)","name){","name,","name.","name:","need","notic","notifi","null","offici","on","optim","other","other.","over","paramet","parameter,","parameters.","part","peopl","person(","person(v","person,","plu","popular","post","postfix:","practic","prefix:","primari","probabl","problemat","programm","project","project.","projects,","projects.","public","read","readabl","repositori","respect","right","rule","same","section","see","select","separator:","set","short","similarly,","singl","slightli","start","static","still","string","string)","string,","style","style.","superclass","surname:","switch","team","tend","thank","them,","them.","them:","those","time.","today","tool","transform:","truncated:","two","up","upper","us","val","veri","violat","violations.","way","ways:","well","wide.","width","without","work","written","{","|","}","“code","“predefin","“set"],"Part 2 Code design/Chapter 3 Reusability/Introduction.html":["(a","(print","3:","again","ago,","algorithm","android","anoth","api","appli","b,","backend","basic","believ","best","better","bit","book.","both,","break","c","call","caus","chang","changes.","chapter","chapters),","code","common","commun","complex","concret","countless","danger","day.","day?","deal","decis","dedic","demonstr","develop","differ","doesn’t","don’t","each","easi","easier","enthusiastic,","error","especi","even","extract","featur","feel","free","function","futur","gener","give","harder","haven’t","help","horror.","http(s)","impact","implement","introduct","intuitively.","it.","iterable.sorted.","it’","java.io","jni,","job","key","know","knowledg","knowledge,","kotlin/jvm)?","languag","languages:","learn","learn,","learn.","long","look","mainli","make","mani","mayb","me,","more","much","need","need.","now","now.","observ","on","onc","once,","one.","oper","part","past","powerful.","practice.","present","previou","print","problem","problems.","program","programs.","project","prone","protocol","readabl","requir","rest","reusability.","reusabl","rule","same","see","separ","short","skip","small","someon","someth","something,","sometim","sort","sound","speed","subject","support","support1.","system","system.out.print","systemat","task.","term.","terrifying.","thankfully,","theoret","though","though:","thought","through","touch","truth","typic","up","us","vanish","view","way","well.","whenev","wonder","work","written","x”.","year","yet,","yourself","you’r","“wow,"],"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":["(here","(in","(item","(like","(see","(ssot)","...","/*...*/","//","//...","10","10:","15","19","19:","2","20","2008.","2016.","27:","30","4:","=",">","absolut","abstract","abstract,","abstractions).","abused.","accredit","achiev","achieve,","actor","actor,","actors.","adjust","against","agil","ago.","algorithm","allow","alreadi","although","alway","amaz","analysi","android","anoth","another,","answer","antipattern,","api,","api.","applic","architecture,","art","artilleri","ask","aspect","assum","balance.","base","basis.","be:","behav","behavior","behavior.","behind","between","big","biggest","bit","boilerpl","book","boolean","both","both,","broadly,","build","bunch","busi","button","button,","calcul","calculatepointsfrompassedcours","calculatepointsfrompassedcourses()","calculatepointsfrompassedcourses():","calculatepointsfrompassedcourses.","calculation.","call","case","case,","chang","change,","change.","change:","changed,","changed?","changes.","change”.","chapter","check","class","class.","class/file).","classes.","clear","clearly,","client","close","code","code,","collect","come","common","common,","commun","compani","complain","concentr","conceptu","configur","configuration,","configurations,","connect","constant","constant,","contract","copi","coupl","cours","course,","creat","custom","daili","danger","dangerous.","dao","data,","data.","databas","day","day.","dean","decid","decis","default","defin","defined.","depart","department.","departments)","departments.","depend","describ","design","design.","desired.","develop","didn’t","differ","difference,","directli","do","domain.","domains.","don’t","dri","each","easi","easier","easier.","easili","edit","einstein","element","elimin","end,","enemi","enough","error.","especi","etc.","even","everyth","everywhere.","examin","exampl","example.","example:","examples,","expect","exposed).","express","extens","extract","extracted:","extraction.","extrem","fail","familiar","faster.","featur","features.","few","find","first","fit","forget","format,","fragile.","frustrating,","fun","function","function.","functionalities?","functions,","game","gener","general,","glitch3.","go","good","graphic","habit","hand,","harder","harder,","hasn’t","have","haven’t","heavi","help","helper","here","heurist","heuristic,","hibernate)","however,","idea","imagin","implement","import","independ","independently,","independently.","inform","information.","inherit,","initi","instanc","instance,","instance.","instances,","instances.","instead","instead,","int","integr","intent","intern","introduc","is.","is:","ispass","ispassing():","it,","it.","it:","item","item.","it’","job","key","kind","know","knowledg","knowledge.","knowledge:","knowledge”","known","kotlin","lack","languag","law","learn","less","let’","libraries,","like","like,","line","liter","littl","locat","logic","long","look","lot","loudli","machine,","main","make","manag","managers,","mani","mean","method","method,","methods.","miss","misus","modif","modifi","modul","modules:","months.","more","much","multipl","name","names.","need","new","next","not.","noth","now","now,","now.","nowaday","occur","old","on","onc","once,","one.","optim","option","origin","orm","otherwise,","other’","ourselv","out","out,","over","overrid","part","particularli","pass,","passing.","past","perfect","personifi","piec","place","platform,","platforms,","point","point,","popular","practice,","practice.","pragmat","prepar","present","prevent","previou","principl","principle.","privat","problem","problem,","problem.","problemat","problems.","program","program.","program?","programm","programmers,","programs.","programs:","project","project,","project.","projects.","properti","properties:","protect","public","qualifi","qualifiesforscholarship","qualifiesforscholarship():","qualifiesforscholarship,","qualify.","question","quickly.","quit","rare","reaction.","read","real","reason","reckless","recogn","redundancy.","reflect","releas","repeat","repeated,","repetit","repetition.","repetition?","repetitions?","replac","repres","requir","requirements.","respond","respons","responsibility.","responsible,","responsible.","result","results?","reus","reused.","rule","rule.","rule4","safe.","same","same.","sarcast","save","say","scalabl","scholarship","scholarship.","science,","search","second:","see","see,","semester,","semester.","sent","sentenc","separ","separately.","separately?","side","similar","similar.","simpl","simplest","simplifi","singl","situat","skip","slack","solid.","solut","someth","sometimes,","sourc","sources,","sources.","sql","stabl","stable.","standard","start","state","statement","stood","stori","structur","student","student.","student.calculatepointsfrompassedcourses():","student.qualifiesforscholarship():","studentispassingvalid","studentqualifiesforscholarshipvalidator.","students,","style","such","summari","superclass.","support","suppos","suspici","system","tabl","table,","table.","taught","teach","technolog","templates.","tempt","tend","terrifi","test","tester","tests),","text","that,","that.","that:","that?","them.","themselv","then,","theory.","thing","things:","think","those","though","through","till","time","time,","time.","today","togeth","tool","tool,","total","tough","treat","troublesome:","true","true,","truth","two","typic","ui","understand","understood","unhealthy,","unintend","unintent","unintentionally,","unit","univers","university,","up","updat","us","usage.","usages.","used.","user","veri","version","view/compon","virtual","want","was:","way","way,","way.","we,","websit","well","well.","wet","whenev","whether","whole","wise.","wish","without","work","work,","wouldn’t","write","wrong.","year","year.","yourself","yourself,","{","}","“a","“do"],"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":["\"text\"","\"text\".isempty()","(chapter","(list","(standard","*",".appli","0","100","100)","20","20:","5:","=",">","abstraction,","acc","acc,","achiev","advantag","again","again.","algorithm","algorithm,","algorithms,","algorithms.","alreadi","altern","although","alway","anoth","another.","appli","are:","argument.","arraylist()","atyp","atypical.","awar","bad","befor","behavior","behavior.","better","between","bodi","busi","calcul","call","cases.","categori","certain","chang","choic","choice:","class","classes.","clean","clear","code","coercein","coercion","collect","collection?","comment","comments,","common","compar","complicated,","concept","concept.","concepts,","concret","confus","consid","constructor","contain","cost.","countri","creation).","db.insertsources(sourceentries)","db.insertsources(sourcelist)","defin","defined.","deleg","demanding,","descend","descript","develop","developers.","differ","different.","direct","don’t","dot","duplic","each","easi","easier","effects.","either.","elimin","else.","end","especi","even","everywher","exampl","example,","exist","expect","extens","extract","factori","familiar","far","faster","feel","find","first","first,","fold(1)","foreach","free","fun","function","function.","function:","functions,","functions.","futur","future.","good","guess","happi","harder","help","here","hidden","hint","hold","hopefully,","huge","id","identical.","implement","implementation.","implicitly.","instanc","instead","instead,","instead.","intuit","invok","it,","it.","it.categori","it.countri","it.descript","it.id","item","item.sources.foreach","item.sources.map(::sourcetoentry)","iterable.product()","javabean","keep","know","known","kotlin","kotlin,","later","learn","least,","level","librari","libraries.","library).","library.","logic","logic,","logic.","long","look","loop.","lose","mainli","maintained,","mani","map","mathemat","mayb","mean","method","method,","miss","modifi","modul","more","name","named,","natur","nearli","need","need,","new","noise,","note","notic","number","numberfromus","numberfromuser.coercein(0,","object","object.","objects,","objects.","obsolet","often,","on","onc","once,","open","operations,","optim","order.","over","overrid","own.","pattern","pay","percent","perfect","perfect.","piec","place","point","practic","primari","privat","problem,","processing,","product","product,","profit","program","project","project,","project.","project:","properti","range:","read","realli","reason","receiv","recogn","reimplement","reinvent","rememb","repeat","repetit","repres","results.","same","savecallresult(item:","search","see","separ","set","short","shorter","should,","show","side","simpl","singl","small","snippet","someon","someth","sometim","sort","sortedbi","sortedbydescending.","sourc","source)","source.categori","source.countri","source.descript","source.id","sourceent","sourceentity()","sourceentity.categori","sourceentity.countri","sourceentity.descript","sourceentity.id","sourceentri","sourcelist","sourcelist.add(sourceentity)","sourceresponse)","sourcetoentry(source:","special","specific,","standard","start","state,","stdlib","stdlib,","steps).","stored,","such","suggest","summari","superclass,","take","taken","tested,","textutils.isempti","textutils.isempty(\"text\").","them.","therefore,","they’ll","thing","think","those","though","though,","through","time","time,","top","trust","type","types.","univers","up","up:","updat","us","use.","useless.","util","utilities,","val","var","veri","wait","way","way,","well","wheel","whether","without","worth","you’ll","{","}"],"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":["\"kotlinprogrammer\"","\"marcin\",","\"name\"","$field","$field\")","$new\")","$newvalue\")","$old","$valu","$value\")","(formal","(like","(this).",")","):",".also",".findviewbyid(id)",".getvalue(thisref:","//","0","21","21:","::token)","::token,","=",">","?:","@jvmfield","_","_,","`token$delegate`","`token$delegate`.getvalue(this,","`token$delegate`.setvalue(this,","abov","above,","accessor","activ","activity,","activity:","adapt","allow","android","annot","annotations.","anoth","any?,","api.","are:","argextra(doctor_arg)","around","attempts:","base","behav","behavior","behavior.","better","bind","bindconfiguration(\"port\")","binddimension(r.dimen.font_size)","binding,","binding.","bindview(r.id.button)","both","bound","button","button:","cach","cache:","case","chang","changed.","changes:","chosen","class","clever","code","code6:","common","compil","context","context.","context:","control","creat","createvalue()","custom","data","defin","deleg","delegate,","delegate.","delegate:","delegates.notnul","delegates.observ","delegates.observable(listof())","delegates.observable(null)","delegates.veto","delegation,","delegation.","demand","depend","develop","differ","different,","doctor","doctor:","draw","dure","each","easili","easy,","even","exactli","exampl","extens","extension.","extract","fact","featur","field","find","first","follow","fragment,","fragment.view","fragment:","full","fulli","fun","function","function,","function.","gener","get()","getorimplicitdefault(property.name)","getter","getvalu","getvalue(","give","good","id:","idea","identical.","implement","import","inform","initi","inject","inject()","inlin","insid","instance,","int","int)","introduc","it,","item","items.","items:","java","java,","javascript),","keep","key:","keyword.","kind","know","know.","koin","kotlin","kotlin,","kproperti","kproperty):","kproperty,","languag","language’","lazi","let’","librari","library.","list","list.","location),","log","log.e(\"key","loggingproperty(0)","loggingproperty(null)","loggingproperty(var","look","mainpresent","mainviewmodel","make","mani","map","map:","mapof(","marcin","mechan","member","method","more","multipl","name","name,","nearli","need","needed.","networkrepositori","new","newvalu","newvalue:","notic","notifydatasetchanged()","null","object","object.","observ","offer","old,","on","oper","option","over","pattern","pattern.","pattern:","patterns,","patterns.","place","point","popular,","port","possibl","power","practic","preferences.bind(token_key)","presenter:","print(\"$nam","print(\"${prop.name}","print(\"attempt","print(\"token","print(name)","privat","process","project,","project.","prop.nam","prop:","properti","property,","property.","property:","realli","receiv","redraw","refer","rememb","repeat","repetit","replac","repository:","requir","resourc","return","reus","right","safe","same","see,","seem","servic","set(value)","setter","setvalu","setvalue(","shows,","side","similar","simpl","situations.","someth","sometim","special","standard","start","stdlib,","stdlib:","string","string?","such","summari","support","swiperefreshbinderdelegate(v","swiperefreshlayout","swiperefreshlayout?","t","t)","take","textsiz","thank","that,","them,","thisref:","those","though","time","to.","token","token:","toolbox.","track","true","two","type","types,","understand","univers","us","use.","used,","used.","v1","val","val,","valu","value)","value,","value:","var","var.","varieti","veri","view","view.","viewmodel()","views,","vm:","way","ways.","well","well.","whenev","works,","worth","{","}"],"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":["(element","(predicate(element))","(so","(t)","):","/*...*/","//","22","22:","24:","=",">","accept","add","algorithm","allow","also,","animal,","anoth","are,","argument","argument,","argument.","arraylist()","aspect","bit","boolean","bound,","c","c):","call","case","check","choic","class","collect","collection,","colon.","common","compar","comparable,","compil","concret","consid","constrain","constraint","constraints:","correct","correctli","creation","destin","destination.add(element)","develop","developers.","developing,","discuss","dure","element","especi","even","exampl","experi","experienc","expression,","featur","filter","filter,","forc","fun","function","functions.","further,","gap","gener","give","goodtemp","have","help","id","illeg","implement","import","includ","infer","inlin","insid","instanc","instance,","int","int.","interfac","introduc","item","iter","iterable,","iterable.filter(","iterable.mapnotnull(","iterable.sorted():","iterable.tocollection(destination:","itself.","know","knowledg","known","kotlin","lambda","languages.","let’","list","listadapter(/*...*/)","lost","lot","make","mapnotnullto(arraylist(),","mean","method","modifiers.","more","mutablelist.","need","non","nullabl","objects.","offer","offers.","on","over","paramet","parameters)","parameters:","part","pass","pet(animal:","place","pleasur","popular","power","predicate:","previou","primarili","program","protect","r?","rare","result","return","safe","safer","same","set","set.","similarly,","someth","static","stdlib","subtyp","suggestions.","summari","supertyp","support","system.","t","t)","t,","t:","thank","them,","this)","those","transform)","transform:","type","type.","type:","types,","types.","understood","upper","us","user","val","valu","varianc","way","well","{","}"],"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":["...","//","23","23:","=","addtre","addtree(name:","addtree(tree:","avoid","better","birch:","care","class","confusing.","constrain","defin","desir","develop","developers:","differently.","done","due","each","error,","forest","forest()","forest(v","forest.addtree(birch())","forest.addtree(spruce())","fun","function","gener","hand,","happen","highli","independ","interfac","introduc","intuit","item","kind","lead","less","local","mismatch","mistak","name","name:","need","new","note","now","on","other:","outer","paramet","parameter,","parameter.","parameter:","parameters,","possibl","problem","problems.","properti","property.","rare","same","scope","see","seriou","shadow","shadowed.","shadowing.","situat","solut","spruce:","st)","string)","subtyp","such","summari","t)","t:","tree","type","uncommon","understand","unlik","us","usag","val","visibl","warn","well","work.","{","}"],"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":["\"b\",","\"b\";","\"c\")","(a","(any)","(explain","(for","(in","(int)","(it","(no","(number)","(out","(produc","(return","(so",")","//","1","1};","2","2,","24","24:","3","35:","4,","=",">",">any)",">any,",">int,",">number,","?:","[cat(name=felix),","[hound(name=pluto),","a:","abov","accept","accepted.","achiev","actual","affect","again","again,","allow","along","also,","amphibi","amphibious()","amphibious:","amphibiousspot:","analyz","anim","anoth","any:","any?","any?.","anys:","anyth","append(list:","append(strs)","argument","array","array)","array,","arraystoreexcept","assign","b","b,","b:","base","behavior","behind","below","benefit","between","big","boat","boat:","both","box","box(","box(\"str\")","box()","box(car())","box(val","box.set(\"som","box.set(42)","box:","boxany:","boxstr","boxstr:","car","car(),","car:","cast","casting,","casting.","cat(val","chang","chararray,","class","class.","class:","clearli","clearly,","coincidence.","collect","come","common.","compil","complex","concret","connect","consid","constraint","consum","context:","continu","contravari","contravariant,","contravariant.","coroutinecontext","covari","covariance.","covariant,","covariant.","creat","creation)","cup","cup()","cup,","cup.","cup:","cuti","data","decis","decision.","declar","declaration.","deepli","default","default,","defin","definition,","describ","desir","diagram:","didn’t","differ","dog","dog()","dog)","dog,","dog.","dogbox.set(hound())","dogbox:","doghous","down","dsl","e):","effect","element","else:","error","error(\"valu","error,","error:","etc.","etc.)","exampl","expect","expected,","expected.","exposed).","exposed.","fact","failur","failure(v","failure,","failure.","fillwithpuppies(animals)","fillwithpuppies(dogs)","fillwithpuppies(list:","fine","first","flaw,","follow","freeli","fun","function","functions,","garag","garage.valu","garage:","gener","get():","get,","getamphibious()","getamphibious():","give","go","good","great","here,","hierarchy,","higher","hold","holders.","hound(val","hound:","identity:","illeg","illustr","immut","implicit","in)","in.","includ","insid","instanc","instance,","instances,","instead","int","int,","intarray,","integer),","integer[]","interfac","inttodouble:","invari","invariance.","invariant.","it,","it.","it.hashcode()","it.todouble()","it.toint()","it.toshort()","item","java","java,","kind","known","kotlin","kotlin.","kotlin.coroutines.continuation:","kotlin:","let’","limit","limited.","list","list,","list.add(42)","list.add(puppy(\"beam\"))","list.add(puppy(\"jim\"))","lot","lower.","main()","main(args:","make","mani","map","mean","mismatch","modifi","modifier)","modifier),","modifier).","modifier,","modifiers,","modifiers.","modifiers:","more","move","mutablelist","mutablelist)","mutablelist,","mutablelistof(\"a\",","mutablelistof(cat(\"felix\"))","mutablelistof(hound(\"pluto\"))","mutablemap","mutableset,","name","name:","need","needed.","next","nospot.valu","nospot:","noth","nothing!","nothing.","nothings:","notic","null","number","numberastext:","numberhash:","numbers;","numbersto","numbertoint:","object","object,","object.","object:","object[]","objects.","objects[2]","occur","occurs.","ok","on","one,","open","oper","operations,","opposit","out","paramet","parameter),","particular","pass","perfectli","place","popular","posit","position.","positions.","positions:","possibl","possible).","possible.","potenti","power","practically,","present","prevent","print(str)","print(transition(42))","println(animals)","println(dogs)","printprocessednumber(identity)","printprocessednumber(inttodouble)","printprocessednumber(numberastext)","printprocessednumber(numberhash)","printprocessednumber(numbertoint)","printprocessednumber(transition:","privat","private:","problem","produc","prohibit","properti","protect","provid","public","puppi","puppy():","puppy(name=beam)]","puppy(name=jim),","puppy(v","puppy:","puppybox","r):","read","realiz","reason","receiv","relat","relation,","relation:","repres","respons","response()","response,","response.","result)","resumewith(result:","return","runtim","safe","safe,","safe:","safeti","same","seal","section),","see","see,","set","set\")","set(value:","set,","side","side,","side.","similar","singl","site","site,","situat","situation,","snippet.","sort,","sourc","specifi","state","stay","still","str","str:","string","string\")","string):","string.","strs[3]","structur","subtyp","success","success(v","such","suggest","suggests.","summari","supertyp","support","system","system.","t","t)","t,","t1","t2","t?","takedog(dog())","takedog(dog:","takedog(hound())","takedog(puppy())","thank","therefor","therefore,","think","this.valu","those","throw","time","toward","transform","treat","tri","true:","two","type","type).","type.","type:","types,","types.","understand","unlik","up","upcast","upcasting.","us","used.","val","valid","valu","value.","value:","var","variable.","varianc","veri","visibl","want.","way","well","well.","went","with:","without","work","wouldn’t","wrong","{","{1,","{}","}"],"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":["(also","(clean","(if","(so","25","25:","abstractions,","algorithms.","allow","alreadi","altern","alternatively,","alway","android","android,","android.","anyway","api","appcode.","applic","applications.","approach","architecture).","backend","backend,","base","becom","better,","between","both","build","built","busi","bytecod","c","c#,","c,","call","calls.","capabilities,","capabl","cases,","change,","citizen.","class","client","code","code.","coffeescript,","common","commun","communicate,","compani","compil","defin","definitions,","depend","design","desktop","develop","development.","devic","differ","different,","differently,","directli","each","easili","effici","elimin","end,","endpoint","especi","etc.","etc.).","even","exampl","experi","extract","few","first","framework","framework,","framework.","frontend","full","gener","give","good","gradle.","great","have","here","however.","identical.","implement","import","independ","inside.","instanc","instance,","io","ios,","item","java","java,","java.","javascript","javascript,","javascript.","jvm","jvm,","kind","king.","know","kotlin","kotlin,","kotlin.","kotlin/j","kotlin/js,","kotlin/js.","kotlin/jvm,","kotlin/n","kotlin/native.","kotlin:","ktor","ktor.","languag","learn","librari","libraries,","libraries.","linux","live","llvm.","logic","long","lot","mac","make","mani","migrat","mobil","modul","modules,","modules.","monopoli","more","move","multiplatform","nativ","nearli","need","network","now","nowadays,","object","onc","option","organ","os","part","particular,","parts.","pi,","place","platform","platform.","platforms,","platforms.","popular","popular)","possibl","power","product","products,","profit","program","project","project.","pure","python,","rare","raspberri","react","redund","reli","reus","reuse.","reused.","run","run.","safe","same","scala,","sdk","separated.","server","server,","sever","share","side).","significantli","similar","similar.","similarities.","singl","sometim","spring","spring,","stack","still","strongli","such","swift","swift,","there,","there.","thing","think","those","through","togeth","together.","tool","tools,","tools.","tornadofx","two","typescript,","typic","univers","us","us.","user","veri","version","visualized:","want","want.","way","web","websit","website,","websites,","well.","whole","without","world.","write","written","xcode"],"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":["(a","(along","(comparison,","(minheight","(object","(user","(x","//","26:","27:","3:","4:","5:","6:","8,","8.",":","=",">","abil","abstract","abstract.","abstraction!","abstraction,","abstraction?","abstractions.","acceleration,","achiev","actual","against","algorithms.","all.","along","alreadi","alternator,","although","alway","anyth","arraylist<>();","aspect","assign","assum","automobile.","b","b)","b:","backward","begin","behind","bigger","bigger,","biggest","bit","both","brake","build","calculatedheight","calculatedheight)","capabl","car","car,","car.","car’","case)","chang","change,","change.","change;","changes,","chapter","chapter,","chapter.","charact","charset,","choos","class","classes,","clear","code","code.","come","common","community,","complex","complexity.","components,","composition.","comput","concept","concept:","concret","concretely,","connect","construction.","coordin","core","course,","cover","creat","creation","creator","deceleration.","decid","deeper","defin","definit","deleg","delegates,","describ","design","design.","despit","diesel,","direct","directly.","disadvantage.","distanc","dive","doesn’t.","drive","driver,","each","easi","easili","electron","element","elements.","encapsul","engine,","enthusiast","etc.","even","everyth","exampl","expect","experiment:","explicitly:","exposed.","express","extract","featur","find","fine","first","follow","forc","forget","form","forms,","forward","freedom","full","fun","function","function,","function:","functions,","function’","fundament","ga","gas,","gear","generalization,","give","happen","hard","height","here","hidden","hide","high","higher","hood","hood,","hood.","however,","https://en.wikipedia.org/wiki/abstraction_(disambiguation)","idea","imagin","implement","import","inheritance).","initi","insepar","instance.","instead,","instead:","int)","int,","interfac","interface.","interface–th","introduc","introduct","is.","it.","it.nam","item","java","java.","know","kotlin,","lack","languag","lazi","left","let’","level","libraries.","list","list.","logic","long","magic","mainli","makeconnection()","mani","many.","map","maxof","maxof(a:","mean","mechan","mention","metaphor","method","minheight","modul","more","multipl","name","names.add(user.getname());","natur","need","never","new","number","number,","number.","numbers:","object","objects,","objects.","on","ones.","oop","oper","operations.","organ","orient","ourselv","part.","particular","pattern","patterns2.","pedal","pedals–to","perform","petrol","place","point","possibl","power","present","pretti","primit","problem","process","program","programming)","programming,","properti","properties,","properties.","protect","real","reason","refer","regardless.","remain","rememb","remov","repeat","repres","requir","rest","result","result,","return","reus","reusabl","right","rudimentari","rule","same","same.","see","see,","separ","seriou","seriously.","set","shifter","shifter,","signature.","similarly,","simpl","simplif","singl","special","spend","stay","steer","still","string,","structur","subset","such","superclasses.","suspens","systems,","term","thank","thankfully,","that,","there,","thing","thought","three","throughout","time!","to:","traits.","treat","two","type","under","understand","until","us","use,","use.","user","users)","users.map","utf","val","vehicle.","version","wasn’t","well","wheel","wheel,","whenev","wikipedia:","without","words,","work","world.","write","written","x","y","y)","zero","{","}"],"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":["(api)","(gener","(in","(method","(view","...","//","26","26:","[command","about.","absolut","abstract","abstraction.","abstractions,","abstractions.","abstraction”","absurdli","achiev","actions,","addit","adjust","advantag","allow","also,","alway","android","anoth","anyth","anything.","applic","applications,","applications.","architectur","ask","assembl","assembly.","attent","automat","backend)","basic","because,","behavior","believ","better","big","big.","boilwat","boilwater()","bonu","book.","brewcoffee()","brewcoffee,","build","built","busi","button","bytecod","bytecode.","c++","c,","call","case","chang","change,","chapter","clarifi","class","classes)","classes,","clearli","click","closer","code","coffe","coffee.","coffeemachin","collector","commands.","commun","compil","compiler:","complex","complex,","comprehens","comput","computers,","concept","concern","concret","consist","constantli","control","control.","convenient.","coordin","creat","created.","creator","ctrl","declar","defin","definit","design","desir","detail","details.","develop","device,","differ","difficult,","directli","distinct","distinguish","domain","don’t","each","easier","easily:","element","elements.","engin","especi","espresso","everyth","expected,","express","extract","extracted,","extrem","facilit","fact","fewer","find","first","flow","focu","follow","frontend,","fulli","fun","function","function,","function.","function:","functions,","functions.","functions:","further","garbag","gener","go","greatli","hand,","handl","handler","hard","hard.","harder.","hardware.","have","help","hide","high","higher","hold","http","hundr","idea.","imagin","implement","implementation).","implemented.","import","improv","independence.","input","input/output,","insid","instead","instructions.","intellij","interest","intermediari","interoper","interpret","introduc","invent","is.","it,","it.","item","i’v","java","java,","javascript","job.","jump","jvm","key","know","knowledg","lack","languag","language,","languages.","later,","layer","layer,","layers,","layers.","level","level,","limit","lines.","local","logic","long","lose","low","lower","lowest","mac]","machin","machine.","made","make","makecoffe","makecoffee()","makecoffee.","makeespressocoffee()","makeespressocoffee.","manag","mani","me,","mean","memori","milk.","minim","modifi","modification,","modul","modular","modules.","more","much","name","nativ","necessari","need","new","next","noth","notion","now","number","old","on","one).","oper","optim","organ","output","part","perspective,","physics.","place","platform","popular","pourcoffee()","pourmilk()","prefer","principl","privat","probabl","problem","procedure.","procedures,","process","processor","processor.","processors,","produc","program","programm","programmer’","programming,","programming.","programs.","project","project,","pyramid,","read","readability,","readability.","readabl","readable,","readable.","realli","reli","remov","repres","request","responsibilities.","result,","reus","rule","rule,","same","scienc","science.","scientist","see","see,","seen","separ","similarly,","simpl","simple.","simplic","simplifi","singl","small","smaller","someon","someth","something,","specif","split","start","state","stay","step","stratif","stratifi","stratified.","strong","studio,","subsystem,","such","summari","system","systems.","take","temperatur","term","terms.","test","test.","text","thank","that,","that:","them,","things.","those","thus,","time","time.","to.","today’","tool","trade","translat","tri","turn","understand","understand.","uniqu","unit","unnecessari","unreadable.","unthink","up,","upon","upper","us","usag","variabl","veri","view","view.","want","wast","water,","way","way.","ways,","well","well.","we’ll","whole","without","work","worri","write","written","you,","{","}","“singl"],"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":["(a","(class","(item","(we","(what",")",".show()","//","//...","0","0,","1","10","11","12","13","14","15","16","17","18","19","2","20","21","22","23","26","27","27:","3","30:","33,","4","46","5","6","61","7","8","9",";","=",">","@inject","about,","abstract","abstraction,","abstraction.","abstraction:","abstractions,","abstractions.","abstractions.on","accept","action","actions.","activ","actual","ad","add","additionally,","again,","against","alert.","alerts.","algorithm","all,","alreadi","also,","although","alway","amount","android,","anoth","answer","anxiou","anyway.","api","appli","applic","architect","around","art,","assign","assumpt","author","automat","available.","away","bad.","balanc","balance?","base","becom","before,","behavior","behind","benefit","berard","best","better","between","between,","big","bigger","biggest","bit","book","book,","boolean","both","bound","buzz11,","call","car","car,","care","case,","cases,","caus","chanc","chang","change,","change.","changed.","changes.","check","class","class.","class:","classes,","classes.","clear","code","code,","code.","cold","collect","collection,","collections.","common","comparison","compiler’","complex","concept","concept.","concret","connect","consequ","consid","const","constant","constant.","constant:","constantli","constructor.","constructors).","context","context)","context):","context,","context.showmessage(","context.snackbar(","context.toast(","context.toast(message)","context:","cost","coupling.","course,","created.","creation","creation,","creation:","creator","danger","dark","data","databas","day","deal","declar","decoupl","default.","defin","definit","deleg","depend","descriptions.","details,","develop","developers,","developer’","differ","directli","directly,","discuss","display","display)?","display.","display:","displayed,","document","doesn’t","domain","don’t","duration).show()","duration.","duration:","each","easi","easier","easili","easily,","easy,","edit","edward","element","elimin","end,","engineering,","enjoy","enterpris","enum","environ","especi","essay","etc.","even","everyth","exact","exactli","exactly,","examin","exampl","example.","examples:","experi","experimental,","explain","explanatori","expos","extens","extract","extracted,","extrem","fact","factor","factori","fake","familiar","far","featur","few","few:","field","fill","final,","finally,","find","fine","first","fizz","fizzbuzz","for.","forc","framework","freedom","freedom,","freedom.","friendli","frozen","fun","function","function,","function.","function:","furthermore,","futur","future,","gain","gave","gener","general,","get","getnextid()","getnextid():","give","give:","go","good","good.","hand","hand,","hard","hard.","harder","harder.","harm","have","help","helpful.","here","hidden","hide","higher","hold","honest,","hood","hour","hundr","id","id(nextid++)","id(priv","id,","id:","idea","ideal","if(text.length","imagin","implement","import","important.","increment","independ","independent?","infinit","influenc","inform","inject","inner","insid","instanc","instance,","instead","instead,","instead.","int","int)","int,","interfac","interface.","interface:","interfaces,","interfaces.","internally8.","introduc","intuit","intuition.","io","ios,","is.","is:","ispasswordvalid(text:","it.","item","item,","iter","keep","key","kind","know","knowledg","kotlin","kotlin,","kotlin/js,","kotlin/jvm,","kotlin/native.","label","languag","lateinit","later","later,","later.","lazi","lead","learn","length:","less","let’","level","librari","library,","library:","like:","limitations.","limited.","line","list","list,","listof","liter","littl","logic,","long","look","lot.","make","manag","mani","manufactur","map,","matter.","max_thread","maximum","meaning","mechan","mechanism?","member","mention","messag","message,","message.","message:","messagedisplay","messagedisplay(context)","messagedisplay(v","messagedisplay.setchristmasmode(true)","messagedisplay.show(\"message\")","messagedisplay:","messagelength","messagelength.long","metaphor","method","method9","methods).","min_password_length","mind,","minim","minimum","misunderstand","mock","mocking,","mockk()","modifi","modify.","modul","modular","more","move","much","multiplatform","name","name,","name.","nativ","nearli","necess","need","need.","neglect","new","newid","next","nextid++","nextid:","notic","notice.","now","number","object","observ","odd","older.","on","onc","once.","open","oper","operations.","optim","organ","orient","ourselv","over","overrid","p.","paramet","parodi","part","password","perfect.","perfect:","perform","perspect","phones.","platform","platform.","point","possibl","possible.","power","practic","prefer","prepar","present","present.","prevent","privat","private.","probabl","problem","problemat","problematic.","problems.","process","program.","programm","programmatically:","project","project.","project10","projects.","prone","proper","properti","protect","provid","purposes:","rare","read","reader","readonlyproperti","readwriteproperti","real","realli","reason","reason,","reduc","redund","remain","rememb","renam","repeat","repres","requir","respect","restrict","result","return","return,","ridicul","risk","rule","safe.","safer.","same","same,","same.","say","search","see","see,","seen","self","sensor","separ","seriou","serious,","serv","set","share","short","short,","show","show(","showmessag","showmessage,","showmessage.","side.","signatur","similar","simpl","simpler","simplest","situation.","size","size.","small","snackbar","snackbar.","snackbar.length_long","snackbar’","softwar","solut","solution,","solutions.","solv","someon","someth","somewher","soon","sort","specialist","specif","specifi","split","spread","standard","start","state","state,","state.","stay","still","string):","string,","string?","strongli","structures.","stuck","subclass","such","suggest","summari","suppos","sure","sure,","surpris","tablets,","take","talk","tasks.","team","test","testmessagedisplay()","that,","that.","them.","then.","they?","thing","think","those","though","though.","thousand","thread","three","thu","thumb","time","time.","time:","to.","toast","toast(message)","toast,","toast.","toast.length_long","toast.length_long).show()","toast.length_short","toast.maketext","toast.maketext(context,","toast.maketext(this,","toast:","toastdisplay(v","toastdisplay.","toastdur","toastduration)","toastduration).show()","tool","top","type","type.","under","understand","understand.","understood","unintend","uniqu","unit","univers","unlikely).","up","us","us.","usag","usage,","usages.","used,","used.","user","user.","v","val","valid","validation:","valu","value.","var","variant","varieti","veri","via","view,","view.","visibility)","visibl","walk","want","water","way","web,","web.","well.","well:","we’v","when(duration)","whenev","without","won’t","worries,","wrap","write","year","{","}","–"],"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":["\"+","\"estimateds","(0.y.z)","(api).","(bi","(depend","(list)","(semver),","(the","):","//...","0,","0.","1.0.","28","28:","3","5","=",">unit)","@deprecated(\"us","@experimental(level","@experimentalnewapi","achiev","add","addit","adjust","adjust.","adoption,","afraid","again,","allow","also,","altern","alternative,","annot","annotation:","annotations.","anoth","anyth","api","api,","api.","apis,","applic","are:","automat","avail","avoid","backward","becom","beta","between","big","branch","branch.","bug","build","bytearray","car","chang","changed.","changes,","changes.","class","clear","code","code.","codebase.","comfort","commun","community)","compat","compos","concret","consid","correct","corrections.","creator","deal","default_buffer_s","depend","deprec","deprecation.","design","develop","development,","differ","direct","display","do","document","documentation,","don’t","down","drive.","each","either:","element","element.","energi","entirely.","error","especi","estimatedsize:","exampl","expect","experiment","experimental.level.warning)","experimentalnewapi","extens","familiar","final","first","fix","fixes.","follow","formally,","format.","fun","function","gener","getus","getusers():","getusers(callback:","give","good","hand,","hard","hard,","hard.","harder","have","healthi","help","id","import","importance.","important.","improv","incompat","increment","increment:","initi","inputstream.readbytes(","instead\")","instead\",","instead,","int","integ","interfac","interfaces.","introduc","issu","it),","it.","item","keep","know","knowledg","kotlin","label","languag","lazi","lead","learn","level).","librari","libraries.","library,","life","list","long","longer","longer.","lot","main","major","major,","major.minor.patch","major.minor.patch.","make","mani","manner.","manual","meaningless","merg","meta","metadata","minor","modul","moment.","more","more,","much","names,","nearli","need","need,","new","newer","noth","now","number","older","on","ones.","ourselves,","outdat","over","overload","owner","pain","parameter\",","part","parts:","patch","period.","perspective,","point","popular","posit","possibl","pre","prefer","preferred,","preset","problem","problemat","process","program","programm","programming,","project","public","radio","reach","readbytes()","realli","reason","releas","release,","remov","replacewith","replacewith(\"getusers()\"))","replacewith(\"readbytes()\"))","requir","respons","secur","see","semant","semver","set","similarly,","simplest","situat","situation.","slow","small","solut","someth","specifi","spend.","stabil","stability.","stabl","stable,","stable.","standard","standard.","start","stations,","stay","stdlib:","stop","such","summari","support","suppos","suspend","system,","systems,","take","temporari","them,","them.","therefor","thing","those","though","time","time,","time.","took","total","transition,","transition:","treat","troubl","unexpect","unhealthi","univers","universal,","unstable.","unwil","updat","update,","us","use.","user","users.","user’","veri","version","version,","versions.","visible,","vulner","want","warn","way","way.","well,","what’","whole","wide","with.","without","work","worri","wors","year","years.","zero","{","}"],"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":["(of","29","29:","adjust","afraid","answer","api","approach:","behavior","both","care","case","chang","change,","clarifi","class","consid","control","correct","counterargu","cours","course,","creator","decid","defin","develop","differ","expect","extern","freedom","function","generally,","give","good","has,","heavili","heurist","inevit","insid","intern","internal,","internally.","is.","item","keep","know","learn","librari","limit","logic","logic.","lot","mani","more","much","need","new","number","object","on","one.","overflow.","popularity.","possible.","potenti","problem","project","project.","projects.","rememb","replac","requir","responsibly).","riski","riskiest","separ","sides,","singl","small","stability:","stabl","stable.","stack","style","teach","tell","those","trust","unstabl","unstable,","unstable.","us","usag","user","users.","version","wise","works.","wrap","wrapped.","wrapper.","wrappers."],"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":["(!initialized)","()","(data","(default)","(item",")","+=","0","2.","3","30","30:","36:","4",":","=",">","accessors.","achiev","add(element:","addall(elements:","added.","adjust","age,","age:","altern","alternative.","alway","angry.","anoth","ant","any()","any?","api","api,","appli","assumpt","because:","behavior:","below","better","big","boolean","busi","carefulli","cases,","challenge.","chang","changes,","chapter","class","class,","class.","classes,","client","code","collection):","compil","composit","concret","concurrency.","consid","constitut","contain","contract.","control","convent","correctli","counterset","counterset(","current","data","deal","decid","declar","default","defin","deleg","depend","design","develop","developed.","developer.","differ","directli","do,","don’t","dozens.","dto).","each","easier","element","element.","elements.s","elementsad","elementsadded++","elementsadded:","elements’","encapsul","entirely.","especi","even","everywhere,","everywhere.","except","exist","expect","expos","exposed,","extern","externally.","face","fals","few","fewer","file","find","first","forc","fun","general,","get():","give","good","gradl","guarante","harder","have.","help","hidden.","hide","hold","idea","implement","implementation,","import","inherit","inheritance).","initi","initializer()","initializer:","innerset","innerset.add(element)","innerset.addall(elements)","innerset:","insid","instance,","instead","int","intellij","interfac","interface.","intern","internal.","invariants,","invoc","it,","it.","item","know","kotlin","lead","lean","learn","less","let’","level","library,","limit","locally:","longer","look","maintain","mainten","make","mani","maven","mean:","member","members,","minim","model","modifi","modifiers.","modifiers:","modul","module,","module.","moment.","more","much","mutablelazi","mutablelazyholder(v","mutableset","mutablesetof\\","name","name:","need","new,","note","notic","now","object","on","only.","other.","otherwis","out","outsid","outside,","outside.","over","overrid","package.","parallel","pars","part","place.","possibl","possible.","practic","prefer","primarili","privat","private.","probabl","problem","programming,","project,","properti","property.","protect","protected.","provid","public","publicli","realli","reason","reasons.","repres","requir","respons","restrict","return","rid","rule","sacrifices,","same","satisfy.","see","server","set","set(value:","set,","setter","setter.","simple,","smaller","solut","someon","someth","something.","sourc","state","string,","subclass","subclasses,","subclasses.","such,","suggest","summari","superclass.","support","surname:","t","t)","t):","t.","take","task.","test.","that:","thing","this.valu","thumb","togeth","together.","top","tough","track","trick.","true","true,","trust","type","type,","ugli","understand","understand.","updat","us","usag","usages.","user","user(","val","valu","value:","var","veri","visibility.","visibl","visible,","visible.","want","way","well.","whatev","whole","without","wouldn’t","year","you’ll","{","}"],"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":["(","(book","(elements.s","(function","(i","(isempty())","(item","(just","(jvm).","(unless","(user",")","):","*","*.","*/","*/,","+",",","...",".let",".powerset()","/**","//","0","0)","0.","1","1)","26:","27:","28:","31","31:","=",">","@author","@constructor","@except","@param","@properti","@receiv","@return","@sampl","@see","@sinc","@suppress","@throw","[com.package.someclass.element2]","[element1],","[element]","[thi","absolut","abstract","abstraction).","abstractions,","acc","acc,","acc.map","acc:","acceler","achiev","actual","actually,","add","added.","addit","addition","additionally,","address","adjust","again","against","agre","agreement,","all,","all.","allow,","alter","although","alway","amaz","angl","anoth","anyth","api","api,","appli","are,","argument","assum","author","automat","axis.","back","base","be","befor","begin","behav","behave,","behave.","behavior","behavior,","behind","believ","below:","best","better","bit","block","bodi","book","books)","both","bracket","brake","brand","break","c.","call","can.","car","car,","car.","cases,","chang","changes:","chapter","children","children.","class","class,","class.","classes)","classes,","clean","clear","clear,","clearli","code","code,","code.","collection,","collection.powerset():","come","comfort","comment","comment:","comments,","comments.","comments12.","comments?","commun","compiler).","compos","concentr","concept","concept,","concept.","concern","concret","confid","connect","consist","constructor","constructor.","context.showmessage(","contract","contract,","contract.","contract?","contracts.","creat","create.","creator","creators,","critiqu","current","custom","data","decad","deceler","defin","demonstr","depend","describ","described.","descript","description.","description:","description][element3]","desir","detail","develop","developers.","differ","difference.","differently.","direction.","display","displayed.","distract","do,","do?","document","documentation,","documentation.","documentation:","documented.","dokka.","don’t","doubl","double)","drive","duration:","each","electriccar:","element","element,","element.","elements.","elements.aslist()","elements:","else.","emb","empti","emptylist()","encapsul","encapsulation,","end","engin","enough","enough:","enum","especi","even","everyth","exampl","examples,","except","exclud","expect","expectation,","expectations.","expected.","explain","explan","explanation.","explanatori","express","extens","extern","externally.","extract","extrem","failure.","feel","file","find","fine","fine.","first","float)","fluctuate.","fold(1)","follow","following:","format","freedom","freedom.","fun","function","function,","function.","functions.","future,","ga","gascar:","gasolinecar:","gener","give","given","good","great","guarante","guarantees.","have","head","healthy.","hear","here","hidden","hierarchi","higher","history,","hold","holds.","honor","hood.","however,","immut","immutable.","implement","implement.","implementation,","implementation.","implementations.","implic","import","important.","includ","including:","independently.","infer","infinit","influenti","inform","insid","instanc","instance,","instead","instead.","intend","interfac","interface:","intern","interpret","introduced.","it,","it.","it.map","item","itself","java","jvm.","kdoc","kdoc.","keep","kept","kind","know","known","kotlin","languag","languages,","last()","later","leak","leak.","learn","leav","left","left.","left.drop(1)","left.first()","left.isempty()","left:","length","length:","level","level,","librari","library.","life","line","link","liskov","list","list.product()","listof(vararg","listof:","liter","long","look","lot","make","mani","markdown.","martin).","mathemat","max","maxim","mean","meaning","meaningful.","means?","measured.","messag","message,","message.","message:","messagelength","messagelength.long","metaphor,","method","method,","method.","methods,","method’","might,","minimalistic,","modul","more","more”.","much","name","name.","names,","nearli","need","needed.","new","newli","next","node","nois","normal","noth","notic","now","null","null,","number","object","object.","objects.","obviou","offici","omit","on","onc","onlin","open","oper","opinion","opposit","optim","optimization.","order","ordered.","organ","orient","ourselv","outsid","outside:","paragraph","paramet","parameters.","parents’","part","parts,","pedal","peopl","percentag","perfectli","perform","pi/2","pi/2)","pi/2,","plus(element:","point","point,","popular","posit","possibl","power","powerset","powerset(","powerset(tail,","powerset(this,","powerset,","practices.","present","pressur","primari","principl","principle,","privat","problem","product","program","programmers,","programming,","programming.","program”.","project","projects.","promis","promised.","promises,","properli","properti","protect","public","publish","qualifi","questions.","radian","read","readabl","readonlylist","real","receiv","refer","reflect","rel","reli","rememb","replac","repres","respect","respected.","respons","return","right","right,","right:","risk","robert","rule","s","sampl","samples.collections.collections.lists.","satisfactori","satisfi","satisfied.","scary,","second","see","see,","self","separ","serializ","set","set>","setbreakpedal(pressure:","setgaspedal(pressure:","setof(emptyset())","setof(setof()))","setwheelposit","setwheelposition(angle:","short","short,","shorten","show","shown","side","sides.","significantli","similarli","simpl","singl","slower","softwar","solv","someon","someth","sound","sourc","special","specifi","specified,","speed","squar","stability).","stabl","standard","start","stdlib","still","still,","straight,","string,","strong","structur","structure.","subclass","subset","substitut","subtree.","subtrees...","subtyp","such","suggest","sum","summari","summat","superclass","superclass,","supported:","sure,","system","t","t):","t,","tag","tag.","tail","tailrec","take","take(s","term","text","them,","therefor","they’ll","think","those","though","through","thrown","toast.","toast.length_long","toast.length_short","toast.maketext(this,","toastdur","toastduration).show()","toastlength","toastlength).show()","too.","tools.","translat","treat","tree","tree(","tree.","tree?","truli","truth","type","type.","type:","types.","unclear.","under","understood","unexpect","unit","univers","unnecessari","until","up","updat","update()","updatebook(book)","updatebooks()","updateusers()","us","us.","use.","used,","used.","useful.","user","user,","user.","user.update()","users)","users.","uses,","val","valu","value:","variou","vehicl","veri","version","visibl","voic","want","way","ways,","well","well,","well.","wheel","when(duration)","when(length)","whenev","without","work","works,","worri","write","written","young,","{","}","})","“if","“you"],"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":["\"privatefunction\"","\"user(id=$id)\"","&&",".appli",".call(employee)",".first",".set(employee,","//","1)","2","3","32","32:","6:","=","==","abstract","agreement","all,","allow","alway","anoth","any?)","anyth","appli","behav","behavior","below","between","bomb","both","break","call","called\")","callprivatefunction(employee)","callprivatefunction(employee:","case,","chang","changeemployeeid(employee,","changeemployeeid(employee:","chapter","check","class","classes,","code","code.","comput","consist","contract","contract,","contracts.","correctli","correctly,","correctly.","depend","design.","detail","developers.","discuss","document","doesn’t","don’t,","duplicates:","employe","employee()","employee)","employee,","employee::class.declaredmemberfunct","employee::class.java.getdeclaredfield(\"id\")","equals(other:","equals,","equals.","equalsand","especi","establish","everyth","expect","extend","fact","few","fine","forc","fun","function","function.","hack","hacked.","hashcod","hashset.","help","here","here:","id","id(val","id:","implement","import","incorrect","inform","inherit","instance,","int","int)","interfac","isaccess","it,","it.","it.nam","item","kind","kotlin","library.","long","lose","main()","maintain","mayb","mean","methods.","moment.","mutableset","mutableset.add(id(1))","mutablesetof(id(1))","name","nearli","need","newid)","newid:","now,","object","open","other.id","overrid","override,","part","possibl","principl","print(employee)","print(mutableset.size)","println(\"priv","prints:","privat","privatefunction()","problem","program","program.","project","properti","protect","reflect","rememb","respect","respect.","same","set","singl","something,","stable,","start","stop","strongli","such","summari","technically,","them,","those.","tick","time.","tostring()","true","us","user(id=1)","user.","val","veri","violat","visibl","want","want:","warranti","warranty.","well","well.","whoever","work","working.","years’","you,","you.","{","}"],"Part 2 Code design/Chapter 5 Object creation/Introduction.html":["(oop),","5:","advantag","allow","altern","although","better","between","bloch,","book","book.","chang","chapter","characteristics.","cheer","coincidence.","companion","creat","created,","creation","creation,","defin","design","differ","disadvantages.","don’t","effect","explain","ey","familiar","first","forc","function","functions,","functions.","good","have.","import","important.","instance,","introduc","introduct","items,","java","java,","java.","joshua","know","knowledg","kotlin","kotlin,","language,","level","mainli","method","more","morsel","mostli","much","need","new","notic","object","oop,","open","option","orient","ought","possibilities.","possibl","power","program","provid","pure","realli","relat","same","show","similar","similarities,","similarly,","static","style,","style.","them.","top","understand","up:","use,","used.","veri","way","well","work","written"],"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":["\"$it\"","\"moskala\")","\"row\"","\"user$it\"","\"wojda\")","()","(and","(even","(index:","(int)","(item","(like","(sinc","(standard",")","):","...",".copyofrange(1,","/*...*/","//","//...","0","1.1)","10)","12:","2)","2,","33","33:","34:",":","::a","::tree","=",">",">a",">t):",">tree","[user0,","```","a()","abil","abov","abstract","access","accord","achiev","act","activ","activity,","activity.","activity.startactivityforresult(intent,","activityfactori","activityfactory()","actual","advantag","advantages,","advantages.","aggreg","all,","allow","altern","although","alway","android,","anko","annot","anoth","answer","appcompatactivity()","approach","are.","are:","argument","arguments).","arguments.","arguments:","around","array.newinstance(classobject,","arraylen)","arraylist(3).","arraylist(size)","arraylist.withsize(3),","associ","avail","base","becom","begin","behav","behind","below:","better","between","biginteg","biginteger.valueof(integer.max_value)","bigtool","block.","body,","br:","break","bufferedread","build","builder","built","c++,","cach","caching,","call","capabilities.","capabl","capit","case","cases.","catch","caution:","chang","characterist","choic","choos","class","class,","class.","classes.","clear","client","clutter","code:","collections.","come","common","commonli","community.","companion","compar","competit","complexity.","complic","config","config)","conflict","confus","confusion.","connect","connections.createornull()","consid","construct","construct.","construction,","construction.","constructor","constructor(vararg","constructor,","constructor.","constructor1.","constructor:","constructors,","constructors.","context","context)","context):","context.","context.startactivity(intent)","control","convent","convention,","convers","coroutin","coroutinecontext.key","correspond","creat","created,","created.","createinst","creation","creation.","creator","data","date","date.from(instant)","date:","decid","declar","defin","definit","depend","descriptions:","descriptive,","design","develop","developers.","developer’","differ","direct","directli","disadvantage:","discuss","distinct","duplic","each","easi","element","elements.first()","elements.size)","elements:","elementstail","empty)","enough","ensur","enumset.of(jack,","equival","error","especi","everyth","everywhere.","exampl","example,","example:","except","exist","exist.","expect","experienc","explain","explanatory.","extend","extens","extern","f:","facecards:","fact","factori","factory.next(\"igor\",","factory.next(\"marcin\",","fake","familiar","file","file.","files.getfilestore(path)","files.newbufferedreader(path)","filestor","fine.","first","flexibility,","follow","forc","freedom","fs:","fun","function","function,","function.","function:","functions,","functions.","functions:","gener","generator:","getinst","getinstance,","getintent()","getintent(activity)","getintent(context)","getintent(context:","gettyp","give","group","guarante","guess","head","head:","help","here","hide","hold","hood.","however,","id","id:","idea","identifi","idiom","if(elements.isempty())","immedi","implement","import","importantly,","includ","including:","inconsist","incorpor","independ","index","inherit","init)","init:","inlin","instanc","instance,","instance.","instantiation.","instead","instead:","int)","int):","int,","intens","intent","intent(context,","intentfor","intentfor(\"page\"","intentfor()","interfac","interface):","interface.","interface:","interfaces.","intlinkedlist:","introduc","ints:","intuit","invoc","invok","invoke(size:","invoked.","it.","item","item,","itself,","java","java.","judiciously.","key","kind","king)","kotlin","kotlin,","kotlin.","kotlin/js,","kotlin/jvm,","kotlin/n","languag","languages,","less","let","letter.","letter;","let’","level","librari","library).","library,","library.","limit","list","list(","list(4)","list,","list.add(init(index))","list.of(1,2,3).","list?","listconstruction:","listof","listof(1,2,3)","listof,","listview","listview(items)","long","longer","look","lot","lower","luke:","made","main","mainact","mainactivity.getintent(context)","mainactivity.start(context)","mainactivity.startforresult(activity,","mainactivity:","mainactivity::class.java)","mainli","make","makelistview(config:","mani","map","mapof.","mean","mean.","means?","mechan","member","method","method,","method.","methods,","methods.","mind","modifi","module.","more","much","multipl","mutablelist","mutablelist(","mutablelist(size,","mylinkedintlist(head,","mylinkedintlist(head:","mylinkedintlist?","mylinkedintlist?):","mylinkedintlistof(*elementstail)","mylinkedintlistof(vararg","mylinkedlist","mylinkedlist(","mylinkedlist()","mylinkedlist(1,","mylinkedlist(2,","mylinkedlist(head,","mylinkedlist.of(1,","mylinkedlist:","mylinkedlist?","mylinkedlistof(","mylinkedlistof(*elementstail)","mylinkedlistof(*ints)","mylinkedlistof(1,","mylist","mylist.of(1,","mylist?","name","name,","name.","name:","name=igor,","name=marcin,","names.","nearli","need","nevertheless,","new","newarray","newinst","newinstance,","newli","newtyp","next","next(name:","nextid","normal","notic","null","null))","nullabl","numbers:","object","object,","object.","object:","object?","objects.","objects:","obtain","of(vararg","of,","offer","on","open","oper","operator.","operator:","optim","option","otherwis","outsid","over","overrid","paramet","parameter","parameter).","parameterized,","pass","pattern","pattern).","perfect","places,","platform","point","popular","possibl","postpon","power","powerful:","practic","prefer","previou","previous","primari","prime:","println(s1)","println(s2)","privat","problem","problem,","processing.","produc","products,","program","programm","project","project.","properti","prototype.","provid","proxi","public","queen,","rare","rarely.","read","readabl","real","realli","reason","reason.","recommend","refer","referenc","reference:","reflect","reifi","reified.","rememb","repeat(size)","requestcode)","requestcode:","requir","result","return","return?","reus","revolv","s1","s2","safe","same","same,","secondari","see","see,","self","sens","separ","seriou","serv","set","setof,","short","show","similar","similarly,","simpl","simpler","singl","singleton","site","situat","size","size:","small","so,","solv","sometim","sparingli","specifi","speed","stackwalk","stackwalker.getinstance(options)","stand","standard","start","start(context:","startforresult(activity:","state","state.","static","stdlib","stdlib:","still","still,","string","string)","string,","strong","strongli","student","student(","student(id=0,","student(id=1,","student(nextid++,","studentsfactori","studentsfactory()","style","subclass","subclass?","subtyp","such","suggest","summari","superclass","support","suppos","surname)","surname:","surname=moskala)","surname=wojda)","t","t):","t,","tail","tail)","tail:","take","team","team.","technic","telescop","testing.","thank","that,","that’","them,","them.","themselv","they’r","think","those","though","time","tips.","too:","tool","tool.companion.createbigtool(","tool.createbigtool()","top","tradit","treat","tree","tree(10)","tree.companion::invok","tree.invoke(10)","tree{","two","type","type,","type.","types.","typic","unawar","under","understand","understood","univers","unlik","up","uppercas","uppercase.","us","us.","usag","usage:","use.","used.","useful:","user1,","user2,","user3]","val","valueof","values,","var","vararg","varieti","verbos","veri","via","view,","visibility.","want","way","way,","way.","well","well.","widely.","win","wisely.","without","word","work","write:","written","{","{}","}","“constructor”","…"],"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":["\"/home\"","\"/home\",","\"/users\"","\"/users\",","\"l\",","\"moskała\")","%","(()","(addroute):","(domain","(nextquoteid","(or","(setpositivebutton,",")","+",".addroute(path",".build()",".create()",".setbacon(3)",".setcheese(1)",".seticon(r.drawable.ic_dialog)",".setmessage(r.string.fire_missiles)",".setnegativebutton(r.string.cancel,",".setolives(2)",".setoncancellisten",".setpositivebutton(r.string.fire,",".settitle(r.string.dialog_title)","//","//...","0","0)","0,","1","1)","1,","1.","2,","3","3)","3,","34","34:","::showhom","::showhome)","::showhome),","::showus","::showusers)","=",">","achiev","actual","add","addroute),","advantag","age:","aggreg","alertdialog(context,","alertdialog.builder(context)","alertdialog.builder(this)","allow","alreadi","altern","although","alway","anoth","answer","api","appli","application,","application:","approach","appropri","argument","argument:","arguments,","arguments.","arguments:","around","artifici","bacon","bacon)","bacon:","badli","be","because:","befor","behavior","best","bet","better","big","bodi","both","build","build()","builder","builder(priv","builder.","builder:","built","buttondescription(r.string.cancel,","buttondescription(r.string.fire,","call","cancel","case","cases,","cases:","chang","chapter,","chees","cheese,","cheese:","chosen:","class","class.","classic","cleaner","cleaner,","clear","clear?","code","common","community,","compar","complex","concept","concept.","concurr","configur","consid","consist","construct","constructed,","constructor","constructor(","constructor(size:","constructor.","constructor:","constructors:","consuming.","context.alert(r.string.fire_missiles)","context.makedefaultdialogbuilder()","control","convenient,","copi","cost","creat","create).","created,","creation","creation.","creation:","currying,","custom","d,","data","data2.","decid","declar","default","defin","define,","definition,","depend","design","determin","develop","dialog","dialogconfig(","differ","directsto","display","doesn’t","dsl","dsl.","dsls.","each","easi","easier","easili","element","end,","especi","etc.","even","exampl","example,","examples.","except","exist","explanation,","explicitli","express","expressive.","factori","factory.","field","fill","fine,","fire","first","flexibl","flexible,","follow","forget","found.","fulli","fun","function","function,","further,","further.","gener","github?","give","go","good","hand","hand,","hard","hard.","harder","harder.","held?","here","here’","hold","icon","icon:","id","illustr","immut","implement","important.","index","initi","inject","instance,","instead","instead,","int","int)","int):","int,","interact?","intern","introduc","invest","is,","it,","it.","it.cancel()","item","it’","java","java,","java.","keep","kind","knowledg","kotlin","kotlin,","kotlin.","kotlin:","languag","language)","last","less","let’","librari","listof(","mainli","major","make","makedefaultdialogconfig()","mean","means.","mentioned,","messag","method","method,","method.","minor.","missiles!","model","modif","modifi","more","much","mutable.","myfavorit","name","name:","names:","need","negativebutton","negativebuttondescript","next","nextquoteid","notat","notation.","note","noth","null","object","object,","object’","obsolet","obviou","offer","offers.","oliv","olives,","olives:","on","oncancellisten","oncancellistener:","one:","onnext()","onstart()","option","option.","order,","order.","over","paramet","parameters,","parameters.","parameters:","partial","pass","pattern","pattern,","pattern.","perfectli","person","pizza","pizza(","pizza(\"l\",","pizza(size,","pizza.builder(\"l\")","pizza.builder(\"l\").setolives(3).build()","popular","posit","positivebutton(r.string.fire)","positivebuttondescript","possibl","power","practic","prefer","presenter3","primari","privat","problem","problem,","projects.","properti","properties.","provid","question","quit","quot","quotationpresent","quotationpresenter(","quotationrepositori","quotationview,","quotes.","r.drawable.ic_dialog,","r.string.dialog_title,","r.string.fire_missiles,","rare","read","readability.","realli","reason","receiv","recommend","relat","rememb","repo.getquote(nextquoteid)","repo.quotesnumb","repo:","repres","requir","return","rout","route(\"/home\",","route(\"/users\",","router","router(","router.builder()","safe","satisfi","saver","say,","scan","see","see,","seen","sens","sequenc","set","setbacon(value:","setcheese(value:","setnegativebutton,","setolives(value:","shine.","short,","shorter","shorter,","signific","similar","simpl","simpler","singl","size","size:","solve,","sometim","special","specif","specifi","spread","start","state","state,","step","string","string)","string):","string,","student(","subset","such","summari","support","sure,","surname:","surpass","take","talk","telescop","tend","that,","that.","them.","therefor","think","this(size,","this.bacon","this.chees","this.ol","this.siz","those","though","thread","time","titl","title:","to:","treat","true","two","type","unclear,","understand","unit)?","up","us","usag","usages,","user","user(\"marcin\",","user(var","usual","val","valu","values.","var","vast","veri","view.showquote(quote)","view:","villagepizza","want","want,","want.","well,","we’v","whole","won’t","written","{","}","})","}),","—","—thi"],"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":["\"\"","\"enter","\"hello\".length","\"length","\"marcin\"","\"moskała\"","\"startswith","\"world\"","$i\"","${name.text}!\")","(()","()","(an","(dsl).","(elem","(i","(init","(int)","(int,","(predicate(elem))","(t)","(unlik","):","+","+\"main","+\"some","+\"thi","+=","...","/*...*/","//","//...","1..2)","1.myplus(2)","15:","2)","3","35","35:","5",":","::plu","=",">",">()",">int",">unit",">unit)",">unit):","`java","a(\"https://kotlinlang.org\")","a,","a:","abov","accept","addclass(heading)","addition","allow","alreadi","although","amount","analog","android","anko","anko,","anonym","anoth","answer","api","api(\"junit:junit:4.12\")","appli","applications.","are:","argument","argument.","around.","arraylistof()","atarget.blank","b","b)","b:","base","basic","becom","befor","before,","begin","below).","better.","block","bodi","boilerpl","boolean","both","briefli","build","builder","builder.","built","button(\"say","call","call.respond(newsdata)","case","case):","chang","class","classic","clear","clearly.","code","code4and","column","complex","complexity,","complic","concise:","configur","configuration:","configurations.","confus","consid","constructor","contain","content\"","correctli","cost","creat","createtable():","creation","creation.","data","data.","decid","defin","define,","define.","defined.","defined:","definit","definition.","definitions,","depend","desktop","develop","developers.","discover.","div","domain","dot:","dsl","dsl,","dsl.","dsl:","dslmarker","dsls,","dsls.","easi","easier","edittext()","element","elimin","even","everyth","exactly.","exampl","example,","explain","explicitly.","express","express:","expression,","extens","featur","few","files.","filter","fine,","first","follow","fulli","fun","fun(a,","fun(a:","function","function,","function.","function:","functions,","functions.","functions?","get(\"propositions\")","give","good","gradl","groovy).","hand","hard","have?","hbox","hello\")","helloworld","help.","here","hide","hierarch","hierarchies,","hierarchies.","hint","hold","html","html,","html.","html:","huge","implement","implementation(\"junit:junit:4.12\")","import","improv","inferred.","inform","information.","init.invoke(tablebuilder)","initfunct","initi","inlin","insid","instanc","instance,","instead.","int","int)","int,","int.","int.(int)","int.(other:","int.myplus(other:","intent","invok","it?","item","iterable.filter(","java","java.srcdir(\"src/core/java\")","javafx:","javaversion.version_11","keyword","kind","know","kotlin","ktor,","label(\"hello","lambda","languag","language.","later","let’","level","librari","library:","library`","like:","list","list.add(elem)","listof()","look","main","maintenance.","make","mention","method","method.","more","much","myplu","myplus(1,","myplus.invoke(1,","myplus:","mytest","name","name\"","name.","name:","need","need.","never","new","newsdata","newsusecase.getacceptednews()","newsusecase.getpropositions()","non","normal","not.","notat","noth","notic","notion","now","object","object,","objects.","object’","offer","offers,","onc","onclick","oper","other,","overkil","overrid","paramet","part","performance.","platform","plu","plugin","plus(a:","plus1:","plus2:","plus3:","plus4","plus5","popular","possibl","predic","predicate:","prefer","prefix\"","produc","project","projects.","prompttext","properti","properties:","react","real","realli","receiv","receiver,","receiver.","refer","referenc","repeat","repres","requiresecret()","resolutionstrategy.failonversionconflict()","return","review","root","route(\"news\")","routing.api()","row","safe","same","scope","see","separ","set","shorten","shorter","shouldb","shown","similar","similarli","similarly,","simpl","simpler","site\"","size","sourcecompat","sourceset","special","specif","specifi","standard","start","startwith(\"wor\")","statement:","step","string","string\"","string.","string.unaryplus()","stringspec({","structur","structure,","structures,","structures.","such","summari","surnam","surname:","t","t.()","t.apply(block:","tabl","table(init:","table.","table:","tablebuild","tablebuilder()","tablebuilder().apply(init)","tablebuilder.()","take","target","targetcompat","task","td","td(init:","tdbuilder","tdbuilder().apply(init)","tdbuilder.()","tdbuilder:","test","test:","testimplementation(\"junit:junit:4.12\")","testlogging.showexcept","text","textfield","that,","that?","them.","themselves.","therefor","think","this)","this.block()","those","though","to.","toast(\"hello,","togeth","top","tornadofx","tr","tr(init:","tr.","track","trait","trbuilder","trbuilder().apply(init)","trbuilder.()","true","trust","two","type","type,","types,","types:","unari","understand","unit)","unit):","unit.","us","usag","used.","user","user().appli","val","value.","var","veri","verticallayout","view","view()","want,","way","way:","ways:","well","well.","well?","we’ll","whole","without","work","world\")","yourself.","{","}","})"],"Part 2 Code design/Chapter 6 Class design/Introduction.html":["(oop)","6:","abstract","alreadi","answer","architectur","book","break","c.","caus","chapter","class","clean","cleaner.","code","compareto?","contract","data","design","design,","design.","equals,","erich","expect","extens","follow","fulfil","function","gamma,","great","hashcod","helm.","help","here.","import","inheritance?","instead","instead,","interfac","introduct","john","johnson,","kind","kotlin","kotlin,","mainli","make","mani","martin","members?","method?","more","much","object","oop","orient","paradigm","paradigm.","pattern","popular","problems,","program","question","ralph","requir","richard","robert","safer","seriou","singl","space","structur","such","system","talk","them.","topic","type","us","used?","veri","vlissides,","well."],"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":["\"b\",","\"c\"))","(a","(contract)","(have","(i","(liskov","(nine,","(showalert)","(thi","(we",")","*/","+=","/*","/*...*/","//","0","3","36","36:","6",":","=","a()","abstract","accumul","action:","activ","ad","add","add(element:","addall(elements:","addall.","addallfunction:","addit","adjust","advantag","affect","alert","allow","also,","alternative,","alternative:","although","alway","android,","anim","animal.","anoth","anymore.","applic","approach","awar","a”","b()","bad","bar","bark","bark()","basexxx","befor","behavior","behavior.","behavior:","better","between","bloch.","block","book","boolean","boolean)","both","break","calcul","calculate()","call","can’t","case","case).","case,","cases,","caution,","cautiou","chang","changes,","characteristics.","child:","choice:","choos","citizen.","class","class,","class.","clear()","clear,","code","collection)","collection):","come","comfort","common","compilation.","complex","compos","compose,","composit","composition,","composition.","compound","concern,","confus","consist","constraining.","constructor:","contains(element:","containsall(elements:","contract","correctly:","counter","counterlist","counterlist.addall(listof(\"a\",","counterset","counterset(","counterset()","counterset:","creat","creator","current","custom","danger","dangerous.","deal","decid","deep","default","default.","defin","definit","degree,","deleg","demand","depend","design","develop","differ","disadvantage.","display","doesn’t","dog","dog()","dog(),","don’t","doubl","downsid","dure","each","easi","easier","edg","effect","element","elements.s","elementsad","elementsadded++","elementsadded:","encapsul","encapsulation.","encourag","error","error(\"oper","even","everyth","everything,","exampl","example,","example:","examples:","expect","experience,","explicit","explicit,","explicit.","explicitly.","extend","extend,","extension).","extern","extract","fact","false)","feature,","few","final","final.","finished:","finishedalert","finishedalert()","finishedalert.show()","first","flexibility.","flexibl","flexible.","follow","forc","forward","framework","from.","fun","function","functionalities.","functionality.","gener","general,","get()","give","good","good,","great","hand,","happen","hard","harder,","hashset","hashset()","hashset.addal","hashset:","help","here","hide","hideprogress()","hierarchi","hold","hood","however,","huge","imag","imageload","imageloader:","implement","implementation,","implementations.","implemented,","import","includ","increment","inform","inherit","inherit,","inheritance).","inheritance,","inheritance.","inheritance:","innerload()","innerset","innerset.add(element)","innerset.addall(elements)","innerset.clear()","innerset.contains(element)","innerset.containsall(elements)","innerset.isempty()","innerset.iterator()","innerset.remove(element)","innerset.removeall(elements)","innerset.retainall(elements)","innerset.s","innerset:","inside.","inspir","instance,","instead","instead,","instead.","int","interfac","interface,","interfaces,","interfaces.","internetloader()","internetloader(showalert","internetloader(v","introduc","ios,","isempty():","it)","it,","it.","item","iterator()","java","javafx,","joshua","jump","keep","key","keyword).","kind","know","kotlin","kotlin.","labrador:","larg","lead","less","let’","level","librari","lifetime.","lighter","limit","linguistically,","liskov","load","load()","loaderwithprogress","loaderwithprogress()","loadfrominterner()","logic.","look","lose","lot","make","mani","many.","mean","mechan","method","method)?","method,","method?","methods,","methods.","mind,","modifi","modify.","more","much","multipl","mutableset","mutablesetof()","naiv","necessarili","need","need.","note","notic","now","number","object","object,","object.","objects,","observ","occur","of:","on","one?","oop","open","open:","optim","orient","outsid","over","overrid","overridden","packag","parameter","parent","parent()","partial","parts.","pass","pattern","pattern.","piec","place","polymorph","power","prefer","present","prevent","principl","principle).","print(counterlist.elementsadded)","privat","problem","problem:","problem?","problemat","profil","profileload","profileloader:","progress","progress()","progress.hideprogress()","progress.showprogress()","projects.","properti","react.","react.compon","read","reader","realli","reason","receiv","refer","relationship","relationship.","rememb","remov","remove(element:","removeall(elements:","repres","requir","respect","restrict","retainall(elements:","return","reus","reuse,","reuse.","robot","robot()","robotdog","rule","safer","same","scenario.","secur","segreg","seriou","set","show","showalert:","shown","showprogress()","side,","sign","similar","simpl","singl","size:","sniff()","sniff:","sniff?","solut","solution.","solv","special","specifi","start","still","strong","subclass","subclasses,","subclasses.","subclasses:","substitut","such","suitable.","summari","super.add(element)","super.addall(elements)","superclass","superclass,","superclass.","superclass:","support","supported\")","sword.","system","t)","t):","take","test","thankfully,","that,","that?","them,","then?","therefor","thing","think","third","this,","those","though","throw","thumb:","time","togeth","tool","top","treat","true","true)","twice","two","type","types.","uiviewcontrol","under","understand","unexpect","unit","unneed","update.","us","usages.","used.","useless;","val","var","veri","view","violat","want","way","way.","well","well.","whole","wise","without","work","works.","world.","{","{}","}","“be”","“i"],"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":["37","bundl","data","item","modifi","repres","us"],"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":["38","action","function","instead","interfac","item","oper","pass","type","us"],"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html":["39","class","hierarchi","item","prefer","tag"],"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html":["40","contract","equal","item","respect"],"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html":["41","code","contract","hash","item","respect"],"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html":["42","compar","contract","item","respect"],"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":["43","api","consid","essenti","extens","extract","item","non","part"],"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html":["44","avoid","extens","item","member"],"Part 3 Efficiency/Chapter 7 Make it cheap/Introduction.html":["introduct"],"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html":["45","avoid","creation","item","object","unnecessari"],"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":["46","function","inlin","item","modifi","paramet","type","us"],"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html":["47","class","consid","inlin","item","us"],"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html":["48","elimin","item","object","obsolet","refer"],"Part 3 Efficiency/Chapter 8 Efficient collection processing/Introduction.html":["introduct"],"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":["49","big","collect","item","more","on","prefer","process","sequenc","step"],"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html":["50","item","limit","number","oper"],"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":["51","array","consid","critic","item","perform","primit","process"],"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html":["52","collect","consid","item","mutabl","us"]},"length":61},"tokenStore":{"root":{"0":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}},".":{"0":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}},"1":{"0":{"0":{"0":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":2},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"1":{"2":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}},"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":2.5},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"2":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":1.4285714285714284},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"3":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":1.6666666666666665},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}},"4":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":1.6666666666666665},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}},"5":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":1.6666666666666665},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"6":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":1.6666666666666665},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"7":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":2},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"8":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":2},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}},"9":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":2.5},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":2.50293542074364},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},".":{"0":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"1":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},".":{"1":{"0":{"0":{"0":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144}}}},"docs":{}},"docs":{}},"docs":{}},"2":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"docs":{}},"m":{"docs":{},"y":{"docs":{},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"(":{"2":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"docs":{}}}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}}},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.010854816824966078}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665}}},"_":{"8":{"0":{"0":{"docs":{},"_":{"2":{"7":{"5":{"docs":{},"_":{"2":{"2":{"7":{"3":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"}":{"docs":{},";":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"2":{"0":{"0":{"8":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"docs":{}},"1":{"6":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"docs":{}},"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":2},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},"1":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":1.1111111111111112},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"2":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":1.4285714285714284},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}},"3":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":1.6666666666666665},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}},"4":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":1.6666666666666665}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"5":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1111111111111112}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},"6":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.1111111111111112},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"7":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":1.25}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"8":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":2}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"9":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":1.6666666666666665}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}},"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":2.0014025245441793},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419}}},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.010854816824966078}}}},"3":{"0":{"5":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":2}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},"1":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":2}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"2":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":2}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}},"3":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":1.4285714285714284}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"4":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":1.25}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"5":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":1.25}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"6":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":1.6666666666666665}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"7":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html","tf":1.25}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"8":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1}}},"9":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html","tf":1.4285714285714284}}},"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":1.4285714285714284},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.012145748987854251},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"4":{"0":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html","tf":2}}},"1":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html","tf":1.6666666666666665}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"2":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html","tf":2}}},"3":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"4":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html","tf":2}}},"5":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html","tf":1.6666666666666665}}},"6":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","tf":1.1111111111111112}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"7":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html","tf":1.6666666666666665}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"8":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html","tf":1.6666666666666665}}},"9":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}},"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":2},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"=":{"docs":{},"/":{"docs":{},"[":{"docs":{},":":{"docs":{},"+":{"docs":{},"/":{"docs":{},"(":{"docs":{},",":{"docs":{},"/":{"docs":{},",":{"docs":{},"\"":{"0":{"docs":{},"/":{"docs":{},"~":{"docs":{},"i":{"docs":{},":":{"1":{"docs":{},")":{"docs":{},"|":{"docs":{},".":{"docs":{},"]":{"docs":{},")":{"docs":{},"*":{"docs":{},".":{"1":{"docs":{},",":{"docs":{},":":{"docs":{},"]":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}},"docs":{}}}}}}}}},"docs":{}}}}}},"docs":{}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"5":{"0":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html","tf":2}}},"1":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","tf":1.25}}},"2":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html","tf":1.6666666666666665}}},"3":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"5":{"4":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}},"docs":{}},"9":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":1.6666666666666665},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}},"6":{"1":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"7":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":1.4285714285714284},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}},"!":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},".":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}},")":{"docs":{},".":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}}}}}},"]":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"7":{"1":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"2":{"0":{"0":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126}}},"docs":{}},"docs":{}},"3":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"9":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":1.1111111111111112},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},"8":{"3":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"9":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":2},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"9":{"1":{"1":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"docs":{}},"7":{"docs":{},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"9":{"7":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}},"docs":{}},"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":2},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}},"docs":{},"[":{"1":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"2":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569}}}},"docs":{"./":{"ref":"./","tf":0.038461538461538464}},"x":{"docs":{},"]":{"docs":{"./":{"ref":"./","tf":0.08974358974358974}}}},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"f":{"docs":{},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"o":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}}},"z":{"docs":{},"z":{"docs":{},"z":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"=":{"docs":{},"f":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"x":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"2":{"docs":{},"]":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"=":{"docs":{},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"1":{"docs":{},"]":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"docs":{},"]":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"0":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{}}}}}},"]":{"docs":{"./":{"ref":"./","tf":0.038461538461538464}}},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.008547008547008548},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.044563279857397504},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.1348578129580769},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":1.2681050090525046},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":2.003610108303249},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035}},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}}},"!":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"”":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"u":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"o":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}},"u":{"docs":{},"t":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"c":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"v":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"c":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464}}}}}}},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"r":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175}}}}}}},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"h":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01702127659574468},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":1.2506035003017502},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},"o":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"l":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":2.018487394957983},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":1.4346320346320345},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}},"i":{"docs":{},"a":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"l":{"3":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}}},"s":{"docs":{},"o":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"o":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.0070126227208976155},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":2.025594149908592},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":1.7291666666666665},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"(":{"docs":{},"\"":{"docs":{},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"docs":{},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"4":{"docs":{},".":{"1":{"2":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.020833333333333332},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.01016260162601626},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.02262443438914027},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"g":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":1.6723377441713925},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":2.0349013657056148},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0034266133637921186},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":1.2611396743787489},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.008710801393728223}},"s":{"9":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},".":{"4":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"’":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","tf":1.25}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"3":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"3":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"docs":{}}}}}}}}}}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},".":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"v":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.008547008547008548},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00477326968973747},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":1.6789366053169732},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":1.6782273603082851},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html","tf":2},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html","tf":1.6666666666666665}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"z":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}}},"a":{"docs":{},"a":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497}},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.017341040462427744}}}}}}}}}}}},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}}}}}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"a":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.01397712833545108},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},"s":{"docs":{},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}},"y":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}},"n":{"docs":{},"y":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.006097560975609756}}}}}},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}}}}},"a":{"docs":{},"l":{"docs":{},"y":{"docs":{},"z":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"s":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"o":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.011312217194570135},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}}}}},"x":{"docs":{},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"g":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}},"i":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.024896265560165973},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"i":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}},"x":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"k":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"s":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"u":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0063532401524777635},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.008506616257088847},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.011137629276054098}},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"(":{"1":{"0":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045}}}},"2":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"3":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"5":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"docs":{}}}}}}}}}},"m":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.006596306068601583}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"o":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}}}}}},"y":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"b":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"y":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}},"e":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}},"o":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"x":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"\"":{"docs":{},"h":{"docs":{},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"k":{"docs":{},"o":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}}}}}}}}}}}}},"”":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}},"b":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.006045949214026602},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.005226480836236934}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.012195121951219513},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":1.6683997689196994},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.008191126279863481}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1201608848667672},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"a":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},"o":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.006364359586316627},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.003780718336483932},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"d":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"n":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"i":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"l":{"docs":{},"l":{"docs":{},"]":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"d":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"_":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"i":{"docs":{},"d":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html","tf":1.25}},"e":{"docs":{},"?":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"c":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"s":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}}}}}}}},"z":{"docs":{},"z":{"1":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"docs":{}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.021422450728363324},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809}},".":{"docs":{},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}}}}},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"(":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}},"{":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"\"":{"docs":{},"s":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"x":{"docs":{},"x":{"docs":{},"x":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"n":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}}}}}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.01583710407239819}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}}}}}},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665}}}}}},"r":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"k":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0053816046966731895},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}}}},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}},"o":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.018404907975460124},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.008873720136518772}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}},"d":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}}}}}},"w":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}}}}},"x":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.01058574453069866}},"(":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"\"":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"4":{"2":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"docs":{}},"docs":{},"\"":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"a":{"docs":{},"n":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}},"n":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"m":{"docs":{},"b":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.007561436672967864},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"h":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"r":{"docs":{},"a":{"docs":{},"u":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614}}}},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"k":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},"w":{"docs":{},"c":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}}},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"i":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"y":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.00684931506849315},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01276595744680851},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.03130434782608696},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.00995732574679943},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":1.2711225105612554},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.02376599634369287},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.034722222222222224},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.01584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"e":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}}}}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"”":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},";":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"e":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},"c":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}}}},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.017094017094017096},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.01675977653631285},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01276595744680851},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.008912655971479501},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.04918032786885246},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.02}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}},"s":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.010610079575596816}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}}}}},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}}}},"e":{"docs":{},"a":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.002136752136752137}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.03213610586011342},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.018292682926829267},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"(":{"docs":{},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},"s":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.005141388174807198}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.005998286203941731}}}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"o":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.008547008547008548},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.008317025440313111},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.010165184243964422},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.015789473684210527},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00954653937947494},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.013568521031207599},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.034482758620689655},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.046242774566473986},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.019760056457304165},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.018708509354254676},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.025356576862123614},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.010718789407313998},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.01444043321299639},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.013706453455168474},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.009425878320479864},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0078397212543554},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.06},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.025938566552901023},"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html","tf":2.8571428571428568},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html","tf":1.6666666666666665}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"i":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"c":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}}},"/":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":1.6804597701149424},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":2.029940119760479},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712}}}}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137}}},"o":{"docs":{},"d":{"docs":{},"e":{"2":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"4":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"6":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"docs":{"./":{"ref":"./","tf":0.010683760683760684},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.027932960893854747},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":2.0344827586206895},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01276595744680851},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":1.2548280024140013},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802},"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html","tf":1.6666666666666665}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.009295499021526418},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html","tf":1.6666666666666665}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}}}}}}},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"b":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"y":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.008547008547008548},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0052173913043478265},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":2.0100840336134453},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":1.1182234866445393},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":1.4316017316017313},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1405228758169934},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.01008827238335435}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"s":{"1":{"2":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"docs":{}},"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"u":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html","tf":2}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}}},"n":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.018275271273557967}}}}}},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}}},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.006045949214026602},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.006596306068601583},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":1.2560975609756098},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"o":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.005460750853242321}},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":1.679635949943117}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"r":{"docs":{},"e":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.006596306068601583},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.015151515151515152},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.023504273504273504},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":1.6680235187697874},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":2.0045523520485586},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":1.6680780992707596},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":1.6874999999999998},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":1.430855837480623},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":1.2517137960582692},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":1.2526132404181185},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html","tf":1.6666666666666665},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","tf":1.25},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html","tf":1.6666666666666665}}},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":1.4305957200694042},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"o":{"docs":{},"r":{"1":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":1.4445622909357916},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":1.2688517566409598},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.003997715591090805}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},"(":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.00909090909090909},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.015151515151515152},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.003621001810500905}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}},"c":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}}}},"u":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.010683760683760684},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":2.0138713745271124},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":2.0288808664259927},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.02},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703},"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html","tf":2},"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html","tf":1.6666666666666665},"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html","tf":2}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}}}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.006351446718419196}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"!":{"docs":{},"!":{"docs":{},".":{"docs":{},"d":{"docs":{},"o":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}}}}}}}}}}}}}}}},".":{"docs":{},"d":{"docs":{},"o":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"_":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"s":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":2.026525198938992},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613}}},"”":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"r":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}}}}},"c":{"docs":{},"i":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.01675977653631285}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.01675977653631285}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.00909090909090909},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}},"r":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"b":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"(":{"docs":{},"e":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"y":{"docs":{},"’":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}}},"p":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.004403131115459882},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},".":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.003780718336483932},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00477326968973747},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.012195121951219513},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"(":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.014970059880239521}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}},"r":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}},"p":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.011997177134791814}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}}}}}}}}},"g":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266}},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"m":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.009137635636778984},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.006968641114982578},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.003621001810500905},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.003997715591090805},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":1.2517421602787457},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html","tf":1.6666666666666665}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"(":{"docs":{},"\"":{"docs":{},"$":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{},"$":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0067842605156037995}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.020833333333333332},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","tf":1.25}}},"q":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":1.4419047619047618},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"y":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.015525758645024701}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.007057163020465773}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}}}}},"+":{"docs":{},"+":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608}}}}}}},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.005568814638027049},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.004568817818389492},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"s":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}},"s":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},"(":{"docs":{},"a":{"docs":{},"f":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"b":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}},"{":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.005568814638027049},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.01016260162601626},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}},"p":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"e":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"u":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.02074688796680498},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0142602495543672},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0069356872635561164}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992}}}}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}}}},"’":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"m":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"r":{"docs":{},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"s":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}},"#":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},"t":{"docs":{},"r":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"2":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.005870841487279843},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html","tf":2.5}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"(":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},".":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}},"y":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"r":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.0070126227208976155},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.008665511265164644},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.008403361344537815},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.008912655971479501},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":2.008827238335435},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.005139920045688178},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":1.2656794425087108},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.012853470437017995},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"_":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}}}},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"_":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00477326968973747},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":1.1281808123913388},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.005460750853242321}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}},"s":{"docs":{},".":{"docs":{},"o":{"docs":{},"b":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532}}}}}}}}}},"a":{"docs":{},"y":{"docs":{},"(":{"1":{"0":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}},"docs":{}}}}},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.008547008547008548},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0223463687150838},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":2.5012091898428053},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0052173913043478265},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.02},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.005460750853242321}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.008827238335435058}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0037831021437578815}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},"]":{"docs":{},"[":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"3":{"docs":{},"]":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"docs":{}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"k":{"docs":{},"t":{"docs":{},"o":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"p":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"c":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"u":{"docs":{},"p":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.041666666666666664},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.016260162601626018},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01276595744680851},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.011304347826086957},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.011764705882352941},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.011312217194570135},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.003997715591090805},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"s":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}}}}},"i":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"b":{"docs":{},"u":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614}}}}},"e":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004828002414001207},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0037831021437578815},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}}}}},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}},"k":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}},"i":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0053816046966731895},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.008464328899637243},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.01565217391304348},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.007112375533428165},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1292106586224233},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.03278688524590164},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.006282124500285551},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"t":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}},"a":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.007712082262210797}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"u":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}},"o":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}},"d":{"docs":{},"v":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"g":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.011466505733252867},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},")":{"docs":{},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"i":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}}}}}}},"d":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}},"o":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":2.010718789407314},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}},"e":{"docs":{},"s":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}}}}},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}},"w":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"g":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.006351446718419196},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"z":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"k":{"docs":{},"k":{"docs":{},"a":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"s":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.008141112618724558},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":1.269163763066202}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"o":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},"v":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045}}},"r":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"n":{"docs":{},"k":{"docs":{},"b":{"docs":{},"e":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.003621001810500905},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}},")":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},")":{"docs":{},"!":{"docs":{},"!":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"]":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},"b":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132}}}},"e":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},"c":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.008097165991902834},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.1137496335385517},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"s":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.014263074484944533},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},"y":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"r":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"t":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0053816046966731895},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.009817671809256662},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.013157894736842105},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.012195121951219513},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.012797074954296161},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":2.025356576862124},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.01008827238335435},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}},"a":{"docs":{},"s":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}}}},"`":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"a":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"d":{"docs":{},"e":{"docs":{},"d":{"docs":{},"+":{"docs":{},"+":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}}}}}}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"c":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"i":{"docs":{},"c":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":1.4336540206934105},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html","tf":1.6666666666666665}}}}}},"v":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.003780718336483932},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}},"s":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html","tf":2}},"s":{"docs":{},"(":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":1.4485714285714284},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.010526315789473684},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0077628793225123505},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"(":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}}},"g":{"docs":{},"o":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112}}}}}},"a":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}},"i":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":1.6865154379332072},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00477326968973747},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0056457304163726185},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.005674653215636823},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.03},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.006045949214026602},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},".":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"n":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}}},"n":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.018995929443690638},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"l":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":1.6720940750791495},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":2.004149377593361},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178}},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"n":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.016042780748663103},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.008710801393728223}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.01680672268907563},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0034266133637921186},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.006097560975609756},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112},"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html","tf":2}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"r":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":1.6805555555555554},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01276595744680851},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.009565217391304347},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":1.126758337284653},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1133735545500252},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.009234828496042216},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.00724200362100181},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}},"e":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.008534850640113799},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0037831021437578815},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.004568817818389492},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.02},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.02894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},"u":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"i":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}},"c":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}},"d":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"u":{"docs":{},".":{"docs":{},"u":{"docs":{},"m":{"docs":{},"d":{"docs":{},".":{"docs":{},"c":{"docs":{},"s":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"b":{"docs":{},"u":{"docs":{},"g":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}},"t":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}},"h":{"docs":{},"u":{"docs":{},"s":{"docs":{},"i":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949}}}}},"u":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"j":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"v":{"docs":{},"i":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"e":{"docs":{},"m":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"r":{"docs":{},"g":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"j":{"docs":{},"o":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"t":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}},"r":{"docs":{},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0037831021437578815},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}}}}}},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"p":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.004725897920604915}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.004725897920604915}}}}}},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},":":{"docs":{},":":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"i":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"t":{"docs":{},"c":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"y":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"i":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":1.4588398466182588},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}}},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"i":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}}}},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"u":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":1.12953216374269},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004940014114326041}},"e":{"docs":{},"(":{"docs":{},"j":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"l":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"e":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}},"v":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},"k":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.006853226727584237}}}}},"u":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.005870841487279843},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.008894536213468869},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.01606805293005671},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.014970059880239521},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.012145748987854251},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.023066485753052916},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.007112375533428165},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.01818181818181818},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.023121387283236993},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.012702893436838392},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.009234828496042216},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.006638503319251659},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.01197982345523329},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.021660649819494584},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.008566533409480296},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.006855184233076264},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.013937282229965157},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.027986348122866895}},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.01282051282051282},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.024574669187145556},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.006045949214026602},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":1.4650086755349911},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0067842605156037995},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.03490136570561457},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.02127659574468085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.025210084033613446},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.00909090909090909},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.009174311926605505},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.130900029316916},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.01388050694025347},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.01008827238335435},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":1.4634086644366482},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.03484320557491289},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.005460750853242321},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","tf":2.2222222222222223}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.006968641114982578}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}},"”":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}},"’":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}},"(":{"docs":{},"a":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"l":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}},"e":{"2":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}},"r":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"e":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"d":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0028555111364934323},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}},"docs":{}}}},"r":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.03468208092485549}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497}}},"v":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},"b":{"docs":{},"i":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497}}}}}}}}}},"s":{"docs":{},"p":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}},"w":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}}},"c":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.011976047904191617},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{},".":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809}}}}}}}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"/":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"z":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.008415147265077139},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"b":{"docs":{},"u":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},".":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"e":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}}},"z":{"docs":{},"z":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"b":{"docs":{},"u":{"docs":{},"z":{"docs":{},"z":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.010398613518197574},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"?":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"1":{"2":{"6":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}}},"docs":{}},"docs":{}},"docs":{}}},"x":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"b":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"(":{"0":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"1":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"2":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"3":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"4":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"docs":{}},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045}}}}}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"l":{"docs":{},"e":{"docs":{},"x":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"a":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}},"a":{"docs":{},"w":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},"d":{"docs":{},"o":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0037831021437578815},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"’":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}},"o":{"docs":{},"m":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}}}}}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"…":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"z":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"g":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},".":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}},"m":{"docs":{},"e":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.011312217194570135},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003913894324853229},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.008464328899637243},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":1.4558441558441557},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":1.6737238296871322},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.010554089709762533},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.005674653215636823},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"2":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}},"docs":{}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"l":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.012131715771230503},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},"\"":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.012131715771230503},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},"y":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.007112375533428165}},"e":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"l":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"t":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"x":{"docs":{},"t":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}}}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}},"(":{"docs":{},")":{"docs":{},"?":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"{":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862}}}}}}}}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918}}}}},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"o":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061}}}}}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"l":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004828002414001207},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"u":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"o":{"docs":{},"v":{"docs":{},"y":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"d":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}},"a":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}},"r":{"docs":{},"b":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"a":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"v":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"m":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}},"m":{"docs":{},"a":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"3":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"docs":{}}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.02368421052631579},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":2.012728719172633},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}},"s":{"docs":{},"h":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html","tf":1.6666666666666665}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"k":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}},"v":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"r":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"c":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},"i":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741},"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html","tf":1.4285714285714284}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}}}}},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"g":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.011873350923482849},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"l":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"o":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"w":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}},"p":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}}}},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}}}},"l":{"docs":{},"o":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.008097165991902834}}}}}}}}}}}},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"d":{"docs":{},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"m":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"”":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},"’":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}}},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}},"l":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}}},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"u":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}},"u":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408}}}}}}}}},"g":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"n":{"docs":{},"d":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"t":{"docs":{},"m":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289}},"d":{"docs":{},"s":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"t":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"(":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{},"w":{"docs":{},"i":{"docs":{},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},".":{"docs":{},"o":{"docs":{},"r":{"docs":{},"g":{"docs":{},"/":{"docs":{},"w":{"docs":{},"i":{"docs":{},"k":{"docs":{},"i":{"docs":{},"/":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"(":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.011976047904191617},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.016928657799274487},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.02127659574468085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.011764705882352941},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":1.4316017316017313},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.011312217194570135},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004828002414001207},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.005674653215636823},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0057110222729868645},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0061433447098976105}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"(":{"docs":{},"\"":{"docs":{},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"docs":{},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"4":{"docs":{},".":{"1":{"2":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.020833333333333332},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.027586206896551724},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0052173913043478265},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.03},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234}}}}}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.011252446183953033},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"a":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}},"n":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":2.020746887966805},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.020689655172413793},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"x":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.012448132780082987},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.020689655172413793},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":1.6816837315130828}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}}},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","tf":1.1111111111111112},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html","tf":1.6666666666666665}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.004725897920604915},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":1.430855837480623},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.02},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.00909090909090909},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.005139920045688178},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.003621001810500905},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0028555111364934323},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.00792393026941363},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.005226480836236934}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.014970059880239521},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.011139674378748929},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.005226480836236934},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.005431502715751358},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.004568817818389492},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.00477815699658703},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"–":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.00792393026941363},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}}},"v":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"8":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"r":{"docs":{},"u":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"j":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"g":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"[":{"docs":{},"]":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0034266133637921186},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"_":{"docs":{},"i":{"docs":{},"d":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"(":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"s":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"t":{"docs":{"./":{"ref":"./","tf":10.017094017094017},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":10},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":10.005586592178771},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":10},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":10},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":10},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":10},"Part 3 Efficiency/Chapter 7 Make it cheap/Introduction.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Introduction.html","tf":10},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Introduction.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Introduction.html","tf":10}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"_":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"(":{"docs":{},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0078397212543554}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0028555111364934323},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}}},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}}},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"l":{"docs":{},"u":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}},"v":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0028555111364934323},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"i":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"t":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.005568814638027049},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.009508716323296355},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"b":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613}}}}},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.03333333333333333},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.010526315789473684},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}}}}}},"/":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.005460750853242321}}}}}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"e":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}},"t":{"1":{"0":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"docs":{}},"docs":{},"e":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.1111111111111111},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":2.50146771037182},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":2},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":1.4285714285714284},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":2},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":1.6676118462507874},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":1.4419047619047618},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":1.1137426900584795},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":2.0031821797931584},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":2.0089820359281436},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":2.002032520325203},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":2.5024183796856105},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":1.4305957200694042},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":1.6728016359918199},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":1.6873563218390804},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":1.6680235187697874},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":1.6701328711727323},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":2.0045523520485586},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":2.0026525198938994},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":2.5017391304347827},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":2.0016806722689076},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":1.1125335862177967},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":1.4346320346320345},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":1.6724470134874758},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":1.6680780992707596},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1133735545500252},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.1124303723248314},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":1.2518105009052505},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":2.0018281535648996},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":1.673611111111111},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":2.0015847860538827},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":2.001891551071879},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":2.003610108303249},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":1.430855837480623},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":1.2508568980291346},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":1.2517421602787457},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":1.6673492605233218},"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html","tf":1.25},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1},"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html","tf":1.4285714285714284},"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html","tf":2},"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html","tf":1.6666666666666665},"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html","tf":2},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112},"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html","tf":2},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html","tf":1.6666666666666665},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","tf":1.1111111111111112},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html","tf":1.6666666666666665},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html","tf":1.6666666666666665},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html","tf":2},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","tf":1.25},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html","tf":1.6666666666666665}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{},"(":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}},"(":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.014970059880239521}}}}}}}},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}}}}}}},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},"!":{"docs":{},"!":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"”":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.00724200362100181},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665}},"e":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.009673518742442563},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"docs":{},"+":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},"s":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}},"o":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}},"f":{"docs":{},"(":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}}}},"!":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"b":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"/":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"x":{"docs":{},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"g":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"’":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.008912655971479501},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":2.5130434782608697},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"”":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},"o":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.052083333333333336},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.006360078277886497},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.015247776365946633},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.003780718336483932},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.027932960893854747},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.010882708585247884},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.015915119363395226},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.008534850640113799},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0077628793225123505},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.01809954751131222},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.03278688524590164},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.010850942318675044},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.006968641114982578},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.02},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}},"/":{"docs":{},"j":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},"v":{"docs":{},"m":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},")":{"docs":{},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}}},"y":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"b":{"docs":{},"o":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}}}},"i":{"docs":{},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.012195121951219513},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0052173913043478265},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899}}},"y":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":1.116374269005848},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"n":{"docs":{},"g":{"docs":{},"u":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.013192612137203167},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"’":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00954653937947494},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.005226480836236934}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}},"z":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.00995732574679943},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"y":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"r":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"a":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},"(":{"docs":{},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"d":{"docs":{},"o":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.021108179419525065}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266}}}}}}},"w":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.1414541190266785},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.011422044545973729},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.008464328899637243},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}}},"a":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"r":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.008403361344537815},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}},"f":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}}},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},"s":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452}}}},"f":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"docs":{}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},";":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"g":{"docs":{},"a":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":2.505381604696673},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html","tf":2}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},"f":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"c":{"docs":{},"y":{"docs":{},"c":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"=":{"docs":{},":":{"docs":{},"[":{"docs":{},":":{"docs":{},"+":{"docs":{},"/":{"docs":{},"(":{"3":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}},"docs":{}}}}}}}},"”":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"s":{"docs":{},"t":{"1":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}}}}},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"2":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144}},".":{"docs":{},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"3":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.008806262230919765},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.008894536213468869},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0056457304163726185},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.006853226727584237},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"4":{"2":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}},"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"b":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}},"j":{"docs":{},"i":{"docs":{},"m":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}},"o":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"docs":{}}},"docs":{}}},"docs":{}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}},"o":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"(":{"1":{"2":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}},"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"3":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},"a":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"\"":{"docs":{},"c":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},">":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"/":{"docs":{},"*":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{},"*":{"docs":{},"/":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}}}}}}}}}}}}},"(":{"4":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}},"k":{"docs":{},"o":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"k":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.02},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.012797074954296161},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.034722222222222224},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"`":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"n":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.023952095808383235},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408}}}},"k":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}},"u":{"docs":{},"x":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},"g":{"docs":{},"u":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}},"t":{"docs":{},"t":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.007508532423208191}},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.00477815699658703}}}},"e":{"docs":{},"r":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}},"(":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.01583710407239819},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"0":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}},".":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.005431502715751358},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.005674653215636823},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}},"o":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.0070126227208976155},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0052173913043478265},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.003997715591090805},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"s":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"m":{"docs":{},"b":{"docs":{},"o":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}},"u":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"w":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0079155672823219},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"l":{"docs":{},"v":{"docs":{},"m":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}},"u":{"docs":{},"k":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.006360078277886497},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.007561436672967864},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.01675977653631285},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01276595744680851},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0056457304163726185},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.009234828496042216},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.007845503922751962},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.012797074954296161},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.012678288431061807},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.006968641114982578},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0067842605156037995}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},":":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},".":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"e":{"4":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"r":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00782608695652174},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"t":{"docs":{},"o":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"r":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195}}}},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"h":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"d":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"y":{"docs":{},"b":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}},"l":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}},"x":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"o":{"docs":{},"f":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918}},"(":{"docs":{},"a":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}},"_":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}},"i":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}},"u":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"c":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"]":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"g":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00477326968973747},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":1.444765760555234},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html","tf":2}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}}},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095}}}}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"9":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.004403131115459882},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.012286689419795221}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"a":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"p":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"s":{"docs":{},"m":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}}}}},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.006638503319251659},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004828002414001207}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},"v":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"m":{"docs":{},"a":{"docs":{},"s":{"docs":{},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}}}}}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}}}},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}},"u":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}},"r":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":2},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":2.0015847860538827}},"u":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}}},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}},"_":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"_":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}}}}}}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"!":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}}}}}}},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},"k":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"i":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.01058574453069866},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901},"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html","tf":1.25},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","tf":1.1111111111111112}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.008468595624558928}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"u":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1201608848667672},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178}}}},"a":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}},"r":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.005870841487279843},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.014970059880239521},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.01016260162601626},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0223463687150838},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.010882708585247884},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.00909090909090909},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.01448400724200362},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.020833333333333332},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.004568817818389492},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.011996572407883462},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.00955631399317406},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"”":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}},"n":{"docs":{},"e":{"docs":{},"y":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"o":{"docs":{},"p":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}},"s":{"docs":{},"k":{"docs":{},"a":{"docs":{},"ł":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}}},"c":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035}},"k":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"v":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}}}}}},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":2.518101761252446},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.0070126227208976155},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html","tf":1.6666666666666665}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"4":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}}}}}},"o":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"2":{"docs":{},",":{"3":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}}},"docs":{}}},"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"\"":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"f":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"x":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"o":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093}}},"(":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}},"a":{"docs":{},"z":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"y":{"docs":{},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"o":{"docs":{},"f":{"docs":{},"\\":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}},"docs":{}}}},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}}}}},"docs":{}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268}}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.012720156555772993}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.010882708585247884},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"a":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}},"á":{"docs":{},"r":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"s":{"docs":{},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"*":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"(":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"2":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0028555111364934323}}},"o":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"*":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{}}}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"f":{"docs":{},"a":{"docs":{},"v":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"s":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"docs":{}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"docs":{}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":1.4427414690572584},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":2.040971168437026},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0057110222729868645},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":1.262853470437018},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"{":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.008141112618724558},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.008665511265164644},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"?":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"d":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}},"j":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},"=":{"docs":{},"i":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}},"i":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"i":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},"!":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}}}}}}}},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}},"f":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}}}}}}}}}}}}}},"y":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01276595744680851},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"b":{"docs":{},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}},"r":{"docs":{},"m":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289}}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"d":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}},"(":{"docs":{},"\"":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0067842605156037995}}}}}}},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0067842605156037995}}}},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279}}}}}}}}}}}}}}}}}}}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.008141112618724558}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.01397712833545108},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":1.1321637426900586},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":2.0310262529832936},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},";":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.015247776365946633},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.01909307875894988},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211}}}}}}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.014025245441795231},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html","tf":2}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}},"docs":{}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},";":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"t":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"u":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"n":{"docs":{},"(":{"0":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},"docs":{}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"s":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{},"(":{"docs":{},")":{"docs":{},"!":{"docs":{},"!":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.020833333333333332},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.010763209393346379},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00954653937947494},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.023952095808383235},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.012195121951219513},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.010882708585247884},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.029787234042553193},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.01391304347826087},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.023529411764705882},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.00995732574679943},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.013192612137203167},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.012673506336753168},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.012797074954296161},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.041666666666666664},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.011093502377179081},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.01008827238335435},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.004568817818389492},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.005226480836236934},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.012969283276450512}},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"s":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"a":{"docs":{},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"x":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"+":{"docs":{},"+":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}}}}},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"t":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}},"p":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.010165184243964422},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.008547008547008548},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.040983606557377046},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.026841804683038265},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.009425878320479864},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":1.2569686411149825},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html","tf":1.6666666666666665},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html","tf":1.6666666666666665}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0034266133637921186}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003913894324853229},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"[":{"2":{"docs":{},"]":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"docs":{}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"[":{"docs":{},"]":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"’":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html","tf":1.6666666666666665}}}}}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}},"n":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.006360078277886497},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.008415147265077139},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0063532401524777635},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":1.435238095238095},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.005568814638027049},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.011976047904191617},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.009673518742442563},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01702127659574468},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00782608695652174},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0079155672823219},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0034266133637921186},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1}},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}}}}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452}}}},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.008547008547008548},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.003780718336483932},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.008464328899637243},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":1.4710815500289183},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":1.6850715746421265},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.012802275960170697},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0079155672823219},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0028555111364934323},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html","tf":2}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}},"o":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.00477815699658703}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.010622154779969651},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":1.2542844901456727}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":1.6687144482366323}},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"r":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.018430034129692834}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.010121457489878543},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}},"f":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}},"k":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.009497964721845319},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}}}},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}}},"c":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"n":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"l":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"i":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.005141388174807198}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.006855184233076264}}}}}}}},"r":{"docs":{},"g":{"docs":{},".":{"docs":{},"e":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"p":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{},"j":{"docs":{},"d":{"docs":{},"t":{"docs":{},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"e":{"docs":{},"t":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},".":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},";":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"g":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"m":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}},"w":{"docs":{},"i":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}},"’":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},"w":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"(":{"1":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"docs":{}},"k":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093}}},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"o":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}},"d":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.021244309559939303},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.013262599469496022},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.01818181818181818},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":1.7071290944123312},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.016231474947071278},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.007712082262210797},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","tf":1.1111111111111112}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"d":{"docs":{},"i":{"docs":{},"g":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}}}},"t":{"docs":{"./":{"ref":"./","tf":0.008547008547008548},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0052173913043478265},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.009140767824497258},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","tf":1.1111111111111112}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}},"i":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"i":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{},"c":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195}},"”":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}},"”":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"s":{"docs":{},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"o":{"docs":{},"d":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"s":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.00909090909090909},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":1.1210684368579107},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.012853470437017995},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"s":{"2":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}}}}}},"h":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"c":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354}}}}},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"a":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}}},"y":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","tf":1.25}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},"i":{"docs":{},"s":{"docs":{},"a":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}}}},"(":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.004725897920604915},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"i":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}}}}}}}}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263}},"a":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}},"i":{"docs":{},"o":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}},"o":{"docs":{},"p":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"d":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0037831021437578815}},"s":{"docs":{},"–":{"docs":{},"t":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":1.4450898529678706},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1269482151835093},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"c":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"s":{"1":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"2":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"3":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"4":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"5":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},"a":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"1":{"1":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"docs":{}},"docs":{}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":1.429842076601924},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":1.1137426900584795},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}}}}}}}}}},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0056457304163726185},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},"`":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"v":{"docs":{},"e":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}},"f":{"docs":{},"i":{"docs":{},"x":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.005870841487279843},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}}}}}}},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"y":{"docs":{},"m":{"docs":{},"o":{"docs":{},"r":{"docs":{},"p":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"(":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"t":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"r":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095}}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.010683760683760684},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.006360078277886497},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.009817671809256662},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":1.435238095238095},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":1.1190058479532163},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.00792393026941363},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":1.6693970420932878},"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html","tf":1.4285714285714284},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1}},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"_":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"x":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"e":{"docs":{},"r":{"3":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},"r":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"s":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"c":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":1.25942587832048}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","tf":1.25}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.0182328190743338}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}}}},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}},"(":{"1":{"0":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126}}},"docs":{}},"docs":{},"\"":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}},"l":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0067842605156037995}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.008097165991902834}}}}}}}}},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}}},"$":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}},"{":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"}":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}}}}},"b":{"docs":{},"u":{"docs":{},"z":{"docs":{},"z":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}},"f":{"docs":{},"i":{"docs":{},"z":{"docs":{},"z":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},"u":{"docs":{},"m":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},".":{"docs":{},"t":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"1":{"0":{"docs":{},")":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}}}}}}}}}}}},"docs":{}},"docs":{}}}}}}}}}}}}},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"t":{"docs":{},"r":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}},"b":{"docs":{},"c":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"4":{"2":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"docs":{}},"docs":{}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}},"m":{"docs":{},"u":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"n":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"w":{"docs":{},"h":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"2":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}},"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"s":{"1":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"2":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{}}}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892}},"!":{"docs":{},"!":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"1":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"2":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"3":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"docs":{}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.008097165991902834},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"d":{"docs":{},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"h":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"i":{"docs":{},"p":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.015647226173541962},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.006596306068601583},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.011093502377179081},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.018050541516245487},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.006855184233076264},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.006825938566552901}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}},"c":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","tf":1.25}},"(":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"d":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"l":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":2.0023866348448687},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"t":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0136986301369863},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":1.727325245522819},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":2.270586375849534},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.011093502377179081},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":1.2530175015087508},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}},"o":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"1":{"0":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"docs":{}},"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.010610079575596816},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.003621001810500905},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}},"m":{"docs":{},"o":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}}},"i":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"p":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"n":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"v":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004828002414001207},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.00477815699658703}},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"c":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.007255139056831923},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0142602495543672},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0079155672823219},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"”":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.011604095563139932}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}}},".":{"docs":{},"h":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"l":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}}}}},"x":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}},"g":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}}}}}}},"u":{"docs":{},"r":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.015247776365946633},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0056457304163726185},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.009508716323296355},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}},"s":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"z":{"docs":{},"z":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},"p":{"docs":{},"p":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"=":{"docs":{},"b":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{},"]":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}}},"j":{"docs":{},"i":{"docs":{},"m":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}}}}}}},"v":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}}}}},"y":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}},"s":{"docs":{},"y":{"docs":{},"c":{"docs":{},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"i":{"docs":{},"e":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"/":{"2":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"docs":{}},"z":{"docs":{},"z":{"docs":{},"a":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}},"(":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"l":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"3":{"docs":{},")":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"y":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.01614481409001957},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.007255139056831923},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":2.507255139056832},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.011976047904191617},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"o":{"docs":{},"n":{"docs":{},"l":{"docs":{},"y":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}}}}},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}},"z":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.008415147265077139},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0034266133637921186},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"i":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}},"e":{"docs":{},"x":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":1.703301673450927},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"g":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}},"i":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},"r":{"docs":{},"u":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}},"k":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html","tf":1.6666666666666665}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":1.6680235187697874},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},"s":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":2.5043478260869567},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":2.003361344537815},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"(":{"3":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.006072874493927126}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"s":{"docs":{},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":1.68053148469093},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.005226480836236934},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703},"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html","tf":1.25}}}}},"l":{"docs":{},"a":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"(":{"docs":{},"\"":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"b":{"docs":{},"y":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584}}}},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},"y":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":2.020958083832335},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"y":{"docs":{},".":{"docs":{},"f":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.010683760683760684},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":2.0159151193633953},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":2.0180505415162453},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901},"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html","tf":2},"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html","tf":1.6666666666666665},"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html","tf":2}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0052173913043478265},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"y":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":2.2432748538011698},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"m":{"docs":{},"e":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.020602218700475437},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.006360078277886497},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.011435832274459974},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.012287334593572778},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.018421052631578946},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007159904534606206},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.011976047904191617},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":1.7218813905930468},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.012802275960170697},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0056457304163726185},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.011993146773272416},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.012195121951219513},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.00477815699658703}},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":1.1246857717445953},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"o":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.01606805293005671},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"docs":{},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}},"u":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"f":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},"l":{"docs":{},"(":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}},"g":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}},"f":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"w":{"docs":{},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}},"s":{"docs":{},"p":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"a":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"l":{"docs":{},"p":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"s":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}}},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"i":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}}}},"u":{"docs":{},"l":{"docs":{},"e":{"4":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.006045949214026602},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},"d":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}}},"o":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}},"o":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}}}}}}},"u":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"/":{"docs":{},"h":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"s":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}},"(":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}},"o":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"w":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"x":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}}}}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},".":{"docs":{},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"_":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"1":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"2":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"a":{"docs":{},"f":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007159904534606206},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"t":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.03125},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.007623888182973317},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"m":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.006956521739130435},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.005139920045688178},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"p":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"f":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263}}}}}}}}}}}}}}}}}},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"k":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"w":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"i":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"y":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":2.021037868162693},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195}}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"l":{"docs":{},"a":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"b":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"t":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.008415147265077139},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.017964071856287425},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.010084033613445379},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"s":{"docs":{},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408}},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.017150395778364115},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.00909090909090909},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.005674653215636823},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.005998286203941731},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.007508532423208191}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},"?":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532}},"e":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866}}}},">":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}}},"b":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"k":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}},"l":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.004725897920604915}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"t":{"docs":{},"o":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}}}}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}},"r":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"s":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"i":{"docs":{},"z":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"i":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.010526315789473684},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}},"h":{"docs":{},"a":{"docs":{},"d":{"docs":{},"o":{"docs":{},"w":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":1.6897880539499035}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}}}}}}},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"d":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"”":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"b":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"(":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},"!":{"docs":{},"!":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749}}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}},"n":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.010434782608695653},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.1243037232483144},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"e":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}}}}},"g":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}},"d":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.003621001810500905},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},"i":{"docs":{},"f":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00477326968973747},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.017341040462427744},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"e":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"z":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"o":{"docs":{},"o":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":1.432383372662915},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}},"i":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"w":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"b":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"y":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263}}}},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"s":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},"f":{"docs":{},"t":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.008097165991902834},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},"i":{"docs":{"./":{"ref":"./","tf":0.00641025641025641},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":1.6780088216761184},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":1.6804597701149424},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":2.0091407678244972},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.007566204287515763},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"c":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"a":{"docs":{},"k":{"docs":{},"(":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}},"e":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}},"c":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}},"o":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":2.003656307129799}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.012797074954296161},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":1.4485714285714284},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.008806262230919765},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":1.6780088216761184},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":1.6718659734257653},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.014263074484944533},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"d":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},"y":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}},"(":{"2":{"0":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"docs":{}},"docs":{}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"1":{"0":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"docs":{}},"docs":{}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"w":{"docs":{},"a":{"docs":{},"l":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"(":{"docs":{},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","tf":1}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}},"s":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"b":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"d":{"docs":{},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}},"[":{"4":{"docs":{},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"o":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.008894536213468869},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.008665511265164644},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.013262599469496022},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.007561436672967864},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.013568521031207599},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.014970059880239521},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0067842605156037995},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.006855184233076264}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}}},"!":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"docs":{},"f":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"y":{"docs":{},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"(":{"docs":{},"{":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"s":{"docs":{},"[":{"3":{"docs":{},"]":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"docs":{}}}},"u":{"docs":{},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0052173913043478265},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"c":{"docs":{},"u":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"e":{"docs":{},"d":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"p":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}},"(":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"i":{"docs":{},"d":{"docs":{},"=":{"0":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{}}}},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"i":{"docs":{},"d":{"docs":{},"+":{"docs":{},"+":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"c":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"y":{"docs":{},"l":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"1":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}}}},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0061433447098976105}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}},".":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.013232514177693762},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.010526315789473684},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.006364359586316627},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.011976047904191617},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.008141112618724558},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.012139605462822459},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.006956521739130435},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.017341040462427744},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0028555111364934323},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.00477815699658703}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.003977724741447892},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"=":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"k":{"docs":{},"a":{"docs":{},"ł":{"docs":{},"a":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}},"l":{"docs":{},"a":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"j":{"docs":{},"d":{"docs":{},"a":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354}}},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},"i":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}}}}}},"b":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}},"e":{"docs":{},"b":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}}},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"y":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}}}}}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.00909090909090909},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.009880028228652082},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},"s":{"docs":{},".":{"docs":{},".":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}}},"o":{"docs":{},"w":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"(":{"1":{"0":{"0":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},".":{"docs":{},"m":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}},"docs":{}},"docs":{}},"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"1":{"0":{"0":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}}}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00477326968973747},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"l":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904}}}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"n":{"docs":{},"i":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},"⁶":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"f":{"docs":{},"f":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"b":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"_":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},"w":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"i":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"h":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}},"f":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}}}}}}},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575}},"i":{"docs":{},"z":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"x":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},"k":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756}}}},"p":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}}}},"q":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}},"u":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}},"d":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"t":{"1":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"2":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.011291460832745237},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"a":{"docs":{},"g":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html","tf":1.4285714285714284}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"l":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"(":{"docs":{},"f":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"d":{"docs":{},"s":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}},".":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"t":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.006097560975609756}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}},".":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}}}}}}}}}}}}}}},"k":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},"i":{"docs":{},"f":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}}}},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}},"p":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}}}}}},"(":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"s":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746}}}}},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.1163881559659925},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"f":{"docs":{},"y":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}}},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"s":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.008506616257088847},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":2.0569105691056913},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"docs":{},"j":{"docs":{},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"4":{"docs":{},".":{"1":{"2":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"docs":{}},"docs":{}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.012195121951219513}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}},"e":{"docs":{},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}},"c":{"docs":{},"h":{"docs":{},"n":{"docs":{},"i":{"docs":{},"q":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"c":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"x":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.003780718336483932}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"(":{"docs":{},"\"":{"docs":{},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"y":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"\"":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"o":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}}},"l":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.005998286203941731}}}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.014957264957264958},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":1.469232165547286},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":2.0497925311203318},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":1.7425287356321837},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.07878787878787878},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":1.724470134874759},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":1.7153610915078803},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0074243289548829245},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.016550522648083623},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","tf":1.1111111111111112}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.009497964721845319},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.005226480836236934}},"u":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.020833333333333332},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}}}},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"e":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.017341040462427744},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{},":":{"docs":{},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"(":{"1":{"0":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{}},"docs":{}}}}}}}}},"(":{"1":{"0":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{}},"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}},"{":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.0070126227208976155},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.013157894736842105},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"p":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}},"e":{"docs":{},"d":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417}}}}}}}}}}}}},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"o":{"docs":{},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}},".":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}}}}}}}},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.003780718336483932},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}},"t":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},"?":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}},"e":{"docs":{},"m":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"n":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"y":{"docs":{},"’":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"l":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"?":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"!":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},".":{"docs":{},"b":{"docs":{},"e":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"d":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}},"a":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"o":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"@":{"docs":{},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"t":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}}},"(":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599}}}}}}}}},"n":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"r":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.010396975425330813},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00954653937947494},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.010610079575596816},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.013574660633484163},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0079155672823219},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.013888888888888888},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0069356872635561164},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0029354207436399216},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.012448132780082987},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"s":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}},"s":{"docs":{},"l":{"docs":{},"e":{"docs":{},"e":{"docs":{},"p":{"docs":{},"(":{"1":{"0":{"0":{"0":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}},"docs":{}},"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}},"docs":{}},"5":{"0":{"0":{"0":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.012287334593572778},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.02},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}}},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}},"u":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"m":{"docs":{},"b":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},":":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.01016260162601626},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}},"s":{"1":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},"!":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}}}}},"l":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"c":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}},"p":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"t":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"o":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}},"o":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"b":{"docs":{},"o":{"docs":{},"x":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"b":{"docs":{},"i":{"docs":{},"g":{"docs":{},"t":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}}}}}}},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.011422044545973729},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"i":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"u":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}},"g":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"d":{"docs":{},"a":{"docs":{},"y":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532}}}}}},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"d":{"docs":{},"o":{"docs":{},"f":{"docs":{},"x":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004828002414001207}},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},"\"":{"docs":{},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"_":{"docs":{},"l":{"docs":{},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}},"d":{"docs":{},"i":{"docs":{},"s":{"docs":{},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"(":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}},"u":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},".":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}},"w":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.011304347826086957},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004940014114326041},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866}}},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.021709633649932156},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}},".":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},"b":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.006616257088846881},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":2.042682926829268},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":1.6728016359918199},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.04294478527607362}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.008506616257088847},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"a":{"docs":{},"l":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}},"q":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html","tf":1.6666666666666665}}}}}}}}},"e":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.006045949214026602},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.006596306068601583},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.006638503319251659},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"o":{"docs":{},"o":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}},"l":{"docs":{},"i":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},"k":{"docs":{},"n":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584}}}}}}},"s":{"docs":{},"a":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"e":{"docs":{},"l":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}},"b":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"m":{"docs":{},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}},"h":{"docs":{},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{},"t":{"docs":{},"h":{"docs":{},"y":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"s":{"docs":{"./":{"ref":"./","tf":0.019230769230769232},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.03125},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.015166340508806261},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.011220196353436185},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.015247776365946633},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.012448132780082987},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.026465028355387523},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.03333333333333333},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.02894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.02545743834526651},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":2.0239520958083834},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.018292682926829267},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.02418379685610641},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.02631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.03067484662576687},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.04748982360922659},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.038128249566724434},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.025796661608497723},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.01702127659574468},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.01391304347826087},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.013445378151260505},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":1.1296032874980244},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":1.4558441558441557},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.022582921665490474},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.04524886877828054},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0196078431372549},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.006596306068601583},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":1.2638805069402534},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.021937842778793418},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.027777777777777776},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.022187004754358162},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.011349306431273645},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.023415191319246145},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.02056555269922879},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.027874564459930314},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.05},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.017747440273037544},"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html","tf":1.25},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","tf":1},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","tf":1.1111111111111112},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html":{"ref":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html","tf":1.6666666666666665},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html":{"ref":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html","tf":1.6666666666666665}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}},"e":{"docs":{},"r":{"1":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"2":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"3":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"]":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.002446183953033268},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.012622720897615708},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0063532401524777635},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.007561436672967864},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.003621001810500905},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.018281535648994516},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0069356872635561164},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},"(":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},"\"":{"docs":{},"m":{"docs":{},"a":{"docs":{},"j":{"docs":{},"a":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}},"r":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"=":{"docs":{},"m":{"docs":{},"a":{"docs":{},"j":{"docs":{},"a":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}}}}}}},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}},"a":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}},"i":{"docs":{},"d":{"docs":{},"=":{"1":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}},"docs":{}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"c":{"docs":{},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"k":{"docs":{},"a":{"docs":{},"ł":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.007623888182973317}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144}}},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},".":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"!":{"docs":{},"!":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"!":{"docs":{},"!":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}}}}}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"[":{"docs":{},"i":{"docs":{},"]":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}},"!":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{},"?":{"docs":{},".":{"docs":{},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"d":{"docs":{},"a":{"docs":{},"o":{"docs":{},"!":{"docs":{},"!":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735}}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"?":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}},"t":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931}},"!":{"docs":{},"!":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}},"d":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},"?":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}},"l":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}},";":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"a":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.008097165991902834},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.005427408412483039},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.005431502715751358},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.004568817818389492},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"p":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666}}}}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}},"e":{"docs":{},"w":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},"(":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}}},".":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}},"l":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689}},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}},"f":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}},"v":{"1":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}},"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.008317025440313111},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.008415147265077139},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.008665511265164644},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.012802275960170697},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0034129692832764505}},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.004273504273504274},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":2.0308555399719497},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":1.6735632183908045},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"e":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}},"’":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}},"n":{"docs":{},"c":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":1.6814867090096446}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"e":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}},"o":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.018590998043052837},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.021037868162692847},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.017789072426937738},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.006616257088846881},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.006364359586316627},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.034482758620689655},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.01733102253032929},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.012139605462822459},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.015915119363395226},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.005042016806722689},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.01849217638691323},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.025405786873676783},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0071301247771836},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.006638503319251659},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.006339144215530904},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.02227298686464877},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.030848329048843187},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.013066202090592335},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.006825938566552901}},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0063532401524777635},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.006364359586316627},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.011379800853485065},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.009174311926605505},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.011093502377179081},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0031525851197982345},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.007712082262210797}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.006351446718419196},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"o":{"docs":{},"f":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"i":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"e":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"l":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"n":{"docs":{},"i":{"docs":{},"s":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234}}}}}},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"i":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":2.0380348652931852},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},"e":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178}}}}},"i":{"docs":{},"l":{"docs":{},"i":{"docs":{},"t":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}}}}},"e":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"h":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}}},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"s":{"docs":{},"u":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0048367593712212815},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{},"(":{"docs":{},"i":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"i":{"docs":{},"d":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},":":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}}}},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}}}}}},"r":{"docs":{},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}},"a":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"p":{"docs":{},"i":{"docs":{},"z":{"docs":{},"z":{"docs":{},"a":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003913894324853229},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.00608695652173913},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.006787330316742082},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0028555111364934323},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.003427592116538132},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},"f":{"docs":{},"y":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.02010968921389397},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}}}}}}},"b":{"docs":{},"o":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"e":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}},"m":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"u":{"docs":{},"l":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}},"o":{"docs":{},"i":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}}}}}}}},"w":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":1.6874999999999998}},"/":{"docs":{},"u":{"docs":{},"n":{"docs":{},"w":{"docs":{},"r":{"docs":{},"a":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}},"d":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}}}}}}},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003424657534246575},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":2.0101626016260163},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.0111731843575419},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.011312217194570135},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"./":{"ref":"./","tf":0.002136752136752137},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.006097560975609756},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":1.1163881559659925},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}}}}},"e":{"docs":{},"b":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611}},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}},"’":{"docs":{},"l":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.020833333333333332},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"l":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0069356872635561164},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"!":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},"?":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"e":{"docs":{},"k":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"a":{"docs":{},"y":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.005870841487279843},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.010396975425330813},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.00954653937947494},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.005988023952095809},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.007845503922751962},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.02459016393442623},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0057110222729868645},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.005226480836236934},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"n":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.004754358161648178},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.003997715591090805},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"r":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}}}}}}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"l":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"(":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}}}}}}}}}}}},"d":{"docs":{},"u":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0018105009052504525},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}}},"e":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"s":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}},"y":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"(":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"m":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"e":{"docs":{},"(":{"docs":{},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0033613445378151263},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0024140012070006035},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0037831021437578815},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}},"d":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}},"k":{"docs":{},"i":{"docs":{},"p":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"o":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.002835538752362949},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}},"r":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.005671077504725898},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.008130081300813009},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.005780346820809248}}},"s":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},"h":{"docs":{},"o":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}},"l":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}},")":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"s":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}},"r":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}},"e":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}},"u":{"docs":{},"l":{"docs":{},"d":{"docs":{},"n":{"docs":{},"’":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}}},"z":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}},"h":{"docs":{"./":{"ref":"./","tf":0.002136752136752137}}},"e":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.008298755186721992}}}}}},"r":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"中":{"docs":{},"文":{"docs":{},"翻":{"docs":{},"译":{"docs":{"./":{"ref":"./","tf":0.002136752136752137}}}}}},"在":{"docs":{},"线":{"docs":{},"阅":{"docs":{},"读":{"docs":{},"地":{"docs":{},"址":{"docs":{"./":{"ref":"./","tf":0.002136752136752137}}}}}}}},"当":{"docs":{},"前":{"docs":{},"进":{"docs":{},"度":{"docs":{},"：":{"docs":{},"英":{"docs":{},"文":{"docs":{},"原":{"docs":{},"文":{"docs":{},"搬":{"docs":{},"运":{"docs":{},"中":{"docs":{"./":{"ref":"./","tf":0.002136752136752137}}}}}}}}}}}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.022871664548919948},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.005199306759098787},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.007587253414264037},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.00904977375565611},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0035650623885918},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.004524886877828055}}}}}}}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0038119440914866584},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.01639344262295082},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{},".":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"a":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},".":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},":":{"1":{"0":{"8":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}},"4":{"8":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}},"docs":{}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}}}}},"i":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},".":{"docs":{},"s":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}},"s":{"docs":{},"q":{"docs":{},"l":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}}}}}},"r":{"docs":{},"c":{"docs":{},"d":{"docs":{},"i":{"docs":{},"r":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"s":{"docs":{},"r":{"docs":{},"c":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"/":{"docs":{},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0063532401524777635}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}},"x":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},".":{"docs":{},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}},"f":{"docs":{},"x":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"1":{"1":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"a":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}},"s":{"docs":{},"h":{"docs":{},"u":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"h":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}},"b":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}},"v":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.002638522427440633}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"e":{"docs":{},"t":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}},"s":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"m":{"docs":{},"p":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.013793103448275862},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.00395778364116095},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"o":{"docs":{},"u":{"docs":{},"s":{"docs":{},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}},"n":{"docs":{},"i":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}},"“":{"docs":{},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Introduction.html","tf":0.010416666666666666},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}},"o":{"docs":{},"w":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}}},"h":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"p":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}},"b":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}},"”":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}},"u":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"g":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"”":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"”":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"a":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"d":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}},"i":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},"f":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"y":{"docs":{},"o":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"!":{"6":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}},"=":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},"!":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.007159904534606206}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}},"$":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},"{":{"docs":{},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"}":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"a":{"docs":{},"a":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}},"b":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"u":{"docs":{},"n":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"u":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},")":{"docs":{},".":{"docs":{},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}},";":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}},"f":{"docs":{},"a":{"docs":{},"b":{"docs":{},"i":{"docs":{},"o":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"i":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"\"":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}},"o":{"docs":{},"t":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"\"":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}},"k":{"docs":{},"i":{"docs":{},"r":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"o":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"j":{"docs":{},"a":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"r":{"docs":{},"c":{"docs":{},"i":{"docs":{},"n":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.006896551724137931},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},"k":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"i":{"docs":{},"c":{"docs":{},"z":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"k":{"docs":{},"a":{"docs":{},"ł":{"docs":{},"a":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}},"l":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"á":{"docs":{},"r":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}},"z":{"docs":{},"z":{"docs":{},"z":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"@":{"docs":{},"k":{"docs":{},"t":{"docs":{},".":{"docs":{},"a":{"docs":{},"c":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"m":{"docs":{},"y":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}}}},"u":{"docs":{},"n":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},"=":{"docs":{},"$":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}},"$":{"docs":{},"i":{"docs":{},"t":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}}},"\\":{"docs":{},"n":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"+":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"d":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.010610079575596816}}}},"|":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},"?":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408}}},".":{"docs":{},".":{"docs":{},".":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}}}}},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"w":{"docs":{},"o":{"docs":{},"j":{"docs":{},"d":{"docs":{},"a":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}},"r":{"docs":{},"l":{"docs":{},"d":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"/":{"docs":{},"h":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}},"l":{"docs":{},"\"":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"s":{"docs":{},"w":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}},"$":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}},"e":{"docs":{},"w":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0014677103718199608},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569}},"\"":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569}}}}}}}},"{":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{},"}":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"}":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}},"?":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"}":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}},"@":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"}":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},"}":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"}":{"docs":{},"!":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}},"}":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"}":{"docs":{},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"}":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}},"?":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"}":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}}}}}},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},"e":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899}}}}}}}}}},"(":{"0":{"docs":{},".":{"docs":{},"y":{"docs":{},".":{"docs":{},"z":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},"1":{"docs":{},".":{"docs":{},".":{"1":{"0":{"0":{"docs":{},")":{"docs":{},".":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}},"docs":{},")":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"|":{"docs":{},"\"":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}},"s":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147}},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}}}}}}}}}}}}}}}}}}}}},"docs":{}},"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}}}}}}}}}},"2":{"docs":{},".":{"docs":{},".":{"1":{"0":{"0":{"docs":{},")":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}}}}}},"docs":{}},"docs":{}},"docs":{}}}},"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},"o":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}},"p":{"docs":{},"l":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}},"e":{"2":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}},"docs":{}}}}}}},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}},"e":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004940014114326041},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.006666666666666667},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842}}}}}}}}}}}}}},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0028228652081863093},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.002613240418118467}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}},"i":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"f":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}},"/":{"docs":{},"e":{"docs":{},"l":{"docs":{},"s":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"k":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903}}}},"k":{"docs":{},"o":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568}}}}}}},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303}}}}}}},")":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}}}}}}},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"r":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}}}},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"g":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"a":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}}},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}},"d":{"docs":{},"d":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0040650406504065045}}}}}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}},"a":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}}}},"(":{"docs":{},"i":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}}}},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"d":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452}}}}}}}}},"s":{"docs":{},"l":{"docs":{},")":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}},"o":{"docs":{},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}},"v":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}},"o":{"docs":{},"w":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}},"i":{"docs":{},"n":{"docs":{},"h":{"docs":{},"e":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}}}}}}}}}}}}}}}}},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.004234297812279464}}}}}}}},"p":{"docs":{},"e":{"docs":{},")":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}},"o":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{},"q":{"docs":{},"u":{"docs":{},"o":{"docs":{},"t":{"docs":{},"e":{"docs":{},"i":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}},"@":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211}},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}},"@":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"y":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}},"s":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}},"f":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"l":{"docs":{},"s":{"docs":{},"o":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}},"p":{"docs":{},"i":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}},"d":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"a":{"docs":{},"r":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}}}}},"a":{"docs":{},"f":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}},"n":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}},"e":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},"m":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},")":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},"t":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"a":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}}},"!":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"b":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"k":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"w":{"docs":{},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.0029940119760479044}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}}}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.008097165991902834},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.004552352048558422},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}},"x":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},".":{"docs":{},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"(":{"docs":{},"y":{"docs":{},")":{"docs":{},")":{"docs":{},"?":{"docs":{},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"z":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}}}}}}}}}}}},"z":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}},"o":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},"u":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0077628793225123505}}}},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}},"f":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","tf":0.006944444444444444}}},"o":{"docs":{},"p":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","tf":0.00819672131147541}}}}}}},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631}}}}}}}},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}}}}}}}}},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}}}}}}}}}}},"u":{"docs":{},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}},"n":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"i":{"docs":{},"k":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166}}}}}},"j":{"docs":{},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"v":{"docs":{},"m":{"docs":{},")":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.004224502112251056},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.003169572107765452},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0018915510718789407},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.009425878320479864},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0006825938566552901}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.006060606060606061},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.002284408909194746},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}},"+":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.005610098176718092},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0034662045060658577},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.009581881533101045}},"=":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.003913894324853229},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}}},"\"":{"docs":{},"s":{"docs":{},"o":{"docs":{},"m":{"docs":{},"e":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"c":{"docs":{},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"m":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.010854816824966078}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.010854816824966078}}}}}},"m":{"docs":{},"a":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}},"/":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204}},"/":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.014677103718199608},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.016830294530154277},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.021601016518424398},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.005568814638027049},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0036275695284159614},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.01417004048582996},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.010854816824966078},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.02276176024279211},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.010610079575596816},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0026086956521739132},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.005689900426742532},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.03468208092485549},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.019760056457304165},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.009234828496042216},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0030175015087507543},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0037831021437578815},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.010830324909747292},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.00799543118218161},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.005141388174807198},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.016382252559726963}},".":{"docs":{},".":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0019569471624266144},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.007623888182973317},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.012287334593572778},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.010526315789473684},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"*":{"docs":{},"*":{"docs":{},"*":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}},"*":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},".":{"docs":{},".":{"docs":{},".":{"docs":{},"*":{"docs":{},"/":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.015151515151515152},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0020477815699658703}}}}}}},"*":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0069356872635561164}}}}},"=":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.02299412915851272},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.029453015427769985},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.01905972045743329},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.029045643153526972},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.008506616257088847},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.017501988862370723},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.007255139056831923},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.01417004048582996},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","tf":0.034482758620689655},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.018995929443690638},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.03466204506065858},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.03186646433990895},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.03183023872679045},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.025210084033613446},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.01849217638691323},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.0030303030303030303},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.011560693641618497},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0374029640084686},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.008912655971479501},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.012673506336753168},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.012678288431061807},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.008827238335435058},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.02527075812274368},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.019988577955454025},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.050556983718937444},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.032229965156794424},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.017064846416382253}},"=":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}},"=":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}},">":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0009784735812133072},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.005263157894736842},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0015910898965791568},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.008982035928143712},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.006932409012131715},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.007587253414264037},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0067226890756302525},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.012121212121212121},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.003621001810500905},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.005674653215636823},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.004284490145672665},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111}},"=":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},")":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0030349013657056147},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.003484320557491289}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.004048582995951417},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.003656307129798903},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.004355400696864111}},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446}}}}}}}},"a":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}},"n":{"docs":{},"y":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0014114326040931546}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.006097560975609756}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.002117148906139732}}}}}}}}},"t":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593}}}}}},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}},"@":{"docs":{},"t":{"docs":{},"h":{"docs":{},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"s":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"s":{"docs":{},":":{"docs":{},":":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.002386634844868735},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.007623888182973317}}}}}},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.005082592121982211}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0025412960609911056}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.004413619167717529}},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"y":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{},"y":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136}}}}}}}}}}}},"d":{"docs":{},"s":{"docs":{},"l":{"docs":{},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}}},"e":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"u":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.005484460694698354}}}}}}}}}}}}}}}},"h":{"docs":{},"t":{"docs":{},"m":{"docs":{},"l":{"docs":{},"d":{"docs":{},"s":{"docs":{},"l":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}}},"j":{"docs":{},"v":{"docs":{},"m":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{},"a":{"docs":{},"p":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}}}}}}}}}}}}}}}}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"a":{"docs":{},"u":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"r":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"v":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}}}},"s":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0012610340479192938}}}}}},"e":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"i":{"docs":{},"n":{"docs":{},"c":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}},"_":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.004267425320056899}}}},"y":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00851063829787234},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.0018281535648994515}}},"’":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}},"t":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}}},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523}},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046}}}}}}}}}}}},"n":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"l":{"docs":{},"f":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.004149377593360996},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}}},"’":{"docs":{},"v":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}},"r":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}},"l":{"docs":{},"l":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726}}}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.0013192612137203166},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}},"n":{"docs":{},"g":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}}}},"{":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773}}}},"4":{"docs":{},"=":{"docs":{},"k":{"docs":{},"i":{"docs":{},"r":{"docs":{},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"}":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.0004892367906066536}}}}}}}}}}},"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.017123287671232876},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.028050490883590462},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.026683608640406607},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.022684310018903593},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.013157894736842105},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.013524264120922832},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.04491017964071856},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.015719467956469165},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.02631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.012269938650306749},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.06377204884667571},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.02079722703639515},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.024279210925644917},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.010084033613445379},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.02275960170697013},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.02727272727272727},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.046242774566473986},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.015525758645024701},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.011873350923482849},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.010259505129752565},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.011093502377179081},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.017654476670870115},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.032490974729241874},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.01713796058269066},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.04355400696864112},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0348122866894198}},"}":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0007057163020465773},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0027303754266211604}},")":{"docs":{},"{":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"}":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","tf":0.01614481409001957},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.029453015427769985},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.026683608640406607},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","tf":0.016597510373443983},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.01984877126654064},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","tf":0.013333333333333334},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.013157894736842105},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.013524264120922832},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","tf":0.04491017964071856},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.015719467956469165},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.02631578947368421},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.018404907975460124},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.06105834464043419},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.02079722703639515},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.010622154779969651},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0034782608695652175},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.010084033613445379},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.02275960170697013},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","tf":0.02727272727272727},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.046242774566473986},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.015525758645024701},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0053475935828877},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.011873350923482849},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.009052504526252263},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","tf":0.007312614259597806},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.011093502377179081},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.017023959646910468},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.032490974729241874},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.01770416904625928},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.013710368466152529},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.04355400696864112},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0348122866894198}},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.009104704097116844},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.002570694087403599},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},";":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.007587253414264037}}}},"%":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.004207573632538569},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}},".":{"docs":{},".":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.001402524544179523},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","tf":0.0012706480304955528},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0027137042062415195},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.010622154779969651},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.002652519893899204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","tf":0.023121387283236993},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","tf":0.005277044854881266},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0025220680958385876},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}},"\"":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","tf":0.002805049088359046},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}},"n":{"docs":{},"d":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},"b":{"docs":{},"y":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"i":{"docs":{},"d":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}}}}}}}}}}}}},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{},"_":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"_":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"s":{"docs":{},"h":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"(":{"docs":{},"s":{"docs":{},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"(":{"docs":{},":":{"docs":{},":":{"docs":{},"b":{"docs":{},"u":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}},"z":{"docs":{},"i":{"docs":{},"p":{"docs":{},"i":{"docs":{},"n":{"docs":{},"p":{"docs":{},"u":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"m":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{},"o":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.004070556309362279},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.007220216606498195}}}}}},"d":{"docs":{},"d":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{},"h":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"b":{"docs":{},"e":{"docs":{},"(":{"docs":{},"(":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}},"b":{"docs":{},"y":{"docs":{},"(":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.0015174506828528073}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0012070006035003018}}}}}}},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"3":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"docs":{}}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"1":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"docs":{}}}}}}}},"i":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"d":{"docs":{},"r":{"docs":{},"a":{"docs":{},"w":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"i":{"docs":{},"c":{"docs":{},"_":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},"_":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"2":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"docs":{}}}}}}},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"b":{"docs":{},"u":{"docs":{},"t":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"f":{"docs":{},"i":{"docs":{},"r":{"docs":{},"e":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},".":{"docs":{},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"_":{"docs":{},"t":{"docs":{},"i":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"(":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"o":{"docs":{},"y":{"docs":{},"e":{"docs":{},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"y":{"docs":{},"o":{"docs":{},"f":{"docs":{},"r":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"1":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}},"docs":{}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"(":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}}}}}}}},"?":{"docs":{},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.001890359168241966},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0031821797931583136},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.018404907975460124},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.002844950213371266},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","tf":0.0035285815102328866}},".":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.002631578947368421}}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}},".":{"docs":{},",":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}},"(":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},":":{"docs":{},":":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}}}}}}}}}}}}}}}}}},"`":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","tf":0.000945179584120983}}}}}}},"f":{"docs":{},"i":{"docs":{},"b":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}}},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},"$":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"g":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"`":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"`":{"docs":{},"`":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}},"j":{"docs":{},"a":{"docs":{},"v":{"docs":{},"a":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},":":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","tf":0.007894736842105263},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","tf":0.0017331022530329288},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.005305039787798408},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","tf":0.001584786053882726},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0017133066818960593},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0017421602787456446},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.004095563139931741}},":":{"docs":{},"t":{"docs":{},"o":{"docs":{},"k":{"docs":{},"e":{"docs":{},"n":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","tf":0.001422475106685633}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.001142204454597373}}}}}},"a":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"w":{"docs":{},"h":{"docs":{},"o":{"docs":{},"m":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}},"u":{"docs":{},"s":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},")":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}}}}}}}}}}}},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","tf":0.0008710801393728223}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"e":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","tf":0.0007955449482895784}}}}}},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522}}}},"l":{"docs":{},"y":{"docs":{},".":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","tf":0.0013568521031207597}}}}}}}},"t":{"docs":{"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"ref":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","tf":0.0020325203252032522},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.004347826086956522},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Introduction.html","tf":0.01}},":":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374}}},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}}}}}}},"e":{"docs":{},"n":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}},"e":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"o":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"p":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0017391304347826088}},"(":{"docs":{},")":{"docs":{},":":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}},",":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}}}}}}}}}}}}}},"y":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","tf":0.0008695652173913044}}}}}}}},"o":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"i":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{},",":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}}}}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}}}},"–":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}},"m":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Introduction.html","tf":0.00558659217877095}}}}}}}}},"&":{"docs":{},"&":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0024183796856106408},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","tf":0.006134969325153374},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","tf":0.0036101083032490976}},",":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}},"‘":{"docs":{},"l":{"docs":{},"a":{"docs":{},"m":{"docs":{},"b":{"docs":{},"d":{"docs":{},"a":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","tf":0.0012091898428053204}}}}}}}}},"*":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.01417004048582996},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","tf":0.0016806722689075631},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0308953341740227}},"/":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","tf":0.006069802731411229},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.006305170239596469},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"ref":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","tf":0.0013651877133105802}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},".":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}}},"x":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","tf":0.0017825311942959}},".":{"docs":{},"p":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"(":{"docs":{},"y":{"docs":{},")":{"docs":{},".":{"docs":{},"e":{"docs":{},"q":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"z":{"docs":{},")":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","tf":0.0020242914979757085}}}}}}}}}}}}}}}}}}},"”":{"docs":{},".":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","tf":0.00425531914893617}}}},"c":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"ref":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","tf":0.0022624434389140274}}}}}}},"|":{"docs":{"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"ref":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","tf":0.007957559681697613}}},";":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","tf":0.0006035003017501509}}},",":{"docs":{"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"ref":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","tf":0.0006305170239596469}}},"…":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","tf":0.0005711022272986865}}},"—":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.001713796058269066}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"ref":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","tf":0.000856898029134533}}}}}}},"length":14187},"corpusTokens":["!","!!","!!,","!!.","!!:","!6)","!=","\"","\"\"","\"\")","\"\",","\"$it","\"$it\"","\"$name","\"${it.name}","\")","\"+","\",","\"...\",","\"/home\"","\"/home\",","\"/users\"","\"/users\",","\"\\n\")","\"a\"","\"a\",","\"aaa\")","\"b\"","\"b\").quicksort()","\"b\",","\"b\";","\"becaus","\"bill\"","\"blanc\"))","\"braun\"","\"c\"","\"c\")","\"c\"))","\"cannot","\"cold\"","\"contact@kt.academy\",","\"d\",","\"enter","\"estimateds","\"fabio\"","\"fail","\"hansen\"))","\"hello\".length","\"hello,","\"hot\"","\"kirill\"","\"kotlinprogrammer\"","\"l\",","\"length","\"maja\"","\"marcin\"","\"marcin\",","\"markiewicz\")","\"mild\"","\"moskala\")","\"moskała\"","\"moskała\")","\"márton\"","\"name\"","\"privatefunction\"","\"row\"","\"startswith","\"text\"","\"text\".isempty()","\"unnamed\"","\"user$it\"","\"user(id=$id)\"","\"wojda\")","\"world\"","\"zzz\"","\"|\"","\"|\")","\"|\"?","$field","$field\")","$i","$i\"","$n","$new\")","$newvalue\")","$old","$surname\"","$user\")","$valu","$value\")","${it.result}\"","${it.surname},","${it?.name}\")","${name.text}!\")","${name.touppercase()}\")","${name}\")","${text.length}\")","${this.name}\")","${this?.name}","${this?.name}\")","${this@node.name}\")","%","&&","&&,","(","(!initialized)","(!name.isnullorblank())","(!news.isnullorempty())","(()","((i,","((t)","()","(0.y.z)","(1..10).jointostring(\"|\")","(1..10).jointostring(separ","(1..10).jointostring(separator)","(1..100).sum()","(1..this).product()","(2..100).tolist()","(@nonnul","(@nullabl","(@nullable,","(@nullable,@checkfornul","(a","(addroute):","(after","(along","(also","(an","(and","(any)","(api)","(api).","(assum","(balanc","(bi","(book","(both","(chapter","(class","(clean","(comparison,","(contract)","(data","(default)","(degre","(depend","(domain","(dsl).","(elem","(element","(elements.s","(even","(except","(explain","(extens","(filereader,","(for","(formal","(fullnam","(fullname2","(function","(gener","(getter","(hasvalue)","(have","(here","(how","(i","(if","(if/else,","(in","(incorrectsign)","(index:","(init","(int)","(int,","(isempty())","(it","(item","(just","(jvm).","(like","(limit","(liskov","(list","(list)","(method","(minheight","(most","(n","(nextquoteid","(nine,","(no","(npe),","(number)","(numbers.isnotempty())","(object","(of","(oop)","(oop),","(or","(out","(part","(person","(predicate(elem))","(predicate(element))","(print","(printer","(produc","(programm","(reader","(return","(safe","(see","(semver),","(setpositivebutton,","(showalert)","(sinc","(size","(so","(ssot)","(standard","(string)","(structure,","(t)","(tdd)","(that","(the","(thi","(this)","(this).","(this.siz","(though","(throwabl","(true)","(unless","(unlik","(user","(view","(we","(what","(which","(x","(x.plus(y))?.equal(z)","(z",")","):","*","*.","*/","*/,","+","+\"column","+\"main","+\"some","+\"thi","+\"valu","+=",",","...","...\"",".addroute(path",".also",".appli",".build()",".call(employee)",".copyofrange(1,",".create()",".filter",".findviewbyid(id)",".first",".getboolean(from_notification_arg)",".getdefaultsharedpreferences(this)",".getvalue(thisref:",".jointostring(separ",".let",".let(::bufferedinputstream)",".let(::objectinputstream)",".let(::print)",".let(::zipinputstream)",".powerset()",".readobject()",".set(employee,",".setbacon(3)",".setcheese(1)",".seticon(r.drawable.ic_dialog)",".setmessage(r.string.fire_missiles)",".setnegativebutton(r.string.cancel,",".setolives(2)",".setoncancellisten",".setpositivebutton(r.string.fire,",".settitle(r.string.dialog_title)",".show()",".subscribe((list",".subscribeby(","/","/*","/**","/*...*/","//","//***","//...","0","0\"","0)","0,","0.","0.0","1","1\"","1)","1):","1,","1.","1..1000)","1..2)","1.0.","1.1)","1.myplus(2)","10","10)","10,","100","100)","1000","1000,","10:","11","11,","112,","11:","12","12:","12]","13","13,","13:","14","14:","15","15:","16","16:","17","17,","17:","18","18:","19","19,","19:","1_800_275_2273","1};","2","2\"","2)","2).","2,","2.","20","2008.","2016.","20:","21","21:","22","22:","23","23,","23:","24","24:","25","25:","26","26:","27","27:","28","28:","29","29,","29:","29]","2:","3","3)","3,","30","305","305’","30:","31","31,","31:","32","32:","33","33,","33:","34","34:","35","35:","36","36:","37","37,","37:","38","39","3:","4","4,","40","41","41,","41:","42","43","43,","44","45","46","46:","47","47,","48","49","49:","4:","4=/[:+/(,/,\"0/~i:1)|.])*.1,:]","4]","5","5,","50","51","52","53,","554,","59,","5:","6","6!","6).quicksort()","6,","6.factorial())","6.not())","61","61,","67,","6:","6]","7","7,","71,","7200","73,","79,","7:","8","8,","8.","83,","89,","8:","9","9,","911","97]","997)","9:",":","::a","::plu","::showhom","::showhome)","::showhome),","::showus","::showusers)","::token)","::token,","::tree",";","=","==","===",">",">()",">=",">a",">any)",">any,",">int",">int,",">number,",">string):",">t):",">tree",">unit",">unit)",">unit):","?.,","?.let","?.let(view::showperson)","?:","?:,","?:.","@author","@beforeeach","@checkfornull,","@constructor","@deprecated(\"us","@dslmarker","@except","@experimental(level","@experimentalnewapi","@htmldsl","@inject","@jvmfield","@nonnul","@notnul","@nullabl","@param","@parametersarenonnullbydefault","@possiblynul","@properti","@receiv","@return","@sampl","@see","@sinc","@suppress","@test","@throw","@throws(insufficientfunds::class)","[","[1,","[2,","[]","[a,","[aaa","[cat(name=felix),","[com.package.someclass.element2]","[command","[element1],","[element]","[fabio,","[fabio]","[hound(name=pluto),","[thi","[user0,","[x]","[zzz","]","_","_,","```","`fib","`java","`stack","`token$delegate`","`token$delegate`.getvalue(this,","`token$delegate`.setvalue(this,","a(\"https://kotlinlang.org\")","a()","a,","a:","aaa,","abc","abil","about,","about.","abov","above,","absolut","abstract","abstract,","abstract.","abstraction!","abstraction).","abstraction,","abstraction.","abstraction:","abstraction?","abstractions).","abstractions,","abstractions.","abstractions.on","abstraction”","absurdli","abus","abuse,","abused.","acc","acc,","acc.map","acc:","acceler","acceleration,","accept","accepted.","access","accessor","accessors,","accessors.","accident","accident.","accidental.","accord","accordingly.","account","account.","accredit","accumul","achiev","achieve,","achieve.","acknowledg","act","action","action:","actions,","actions.","activ","active:","activity()","activity,","activity.","activity.startactivityforresult(intent,","activity:","activityfactori","activityfactory()","actor","actor,","actors.","acts)","actual","actualelement:","actually,","ad","adapt","add","add(element:","addall(elements:","addall.","addallfunction:","addclass(heading)","added.","addit","addition","additionally,","address","address\")","addroute),","addtre","addtree(name:","addtree(tree:","adjust","adjust.","adoption,","adult.","advantag","advantages,","advantages.","advantages:","affect","afraid","after()","after:","ag","again","again,","again.","against","age,","age:","aggreg","agil","ago,","ago.","agre","agreement","agreement,","alert","alert.","alertdialog(context,","alertdialog.builder(context)","alertdialog.builder(this)","alerts.","algorithm","algorithm,","algorithms,","algorithms.","alias","all,","all.","all3.","all:","allow","allow,","along","alreadi","also,","alter","altern","alternative,","alternative.","alternative:","alternatively,","alternator,","although","alway","amaz","amazing.","ambiguity:","ambit","amount","amphibi","amphibious()","amphibious:","amphibiousspot:","analog","analysi","analyz","android","android,","android.","android.support.annotations)","androidx.annot","angl","angri","angry.","anim","animal()","animal,","animal.","animal:","anko","anko,","annot","annotation,","annotation.","annotation:","annotations)","annotations.","annotations?","announc","annoy","anonym","anoth","another,","another.","answer","answer.","ant","antipattern,","anxiou","any()","any:","any?","any?)","any?,","any?.","anymor","anymore.","anyon","anys:","anyth","anything.","anyway","anyway.","anyway:","api","api(\"junit:junit:4.12\")","api).","api,","api.","apis,","apis.","apl","apl.","apl:","appcode.","appcompatactivity()","appear","append","append(list:","append(strs)","applecomput","appli","applic","application,","application.","application:","applications,","applications.","apply,","apply.","approach","approach:","appropri","appropriately.","approv","aptli","ar","architect","architectur","architecture).","architecture,","architectures.","are,","are.","are:","aren’t","arg(doctor_id_arg)","arg(from_notification_arg)","argextra(doctor_arg)","argu","argument","argument,","argument.","argument:","arguments).","arguments,","arguments.","arguments.4","arguments9.","arguments:","arguments?","argument’","around","around.","array","array)","array,","array.newinstance(classobject,","arraylen)","arraylist()","arraylist(3).","arraylist(size)","arraylist,","arraylist.get(int).","arraylist.withsize(3),","arraylist<>();","arraylistof()","arrays.","arrays.arraylist","arraystoreexcept","art","art,","art.","artifici","artilleri","as:","ask","asked,","aspect","assembl","assembly.","assert","assert(ret.s","assert.","assertequals(1,","assertequals(10,","assertequals(2,","assertequals(3,","assertequals(5,","assign","associ","associated:","assum","assumpt","assur","atarget.blank","attempts:","attent","atyp","atypical.","author","autoclos","autocloseable.","autom","automat","automatically,","automobile.","avail","available.","avoid","avoided.","awar","away","axis.","a”","b","b()","b)","b,","b.","b:","b?","back","backend","backend)","backend,","backward","bacon","bacon)","bacon:","bad","bad.","badli","balanc","balance.","balance:","balance?","bank","bankaccount","bar","bark","bark()","base","baselin","basexxx","basic","basis.","basket.","be","be.","be:","becam","because,","because:","becom","beersdrunk:","befor","before()","before,","begin","beginn","beginning,","behav","behave,","behave.","behavior","behavior,","behavior.","behavior:","behaviour","behind","believ","below","below\")","below).","below.","below:","benefit","berard","best","bet","beta","better","better,","better.","between","between,","big","big.","bigger","bigger,","biggest","biginteg","biginteger.valueof(integer.max_value)","bigtool","bill]”","bind","bindconfiguration(\"port\")","binddimension(r.dimen.font_size)","binding,","binding.","bindview(r.id.button)","birch:","bit","blanc,","blanket","bloch).","bloch,","bloch.","block","block.","blocks,","blocks.","boat","boat:","bodi","bodies).","body,","boilerpl","boilwat","boilwater()","bomb","bonu","book","book,","book.","books)","boolean","boolean)","boolean):","boolean.","both","both,","both:","bought","bound","bound,","box","box(","box(\"str\")","box()","box(car())","box(val","box.set(\"som","box.set(42)","box:","boxany:","boxstr","boxstr:","br:","braces,","bracket","brain","brake","branch","branch.","brand","braun","breach","break","break.","brewcoffee()","brewcoffee,","briefli","broadly,","bufferedread","bufferedreader(filereader(path))","bufferedreader(filereader(path)).us","bufferedreader,","bug","bugs:","build","build()","builder","builder(priv","builder,","builder.","builder:","built","bunch","bundl","bundle?)","busi","business,","button","button(\"say","button(onclick","button({","button,","button:","buttondescription(r.string.cancel,","buttondescription(r.string.fire,","buzz","buzz,","buzz11,","by:","bytearray","bytecod","bytecode.","c","c#,","c)","c):","c++","c++,","c++?","c,","c.","c:","cach","cache:","caching,","calcul","calculate()","calculate():","calculatedheight","calculatedheight)","calculatepointsfrompassedcours","calculatepointsfrompassedcourses()","calculatepointsfrompassedcourses():","calculatepointsfrompassedcourses.","calculating...","calculation.","call","call(aft","call(befor","call(before:","call({","call.","call.respond(newsdata)","call:","called\")","called.","called:","callmiddl","callprivatefunction(employee)","callprivatefunction(employee:","calls).","calls.","came","can,","can.","can:","cancel","can’t","capabilities,","capabilities.","capabl","capit","captur","car","car(),","car,","car.","car:","care","career","carefulli","careful”","carfactori","carri","car’","case","case)","case).","case):","case,","case.","cases,","cases.","cases:","cast","casted:","casting,","casting.","casting:","cat(val","catch","categori","caught","caught.","caus","caution,","caution:","cautiou","certain","challeng","challenge.","champion","chanc","chang","change).","change,","change.","change:","change;","changed,","changed.","changed:","changed?","changedress(person:","changeemployeeid(employee,","changeemployeeid(employee:","changes,","changes.","changes:","change”.","changing.","chapter","chapter,","chapter.","chapter:","chapters),","charact","characterist","characteristics.","chararray,","charsequ","charsequence)?","charset,","cheap","cheaper","check","check(isinitialized)","check(isopen)","check,","check.","check:","checkand","checker","checking.","checknotnull(context)","checknotnull(token)","checknotnull,","checknotnull.","checks,","cheer","chees","cheese,","cheese:","child:","children","children.","choic","choice:","choos","chosen","chosen:","circumstances,","citizen.","clarif","clarifi","class","class,","class.","class/file).","class:","classes)","classes,","classes.","classic","classif","classifi","clean","cleaner","cleaner,","cleaner.","clear","clear()","clear).","clear,","clear.","clear:","clear?","clearli","clearly,","clearly.","clever","click","client","client.","close","closeabl","closer","closest","clusters,","clutter","cn","code","code).","code,","code.","code2:","code4and","code6:","code:","codebase.","coercein","coercion","coffe","coffee.","coffeemachin","coffeescript,","cognit","coher","coincidence.","cold","collect","collection)","collection):","collection,","collection.","collection.powerset():","collection:","collection?","collections,","collections.","collector","colon.","color.blu","color.r","color.yellow","color:","column","com.android.annot","combin","come","comfort","commands.","comment","comment,","comment:","comments,","comments.","comments12.","comments?","common","common,","common.","commonli","commun","communicate,","community)","community,","community.","compani","companion","compar","comparable,","compareto?","comparison","compat","competit","compil","compilation.","compiler).","compiler.","compiler:","compiler’","complain","complet","complete.","complete:","complex","complex,","complexities.","complexity,","complexity.","complic","complicated,","complicated:","complication.","componentdidmount","components,","compos","compose,","composit","composition,","composition.","compound","comprehend","comprehend.","comprehens","comput","computation","computers,","concaten","concentr","concept","concept,","concept.","concept:","concepts,","conceptu","concern","concern,","concis","concise.","concise:","concret","concretely,","concurr","concurrency.","concurrentmodificationexcept","condit","conditions(effect","conditions.","confid","config","config)","configur","configuration,","configuration:","configurations,","configurations.","conflict","conflict,","conflict.","confus","confusing.","confusing:","confusion.","connect","connections.createornull()","connecttodb()","cons.","conscienti","conscientiously.","consecut","consequ","consequences,","consequences.","consid","consist","const","constant","constant,","constant.","constant:","constantli","constitut","constrain","constraining.","constraint","constraints:","construct","construct.","constructed,","construction,","construction.","constructor","constructor(","constructor(size:","constructor(vararg","constructor,","constructor.","constructor1.","constructor:","constructors).","constructors,","constructors.","constructors:","consum","consuming.","contain","contains(element:","containsall(elements:","content","content\"","contests.","context","context)","context):","context,","context.","context.alert(r.string.fire_missiles)","context.inflater:","context.layout_inflater_service)","context.makedefaultdialogbuilder()","context.notificationmanager:","context.preferences:","context.showmessage(","context.snackbar(","context.startactivity(intent)","context.toast(","context.toast(message)","context:","continu","contract","contract,","contract.","contract?","contracts.","contravari","contravariant,","contravariant.","control","control.","controller!!.dosomething()","controller.dosomething()","controller:","convenient,","convenient.","convenient:","convent","convention,","conventions,","conventions.","conventions”.","convers","conversion,","convinc","conway’","coordin","copi","copy.","copying.","core","corner,","coroutin","coroutinecontext","coroutinecontext.key","coroutines,","coroutinescop","correct","correct.","correct:","corrections.","correctli","correctly,","correctly.","correctly:","correctness.","correspond","cost","cost.","couldn’t","countcharactersinfile(path:","counter","counterargu","counterlist","counterlist.addall(listof(\"a\",","counterparts.","counterset","counterset(","counterset()","counterset:","countless","countri","coupl","coupling.","cours","course,","covari","covariance.","covariant,","covariant.","cover","crash","crashes,","creat","create(\"$name.$childname\")","create(\"$name.$childname\").appli","create(name:","create).","create.","created,","created.","createinst","createtable():","createvalue()","creation","creation)","creation).","creation,","creation.","creation:","creator","creators,","criteria,","critic","critiqu","cssparser),","ctrl","cup","cup()","cup,","cup.","cup:","curli","current","currying,","custom","cuti","d).max()!!","d,","d:","d]","daili","danger","danger.","dangerous,","dangerous.","dao","dao:","dark","data","data,","data.","data2.","data:","databas","date","date(millis)","date.from(instant)","date:","david","day","day.","day?","db.insertsources(sourceentries)","db.insertsources(sourcelist)","db:","deal","deal.","dean","debug","decad","deceler","deceleration.","decid","decis","decision.","declar","declaration.","decor","decoupl","dedic","deep","deeper","deeper.","deepli","default","default,","default.","default_buffer_s","default_car","default_car:","defend","defens","defin","define,","define.","defined.","defined:","definit","definition,","definition.","definitions,","degre","degree,","delay(10)","deleg","delegate,","delegate.","delegate:","delegates,","delegates.notnul","delegates.notnull()","delegates.notnull.","delegates.observ","delegates.observable(listof())","delegates.observable(null)","delegates.veto","delegation,","delegation.","demand","demanding,","demonstr","denotable,","depart","department.","departments)","departments.","depend","deposit(depositamount:","depositamount","deprec","deprecation.","deriv","descend","describ","described.","descript","description.","description:","description][element3]","descriptions.","descriptions:","descriptive,","deserv","design","design,","design.","designed.","desir","desired.","desktop","despit","destin","destination.add(element)","destructur","detail","details,","details.","detect.","detected.","detekt","determin","determinist","develop","developed.","developer.","developers).","developers,","developers.","developers:","developer’","developing,","development,","development.","devic","device,","diagram","diagram:","dialog","dialogconfig(","didn’t","diesel,","differ","difference,","difference.","difference?","different,","different.","differently,","differently.","difficult","difficult,","direct","direction.","directli","directly,","directly.","directsto","disadvantag","disadvantage.","disadvantage:","disadvantages.","disaster.","disciplines.","discov","discover.","discuss","display","display)?","display.","display:","displayed,","displayed.","distanc","distance.","distinct","distinguish","distract","distribut","div","dive","divis","do","do,","do?","doctor","doctor:","doctoractivity:","doctorid","doctorid:","document","documentation,","documentation.","documentation:","documented.","doesn’t","doesn’t.","dog","dog()","dog(),","dog)","dog,","dog.","dogbox.set(hound())","dogbox:","doghous","dokka.","domain","domain.","domains.","done","don’t","don’t,","dot","dot:","doubl","double)","doubts,","down","downsid","dozens.","draw","drawback","dress","dress)","dress.","dress:","dri","drinkbeers(num:","drive","drive.","driven","driver,","drop","dsl","dsl,","dsl.","dsl:","dslmarker","dslmarker.","dsls,","dsls.","dto).","due","duplic","duplicates:","duration).show()","duration.","duration:","dure","e):","ea","each","early,","easi","easier","easier.","easili","easily,","easily:","easy,","easy.","eclips","edg","edit","editor","edittext()","edu.umd.cs.findbugs.annotations)","edward","effect","effects.","effici","efficiency)","efficiency,","efficient,","efficient.","einstein","either.","either:","electriccar:","electron","eleg","element","element)","element,","element.","elements,","elements.","elements.aslist()","elements.first()","elements.s","elements.size)","elements:","elements`()","elementsad","elementsadded++","elementsadded:","elementstail","elements’","elimin","else.","else:","elvi","email","email,","email:","emb","employe","employee()","employee)","employee,","employee::class.declaredmemberfunct","employee::class.java.getdeclaredfield(\"id\")","empti","empty)","empty.","empty:","emptylist()","enabl","encapsul","encapsulation,","encapsulation.","encourag","end","end,","endpoint","enemi","energi","engin","engine,","engineering,","engineers.","enjoy","enough","enough.","enough:","ensur","enterpris","enthusiast","enthusiastic,","entirely.","enum","enumset.of(jack,","environ","equal","equals(other:","equals,","equals.","equalsand","equival","eratosthen","ergo,","erich","error","error(\"oper","error(\"print","error(\"valu","error,","error.","error:","errors,","errors.","errors.”","especi","espresso","essay","essenti","establish","estim","estimatedsize:","etc.","etc.)","etc.).","evalu","even","eventu","everyon","everyone.","everyth","everything,","everywher","everywhere,","everywhere.","evolv","evolves.","exact","exactli","exactly,","exactly.","examin","exampl","example,","example.","example:","examples,","examples.","examples:","except","exception()","exception.","exceptions.","exclam","exclud","execution.","exercis","exist","exist.","expect","expect:","expectation,","expectations,","expectations.","expected,","expected.","expens","expensive.","experi","experienc","experience,","experiment","experiment:","experimental,","experimental.level.warning)","experimentalnewapi","explain","explan","explanation,","explanation.","explanatori","explanatory.","explicit","explicit,","explicit.","explicitli","explicitly.","explicitly:","exponenti","expos","exposed).","exposed,","exposed.","exposit","express","express:","expression,","expression.","expression:","expressions),","expressions,","expressions:","expressive.","expressiveness.","extend","extend,","extens","extension).","extension.","extern","externally.","extract","extracted,","extracted:","extraction.","extrem","extreme,","ey","f()","f:","face","facecards:","facilit","fact","fact,","factor","factori","factorial()","factorial(n:","factorial.","factorials.","factories,","factories:","factory.","factory.next(\"igor\",","factory.next(\"marcin\",","fail","fails.","failur","failure(jsonparsingexception())","failure(v","failure)","failure,","failure.","fair","fake","fall","fals","false)","false.","false”","familiar","far","fast","faster","faster.","favor","featur","feature,","feature.","features.","feedback","feel","few","few:","fewer","fiat126p()","fiat126p.","fib","fib(0))","fib(1))","fib(2))","fib(3))","fib(4))","fibonacci","field","field?.touppercase()","fields,","fields.","fight","file","file(path).uselin","file,","file.","fileinputstream(\"/file.gz\")","files,","files.","files.getfilestore(path)","files.newbufferedreader(path)","filestor","fill","fillwithpuppies(animals)","fillwithpuppies(dogs)","fillwithpuppies(list:","filter","filter,","filternotnull.","filters.","final","final,","final.","finally,","find","find.","findbug","fine","fine,","fine.","finished.","finished:","finishedalert","finishedalert()","finishedalert.show()","fire","first","first,","first.","fit","fix","fixed.","fixes.","fizz","fizz()","fizzbuzz","flaw,","flexibility,","flexibility.","flexibl","flexible,","flexible.","float)","flow","fluctuate.","focu","fold(1)","follow","following:","fool","for.","forc","foreach","forest","forest()","forest(v","forest.addtree(birch())","forest.addtree(spruce())","forget","form","formally,","format","format,","format.","format:","formatt","formatted.","forms,","forward","found","found.","four","fowler,","fragile.","fragment,","fragment.view","fragment:","framework","framework,","framework.","francisco","free","freedom","freedom,","freedom.","freeli","friend","friendli","friendly.","friend’","from.","fromnotif","fromnotification:","from…”","frontend","frontend,","frozen","fruitless","frustrating,","fs:","fulfil","full","fulli","fullnam","fullname(\"aaa\",","fullname(v","fullname2:","fullname:","fun","fun(a,","fun(a:","function","function).","function,","function.","function:","function?","function?”.","functionalities.","functionalities?","functionality.","functions).","functions,","functions.","functions:","functions?","function’","fundament","further","further,","further.","furthermore,","futur","future,","future.","ga","gain","game","gamma,","gap","garag","garage.valu","garage:","garbag","gas,","gascar:","gasolinecar:","gave","gear","gener","general,","generalization,","generally,","generatesequence(2)","generator:","get","get(\"propositions\")","get()","get():","get,","get/set?","getamphibious()","getamphibious():","getdata","getdata()?.let{","getinst","getinstance,","getintent()","getintent(activity)","getintent(context)","getintent(context:","getname()","getnetworkservice(context)","getnews()","getnextid()","getnextid():","getordefault,","getorimplicitdefault(property.name)","getornul","getornull,","getprinter()","getsomedata()","getsystemservice(","getsystemservice(context.notification_service)","getter","getter,","getter.","getters:","gettyp","getus","getuser()","getuserinfo():","getusername()","getusername():","getusers()","getusers():","getusers(callback:","getvalu","getvalue(","getvalue()","github","github?","give","give:","given","givename()","glitch3.","go","goal","golf","good","good,","good.","goodtemp","gradl","gradle.","graphic","great","greatli","groovy).","group","grow","guarante","guaranteed.","guarantees.","guard","guess","guide”","habit","hack","hacked.","hand","hand,","handl","handled,","handled.","handler","hansen]","happen","happen.","happens,","happens.","happi","hard","hard,","hard.","harder","harder,","harder.","hardware.","harm","has,","hash","hashcod","hashcode.","hashset","hashset()","hashset.","hashset.addal","hashset:","haskell.","hasn’t","have","have,","have.","have?","haven’t","hbox","head","head:","healthi","healthy.","hear","heavi","heavili","height","held?","hello\")","hellohellohello","helloworld","helm.","help","help.","help:","helper","helpful.","helpful:","here","here,","here.","here:","here’","here”.","hesit","heurist","heuristic,","hibernate)","hidden","hidden.","hide","hideprogress()","hierarch","hierarchi","hierarchies,","hierarchies.","hierarchy,","high","higher","highli","highlight","hint","hire","history,","history.","hold","holders.","holds.","honest,","honest:","honor","hood","hood,","hood.","hope","hopefully,","horror.","hound(val","hound:","hour","however,","however.","html","html,","html.","html:","htmldsl","http","http(s)","https://en.wikipedia.org/wiki/abstraction_(disambiguation)","huge","human","human(id,","hundr","icon","icon:","id","id(nextid++)","id(priv","id(val","id,","id:","idea","idea.","ideal","identical.","identifi","identifier.","identity:","idiom","idiomat","idioms.","if(!keyiscorrect(key))","if(!value.isnullorblank())","if(elements.isempty())","if(hasvalue)","if(text.length","if,","if/els","if/else,","ignored,","illeg","illegalargumentexcept","illegalstateexcept","illustr","imag","imageload","imageloader:","imagin","immedi","immut","immutable,","immutable.","impact","implement","implement.","implementation(\"junit:junit:4.12\")","implementation).","implementation,","implementation.","implementations.","implementations:","implemented,","implemented.","impli","implic","implicit","implicit,","implicitly.","implicitly:","import","importance.","important,","important.","importantly,","imposs","impossible.","improv","in)","in.","incent","includ","including:","incompat","inconsist","incorpor","incorrect","incorrect,","incorrect.","incorrectli","increas","increment","increment:","indent","independ","independence.","independent?","independently,","independently.","index","indexoutofboundsexcept","indexoutofboundsexception.","indic","indicate.","individu","inevit","infer","inferred,","inferred.","inferred:","infinit","infix","infix:","influenc","influenti","inform","information.","inherit","inherit,","inheritance).","inheritance,","inheritance.","inheritance:","inheritance?","inhibit","init()","init)","init.invoke(tablebuilder)","init:","initfunct","initi","initialized,","initializer()","initializer:","inject","inject()","inlin","inner","innerload()","innerset","innerset.add(element)","innerset.addall(elements)","innerset.clear()","innerset.contains(element)","innerset.containsall(elements)","innerset.isempty()","innerset.iterator()","innerset.remove(element)","innerset.removeall(elements)","innerset.retainall(elements)","innerset.s","innerset:","input","input/output,","inputstream","inputstream.readbytes(","insecur","insepar","insid","inside.","inspir","instanc","instance,","instance.","instance:","instances,","instances.","instantiation.","instead","instead\")","instead\",","instead,","instead.","instead:","instead?","instructions.","int","int)","int):","int,","int.","int.(int)","int.(other:","int.factorial():","int.max_value.","int.myplus(other:","int.not()","int.times(operation:","int.timesrepeated(operation:","int.todouble()","intarray,","integ","integer),","integer.","integer[]","integr","intellij","intend","intens","intent","intent(context,","intent.extra","intent.extras.getint(doctor_id_arg)","intentfor","intentfor(\"page\"","intentfor()","intention,","interact","interact?","interchangeably.","interest","interfac","interface):","interface,","interface.","interface:","interfaces,","interfaces.","interfaces:","interface–th","intermediari","intern","internal,","internal.","internally.","internally8.","internet","internetloader()","internetloader(showalert","internetloader(v","interoper","interpret","interrupt","interview","intlinkedlist:","introduc","introduced.","introduct","ints:","inttodouble:","intuit","intuition.","intuitively.","invari","invariance.","invariant.","invariants,","invent","invest","investigate,","invoc","invok","invoke(size:","invoked.","involv","involved,","involved.","io","io.reactivex.annotations)","ios,","is,","is.","is:","isaccess","isempty():","isn’t","isn’t.","isomorphic,","ispass","ispassing():","ispasswordvalid(text:","issu","issue,","it!!.filternotnull()","it)","it),","it,","it.","it.cancel()","it.categori","it.countri","it.descript","it.hashcode()","it.id","it.isadult","it.length","it.map","it.nam","it.result","it.todouble()","it.toint()","it.toshort()","it10.","it:","it?","it?”.","item","item,","item.","item.sources.foreach","item.sources.map(::sourcetoentry)","items,","items.","items:","iter","iterable,","iterable.filt","iterable.filter(","iterable.firstornull(()","iterable.jointostring(","iterable.map","iterable.map(","iterable.mapnotnull(","iterable.product()","iterable.product():","iterable.sorted():","iterable.sorted.","iterable.tocollection(destination:","iteration,","iterator()","itself","itself,","itself.","it’","i’v","j:","java","java,","java.","java.io","java.io.read","java.lang.unsupportedoperationexcept","java.new.socket","java.sql.connection,","java.srcdir(\"src/core/java\")","java.util.abstractlist.add(abstractlist.java:108)","java.util.abstractlist.add(abstractlist.java:148)","java.util.scanner.","javabean","javaclass","javaclass().valu","javafx,","javafx:","javascript","javascript),","javascript,","javascript.","javatest","javaversion.version_11","javax","javax.annotation)","jetbrain","jni,","job","job.","john","johnson,","jointostr","jordan","joshua","json","jsonparsingexcept","jsonparsingexception()","jsr","judiciously.","jump","junior","junit","jvm","jvm,","jvm.","kdoc","kdoc.","keep","kept","key","key:","keyboard.","keyiscorrect(key:","keyword","keyword).","keyword.","kind","king)","king.","know","know.","knowledg","knowledge,","knowledge.","knowledge:","knowledge”","known","koin","koltin","kotlin","kotlin).","kotlin,","kotlin.","kotlin.coroutines.continuation:","kotlin/j","kotlin/js,","kotlin/js.","kotlin/jvm)?","kotlin/jvm,","kotlin/n","kotlin/native.","kotlin:","kotlin?","kotlin’","kproperti","kproperty):","kproperty,","ktlint","ktor","ktor,","ktor.","label","label(\"hello","label,","label.","labrador:","lack","lambda","lambda,","lambdas.","languag","language)","language,","language.","languages,","languages.","languages:","language’","larg","largest","largestof()","largestof(a:","largestof(vararg","last","last()","lateinit","later","later,","later.","later:","latter","launch","law","layer","layer,","layers,","layers.","layoutinflat","lazi","lazili","lazily:","lead","leaf","leak","leak.","lean","learn","learn,","learn.","least,","leav","led","left","left.","left.drop(1)","left.first()","left.isempty()","left.sum","left.sum()","left:","legaci","length","length:","less","let","let,","let.","let:","letter.","letter;","let’","level","level).","level,","li","librari","libraries,","libraries.","library).","library,","library.","library:","library`","life","life=:[:+/(3","lifecycl","lifetime.","life”","lift","lighter","like","like,","like:","like?","limit","limit:","limitations.","limited.","line","line,","line.","line:","linear","linearlayout","lines.","lines.sumbi","linguistically,","link","linter","linux","liskov","list","list(","list(4)","list,","list.","list.add(4)","list.add(42)","list.add(elem)","list.add(init(index))","list.add(puppy(\"beam\"))","list.add(puppy(\"jim\"))","list.add(transformation(elem))","list.of(1,2,3).","list.product()","list.quicksort():","list.tomutablelist","list.tomutablelist()","list1","list1.add(1)","list1.plusassign(1)","list1:","list2","list2.plus(1)","list2:","list3","list:","list>","list?","listadapter(/*...*/)","listconstruction:","listen","listener?","listeners,","listof","listof(","listof(\"c\",","listof()","listof(1,","listof(1,2,3)","listof(12,","listof(3,","listof(a,","listof(vararg","listof,","listof:","listview","listview(items)","liter","littl","live","llvm.","load","load()","load.","loadal","loadall():","loaderwithprogress","loaderwithprogress()","loadfrominterner()","local","local,","locally:","locat","location),","lock","log","log(\"email","log.e(\"key","logging,","loggingproperty(0)","loggingproperty(null)","loggingproperty(var","logic","logic,","logic.","lombok","lombok)","long","long,","longer","longer,","longer.","longest","look","loop","loop,","loop.","lose","lost","lost.","lot","lot.","loudli","low","lower","lower.","lowest","luke:","mac","mac]","machin","machine,","machine.","made","magic","main","main()","main(args:","mainact","mainactivity.getintent(context)","mainactivity.start(context)","mainactivity.startforresult(activity,","mainactivity:","mainactivity::class.java)","mainli","mainpresent","mainstream","maintain","maintainability.","maintained,","maintained.","mainten","maintenance.","mainviewmodel","maja","major","major,","major.minor.patch","major.minor.patch.","make","makechild(childname:","makecoffe","makecoffee()","makecoffee.","makeconnection()","makedefaultdialogconfig()","makeespressocoffee()","makeespressocoffee.","makelistview(config:","malformat","manag","manage.","manage4.","managers,","mani","manner.","manual","manually.","manufactur","many.","map","map,","map:","mapnotnullto(arraylist(),","mapof(","mapof.","maps,","marcin","mark","markdown.","marker","martin","martin).","match","materi","mathemat","mathematician","matter","matter.","maven","max","max_thread","maxim","maximum","maxof","maxof(a:","mayb","me,","mean","mean.","mean:","meaning","meaning,","meaning.","meaningful.","meaningless","means.","means?","measured.","mechan","mechanism?","mechanisms:","member","members,","members?","memori","memory.","mention","mentioned,","menu.","merg","mess","messag","message,","message.","message:","messagedisplay","messagedisplay(context)","messagedisplay(v","messagedisplay.setchristmasmode(true)","messagedisplay.show(\"message\")","messagedisplay:","messagelength","messagelength.long","messages.","messy.","met,","met.","meta","metadata","metaphor","metaphor,","method","method)","method)?","method,","method.","method9","method?","methods).","methods,","methods.","method’","middl","middlecal","might,","migrat","milk.","milli","millis,","min_password_length","mind","mind,","mind.","mine","minheight","minim","minimalistic,","minimum","minor","minor.","minu","minut","misconcept","misinterpret","mislead","misleading.","misleading:","mismatch","miss","miss.","missiles!","mistak","mistakes.","misunderstand","misus","misuse.","misused,","mobil","mock","mocking,","mockk()","mode","mode.","model","modif","modifi","modification,","modification.","modifications.","modified,","modifier)","modifier),","modifier).","modifier,","modifiers,","modifiers.","modifiers:","modify.","modify:","modul","modular","module,","module.","modules,","modules.","modules:","moment","moment.","money","monopoli","month","months.","more","more,","more.","more”.","morsel","moskała","mostli","move","ms?","much","multipl","multiplatform","multithread","multithreading,","multithreading.","mutability,","mutability.","mutabl","mutable,","mutable.","mutablecollection,","mutableiterable,","mutablelazi","mutablelazyholder(v","mutablelist","mutablelist(","mutablelist(size,","mutablelist)","mutablelist,","mutablelist.","mutablelist.add(4)","mutablelistof(\"a\",","mutablelistof()","mutablelistof(1,2,3)","mutablelistof(cat(\"felix\"))","mutablelistof(hound(\"pluto\"))","mutablemap","mutablemapof()","mutableset","mutableset,","mutableset.add(id(1))","mutablesetof()","mutablesetof(id(1))","mutablesetof\\","mutableus","mutableuser()","mutat","mutates,","mutation.","myfavorit","mylinkedintlist(head,","mylinkedintlist(head:","mylinkedintlist?","mylinkedintlist?):","mylinkedintlistof(*elementstail)","mylinkedintlistof(vararg","mylinkedlist","mylinkedlist(","mylinkedlist()","mylinkedlist(1,","mylinkedlist(2,","mylinkedlist(head,","mylinkedlist.of(1,","mylinkedlist:","mylinkedlist?","mylinkedlistof(","mylinkedlistof(*elementstail)","mylinkedlistof(*ints)","mylinkedlistof(1,","mylist","mylist.of(1,","mylist?","myplu","myplus(1,","myplus.invoke(1,","myplus:","mytest","márton","n","naiv","name","name\"","name)","name).","name){","name,","name.","name:","name=igor,","name=marcin,","name?\")","name?.let","named\")","named,","named.","names)","names,","names.","names.add(fullname(\"david\",","names.add(fullname(\"jordan\",","names.add(person)","names.add(user.getname());","names:","narrow","narrowest","nativ","natur","nearli","necess","necessari","necessarili","need","need,","need.","needed.","needless","neg","negativebutton","negativebuttondescript","neglect","nest","network","networkrepositori","networkservic","networkservice.getdata","never","nevertheless,","new","new,","newarray","newer","newid","newid)","newid:","newinst","newinstance,","newli","news.foreach","news:","newsdata","newsusecase.getacceptednews()","newsusecase.getpropositions()","newtyp","newvalu","newvalue:","next","next():","next(name:","nextid","nextid++","nextid:","nextquoteid","nice","nicer","no.","nobodi","node","node(\"parent\")","node(name)","node(v","node.makechild(\"child\")","node?","nointernetconnection()","nois","noise,","noise:","non","none","norm.","normal","nospot.valu","nospot:","nosuchelementexcept","not,","not.","notat","notation.","notations:","note","noth","nothing!","nothing.","nothings:","notic","notice.","noticed,","notifi","notificationmanag","notifydatasetchanged()","notifyuser(it)","notion","notnul","now","now,","now.","nowaday","nowadays,","npe","npe.","null","null)","null))","null,","null.","null:","null;","nullability,","nullability.","nullabl","nullable.","nulls:","nullwhen","num","num)","number","number,","number.","number:","numberastext:","numberfromus","numberfromuser.coercein(0,","numberhash:","numbers,","numbers.","numbers.drop(1)","numbers.filt","numbers.first()","numbers:","numbers;","numbersto","numbertoint:","numer","nums.max()!!","nums:","o(1)","obj","object","object,","object.","object:","object?","object[]","objects,","objects.","objects:","objects[2]","object’","observ","observable,","observable.getusers()","obsolet","obtain","obviou","obvious,","occur","occur:","occurs.","odd","of(vararg","of,","of:","offens","offer","offers,","offers.","offici","often,","ok","old","old,","older","older.","oliv","olives,","olives:","omit","on","onc","oncancellisten","oncancellistener:","once,","once.","onclick","oncomplet","oncreat","oncreate(savedinstancestate:","oncreate,","one).","one,","one.","one:","one?","onerror","ones.","onlin","only,","only.","onnext","onnext()","onstart()","oop","oop,","open","open.","open:","oper","operation()","operation,","operation.","operations,","operations.","operator,","operator.","operator:","operators.","opinion","opposit","optim","optimization.","option","option,","option.","option:","options,","or,","order","order,","order.","ordered.","orempti","org.eclipse.jdt.annotation)","org.jetbrains.annotations)","org.jetbrains.annotations.notnull;","organ","orient","origin","orm","orthogon","os","other","other,","other.","other.id","other:","others,","otherwis","otherwise,","otherwise.","other’","ought","ourselv","ourselves,","out","out,","outdat","outer","outfit","output","outputstream,","outsid","outside,","outside.","outside:","over","overal","overflow.","overkil","overload","overloading.","overrid","overridden","override,","overus","own.","owner","p.","pack","packag","package.","pain","paradigm","paradigm.","paragraph","parallel","paramet","parameter","parameter\",","parameter),","parameter).","parameter,","parameter.","parameter:","parameterized,","parameters)","parameters,","parameters.","parameters:","parent","parent()","parent.child","parent.child”,","parents’","parent”.","parodi","pars","parsimoni","part","part.","partial","particip","particular","particular,","particularli","parts,","parts.","parts:","pass","pass,","passing.","password","past","past.","patch","path)","pattern","pattern).","pattern,","pattern.","pattern:","patterns,","patterns.","patterns2.","pay","pedal","pedals–to","peopl","people,","percent","percentag","perfect","perfect.","perfect:","perfectli","perform","perform.","performance.","perhap","period.","person","person(","person()","person(v","person)","person,","person.email","person.isadult)","person.nam","person.outfit","person:","person?","person?.let","person?.takeif","personifi","personresult","personresult.value.ag","person’","perspect","perspective,","perspective.","pet(animal:","petrol","phones.","physics.","pi,","pi/2","pi/2)","pi/2,","piec","pizza","pizza(","pizza(\"l\",","pizza(size,","pizza.builder(\"l\")","pizza.builder(\"l\").setolives(3).build()","place","place,","place.","places,","platform","platform,","platform.","platforms,","platforms.","platformtyp","platformtype()","pleasur","pleasurable11.","plu","plugin","plus(a:","plus(element:","plus1:","plus2:","plus3:","plus4","plus5","point","point,","point.","pointer","points.","polici","polymorph","poorli","pop","pop(num:","popular","popular)","popular,","popularity.","port","posit","position,","position.","position?","positions,","positions.","positions:","positions`()","positivebutton(r.string.fire)","positivebuttondescript","possibilities.","possibl","possible).","possible,","possible.","post","postfix:","postpon","potenti","pourcoffee()","pourmilk()","power","powerful.","powerful:","powerset","powerset(","powerset(tail,","powerset(this,","powerset,","practic","practically,","practice,","practice.","practices.","pragmat","pre","preciou","predic","predicate:","predict","predictable.","prefer","preferencemanag","preferences.bind(token_key)","preferred,","preferred.","prefix","prefix\"","prefix.","prefix:","prepar","present","present.","presenter3","presenter:","preserv","preset","pressur","pretti","prevent","previou","previous","price","primari","primarili","prime","prime.","prime:","primes.add(prime)","primes:","primit","primitive,","principl","principle).","principle,","principle.","print","print(\"$nam","print(\"${prop.name}","print(\"attempt","print(\"calculating...","print(\"call\")","print(\"creat","print(\"hello\")","print(\"middle\")","print(\"token","print(\"us","print(10","print(a","print(abc)","print(buzz)","print(counterlist.elementsadded)","print(employee)","print(fizz)","print(it.name)","print(list)","print(list.size)","print(mutableset.size)","print(name)","print(names)","print(num)","print(person","print(primes)","print(primes.take(10).tolist())","print(s)","print(str)","print(transition(42))","print(user)","print(userrepository.loadall())","printer","printer!!.print()","printer.print()","printer:","printer?","printer?.nam","printer?.print()","printername1","printername2","printername3","println(\"hello","println(\"nam","println(\"priv","println(\"what","println(animals)","println(dogs)","println(fullname)","println(fullname.length)","println(fullname2.length)","println(s1)","println(s2)","println(value.length)","printname()","printprocessednumber(identity)","printprocessednumber(inttodouble)","printprocessednumber(numberastext)","printprocessednumber(numberhash)","printprocessednumber(numbertoint)","printprocessednumber(transition:","prints:","prioriti","privat","private.","private:","privatefunction()","pro","probabl","problem","problem,","problem.","problem:","problem?","problemat","problematic,","problematic.","problematic:","problems,","problems.","procedure.","procedures,","process","process(user:","process,","processing,","processing.","processor","processor.","processors,","produc","produce()","produce():","product","product,","production,","production.","products,","profil","profileload","profileloader:","profit","program","program.","program?","programm","programmatically:","programmers,","programmers.","programmer’","programming)","programming,","programming.","programs.","programs.everi","programs:","program”.","progress","progress()","progress.hideprogress()","progress.showprogress()","prohibit","project","project,","project.","project10","project:","projects,","projects.","promis","promised.","promises,","promot","prompttext","prone","prop.nam","prop:","propag","propagate.","propagated.","proper","properli","properly.","properti","properties,","properties.","properties:","property,","property.","property:","protect","protected.","protocol","prototype.","provid","proxi","psycholog","public","publicli","publish","puppi","puppy():","puppy(name=beam)]","puppy(name=jim),","puppy(v","puppy:","puppybox","pure","purpos","purposes:","puzzl","pyramid,","python,","python.","qualifi","qualifiesforscholarship","qualifiesforscholarship():","qualifiesforscholarship,","qualify.","queen,","question","question:","questions.","quicker","quickly.","quicksort","quietli","quit","quot","quotationpresent","quotationpresenter(","quotationrepositori","quotationview,","quotes.","r","r):","r.drawable.ic_dialog,","r.string.dialog_title,","r.string.fire_missiles,","r?","radian","radio","ralph","range,","range.","range:","rare","rarely.","raspberri","rather,","ratio","reach","react","react.","react.compon","react.component.","reaction.","reactiv","reactivex","read","read.","readability,","readability.","readabl","readable,","readable.","readable:","readbytes()","reader","reader.","reader.close()","reader.linesequence().sumbi","reader.us","reading,","readline()","readonlylist","readonlyproperti","readwriteproperti","real","reality:","realiz","realli","reason","reason,","reason.","reasoning,","reasoning.","reasons,","reasons.","receiv","receiver,","receiver.","receivers,","receivers.","receivers:","recip","reckless","recogn","recognizable.","recommend","recruit","redraw","reduc","redund","redundancy.","refactor","refactored.","refactoring:","refactorization,","refer","referenc","reference:","references):","reflect","regardless.","region","regression.","regular","reifi","reified.","reimplement","reinvent","rel","relat","relation,","relation:","relationship","relationship.","releas","release,","reli","reliabl","reliable.","remain","rememb","remembered.","remov","remove(element:","removeall(elements:","removed.","renam","repeat","repeat(3)","repeat(size)","repeat(this)","repeat,","repeated,","repeated.","repetit","repetition.","repetition?","repetitions?","replac","replacewith","replacewith(\"getusers()\"))","replacewith(\"readbytes()\"))","repo","repo.getquote(nextquoteid)","repo.getusername()","repo.quotesnumb","repo.us","repo:","repoimpl()","repoimpl:","repositori","repository:","repres","request","requestcode)","requestcode:","requir","require(isvalidemail(user.email))","require(n","require(num","require(person.email","require(person.outfit","require(points.isnotempty())","require(value)","require(value:","require,","require.","required.","requirement.\"","requirements.","requirenotnul","requirenotnull(person.email)","requirenotnull(user.email)","requirenotnull(user.name)","requirenotnull,","requiresecret()","rescue.","resolutionstrategy.failonversionconflict()","resourc","resource,","resources,","respect","respect.","respected.","respond","respons","response()","response,","response.","responsibilities.","responsibility.","responsible,","responsible.","responsibly).","rest","restrict","result","result()","result)","result,","result.","result:","result?","results.","results?","resumewith(result:","ret","ret.size)","retainall(elements:","return","return,","return?","returned.","returns()","returns,","reus","reusability.","reusabl","reuse,","reuse.","reused.","review","revolv","rewritten.","richard","rid","ridicul","right","right,","right.","right.sum","right.sum()","right:","risk","riski","riskiest","robert","robot","robot()","robotdog","root","rout","route(\"/home\",","route(\"/users\",","route(\"news\")","router","router(","router.builder()","routing.api()","row","rudimentari","rule","rule,","rule.","rule4","rule?","rules.","run","run,","run.","runtim","rxjava","s","s1","s2","sacrifices,","safe","safe,","safe.","safe:","safely,","safer","safer,","safer.","safest","safeti","safety,","safety.","said,","sake","same","same,","same.","sampl","samples.collections.collections.lists.","san","sarcast","satisfactori","satisfi","satisfied,","satisfied.","satisfied:","satisfy.","save","savecallresult(item:","saver","saw","say","say,","scala,","scalabl","scan","scare","scari","scary,","scenario.","scholarship","scholarship.","scienc","science,","science.","scientist","scope","scope,","scope.","scream","sdk","seal","search","second","second:","secondari","seconds?","section","section),","secur","see","see,","seem","seen","segreg","select","self","semant","semester,","semester.","semver","send","sendemail(","sendemail(person:","sendemail(to:","sendemail(user:","senior)","sens","sensor","sent","sent,","sentenc","separ","separated.","separately,","separately.","separately?","separator)","separator.","separator:","sequenc","sequence.","serial","serializ","seriou","serious,","seriously.","serv","server","server,","servic","set","set\")","set(value)","set(value:","set,","set.","set>","set?,","setbacon(value:","setbreakpedal(pressure:","setcheese(value:","setgaspedal(pressure:","setname(name:","setnegativebutton,","setof(emptyset())","setof(setof()))","setof,","setolives(value:","setter","setter).","setter.","setters)","setters:","setting:","setvalu","setvalue(","setwheelposit","setwheelposition(angle:","sever","shadow","shadowed.","shadowing.","share","sharedprefer","shifter","shifter,","shine.","short","short,","shorten","shortened:","shorter","shorter,","short”.","should,","shouldb","shouldn’t","show","show(","show(data!!,","showalert:","showdata","showerror","showmessag","showmessage,","showmessage.","shown","showperson","showprogress()","shows,","side","side).","side,","side.","side:","sides,","sides.","siev","sign","signatur","signature.","signific","significantli","silenc","similar","similar.","similarities,","similarities.","similarli","similarly,","simpl","simple,","simple.","simple:","simpler","simpler.","simplest","simplic","simplif","simplifi","singl","singleton","site","site\"","site,","site:","situat","situation,","situation.","situations,","situations.","situations:","size","size.","size:","skill","skip","slack","sleep(100)","sleep(100.ms)","sleep(millis(100))","sleep(timemilli","sleep?","slightli","slow","slower","slower,","small","smaller","smart","smell.","snackbar","snackbar.","snackbar.length_long","snackbar’","sniff()","sniff:","sniff?","snippet","snippet.","snippet⁶.","so,","so.","softwar","solid","solid.","solut","solution,","solution.","solutions.","solv","solve,","solved:","someobject","someon","someth","something,","something.","something?","sometim","sometimes,","somewher","soon","sooner","sort","sort,","sorted.","sortedbi","sortedbydescending.","sortedset","sound","sourc","source)","source.categori","source.countri","source.descript","source.id","sourcecompat","sourceent","sourceentity()","sourceentity.categori","sourceentity.countri","sourceentity.descript","sourceentity.id","sourceentri","sourcelist","sourcelist.add(sourceentity)","sourceresponse)","sources,","sources.","sourceset","sourcetoentry(source:","space","sparingli","speak(text:","special","specialist","specially.","specif","specifi","specific,","specific.","specification.","specified,","specified.","specified:","speed","spend","spend.","spent","split","spot","spread","spring","spring,","spruce:","sql","squar","st)","stabil","stability).","stability.","stability:","stabl","stable,","stable.","stack","stack(20)","stack.pop(10)","stacktest","stackwalk","stackwalker.getinstance(options)","stand","standard","standard.","start","start(context:","started.","startforresult(activity:","startwith(\"wor\")","state","state)","state,","state.","state:","statedtyp","statedtype()","statement","statement.","statement:","states.","static","stations,","stay","stdlib","stdlib,","stdlib.","stdlib:","steer","step","step,","step.","steps).","still","still,","stood","stop","stopped:","store","stored,","storedus","storedusers:","storedusers[4]","stori","str","str:","straight,","strang","stratif","stratifi","stratified.","string","string!.","string\"","string\")","string)","string):","string,","string.","string.and(s:","string.invoke(f:","string.readobject():","string.readobjectornull():","string.tointornull()","string.unaryplus()","string.unaryplus.","string?","string?)","string?.","stringspec({","strong","strongli","strs[3]","structur","structure,","structure.","structures,","structures.","stuck","student","student(","student(id=0,","student(id=1,","student(nextid++,","student.","student.calculatepointsfrompassedcourses():","student.qualifiesforscholarship():","studentispassingvalid","studentqualifiesforscholarshipvalidator.","students,","studentsfactori","studentsfactory()","studio,","style","style,","style.","subclass","subclass?","subclasses,","subclasses.","subclasses:","subject","subscrib","subscribeby.","subset","substitut","subsystem,","subtree.","subtrees...","subtyp","success","success(result)","success(v","such","such,","suffici","sufficient.","sugar","suggest","suggestions,","suggestions.","suggests,","suggests.","suitabl","suitable.","sum","summari","summat","super.add(element)","super.addall(elements)","super.oncreate(savedinstancestate)","superclass","superclass,","superclass.","superclass:","superclasses.","supercomput","supercomputer()","supertyp","supertype:","support","support.","support1.","supported\")","supported,","supported.","supported:","suppos","sure","sure,","surely,","surnam","surname)","surname:","surname=moskala)","surname=moskała)","surname=wojda)","surpass","surpris","surprising:","suspect","suspend","suspens","suspici","swift","swift,","swiperefreshbinderdelegate(v","swiperefreshlayout","swiperefreshlayout?","switch","sword.","synchron","synchronization,","synchronized(lock)","syntact","syntax","syntax,","syntax.","syntax:","system","system,","system.","system.out.print","systemat","systems,","systems.","system”","t","t)","t):","t,","t.","t.()","t.apply(block:","t1","t2","t:","t?","tabl","table(f:","table(init:","table,","table.","table:","tablebuild","tablebuilder()","tablebuilder().apply(init)","tablebuilder.()","tabledsl","tabledsl.()","tablets,","tag","tag.","tail","tail)","tail:","tailrec","take","take(s","takedog(dog())","takedog(dog:","takedog(hound())","takedog(puppy())","takeif,","taken","talk","target","targetcompat","task","task.","tasks.","taught","td","td(init:","tdbuilder","tdbuilder().apply(init)","tdbuilder.()","tdbuilder:","teach","team","team.","teams.","technic","technically,","techniqu","technolog","tediou","telescop","tell","temperatur","templates.","temporari","tempt","ten","tend","tendenc","term","term,","term.","terms.","terribl","terrifi","terrifying.","test","test()","test.","test:","testable.","tested,","tester","testimplementation(\"junit:junit:4.12\")","testing,","testing.","testlogging.showexcept","testmessagedisplay()","tests),","tests,","tests.","tests:","text","text\"","text(\"click","text,","text:","textfield","textsiz","textutils.isempti","textutils.isempty(\"text\").","th","thank","thankfully,","that,","that.","that:","that?","that’","theanswer:","them).","them,","them.","them:","themselv","themselves.","then,","then.","then?","theoret","theory.","there,","there.","there:","therefor","therefore,","there’","they?","they’ll","they’r","they’v","thing","things.","things:","think","third","this!","this(size,","this)","this,","this.bacon","this.beersdrunk","this.block()","this.chees","this.nam","this.ol","this.siz","this.valu","this:","this@table.tr","thisref:","those","those.","though","though,","though.","though:","thought","thousand","thread","thread,","thread.","thread.sleep(10)","thread.sleep(1000)","thread.sleep(5000)","three","through","throughout","throw","throw,","throw.","throwabl","throwable)","throwable:","thrown","thrown.","thu","thumb","thumb:","thus,","tick","tighten","till","time","time!","time).","time,","time.","time:","times1:","times:","timesrep","tips.","titl","title:","to.","to:","toast","toast(\"hello,","toast(message)","toast,","toast.","toast.length_long","toast.length_long).show()","toast.length_short","toast.maketext","toast.maketext(context,","toast.maketext(this,","toast:","toastdisplay(v","toastdisplay.","toastdur","toastduration)","toastduration).show()","toastlength","toastlength).show()","today","today’","togeth","together,","together.","token","token:","too.","too:","took","tool","tool,","tool.companion.createbigtool(","tool.createbigtool()","toolbox.","tools,","tools.","top","topic","tornadofx","tostring()","total","touch","tough","toward","tr","tr(init:","tr.","track","trade","tradit","tradition","train","trainer,","trait","trait,","traits.","transform","transform)","transform:","transformation:","transition,","transition:","translat","trbuilder","trbuilder().apply(init)","trbuilder.()","treat","tree","tree(","tree(10)","tree.","tree.companion::invok","tree.invoke(10)","tree.sum():","tree.sum:","tree?","treeset()","tree{","tri","trick","trick.","tricki","tripl","tripledhello","tripledhello()","troubl","trouble.","troublesome:","true","true)","true,","true.","true:","truli","truncated:","trust","truth","turn","turn,","twice","two","two.","type","type).","type,","type.","type:","types)","types,","types.","types:","typescript,","typic","ugli","ui","uiviewcontrol","uiviewcontroller,","ultim","unari","unawar","unbelievable,","unchecked.","unclear","unclear,","unclear.","uncommon","uncommon.","under","underli","understand","understand.","understood","understood,","undesirable.","unexpect","unfamiliar","unhealthi","unhealthy,","uniniti","unintend","unintent","unintentionally,","union","uniqu","unit","unit)","unit):","unit)?","unit.","unit:","unit?","unit?.","univers","universal,","university,","unknown","unless","unlik","unlikely).","unlimit","unnecessari","unneed","unpack","unreadable.","unsaf","unsafely,","unstabl","unstable,","unstable.","unsupportedoperationexcept","unthink","until","unwil","up","up,","up:","upcast","upcasting.","updat","update()","update,","update.","updatebook(book)","updatebooks()","updateusers()","updateweather(degrees:","upon","upper","uppercas","uppercase.","upset","us","us,","us.","us:","usag","usage,","usage.","usage:","usages,","usages.","use,","use.","use:","used,","used.","used:","used?","useful.","useful:","usefunct","useless.","useless;","uselin","user","user!","user(","user(\"maja\",","user(\"marcin\",","user()","user().appli","user(id=1)","user(name,","user(name=maja,","user(v","user(var","user)","user,","user.","user.copy()","user.copy(surnam","user.update()","user.withsurname(\"moskała\")","user1","user1,","user2","user2,","user2:","user3","user3:","user3]","user:","user?","usercontrol","usercontroller(dao!!)","usercontroller(dao)","usercontroller?","usercontrollertest","usercorrect","userdao","userdao?","userdata","userdata!!)","userhold","userincorrect","userinfo","userrepo","userrepo()","userrepo().groupedus","userrepo().groupedusers!!.map","userrepo().us","userrepo().users!!.filternotnull()","userrepositori","userrepository()","userrepository.loadall()","users)","users.","users.indices)","users.map","users.withindex())","users:","users[i]","usertext.readobject()","usertext.readobjectornull()?.ag","user’","uses,","using:","usual","utf","util","utilities,","v","v1","val","val,","val:","valid","validateemail(email)","validateemail(email:","validateemail(person.email)","validation:","valu","value)","value,","value.","value.tim","value:","valueof","values,","values.","values:","vanish","var","var).","var,","var.","var:","vararg","variabl","variable).","variable.","variable:","variables,","variables.","variable’","varianc","variant","varieti","variou","vast","vehicl","vehicle.","verbos","veri","verifykey(key)","verifykey(key:","version","version,","versions.","verticallayout","via","view","view()","view,","view.","view.hideprogress()","view.hideprogresswithsuccess()","view.showdata(it)","view.showerror()","view.showperson(it)","view.showperson(person)","view.showquote(quote)","view/compon","view:","view::showperson).","viewdidappear","viewmodel()","views,","villagepizza","violat","violations.","virtual","visibility)","visibility.","visibl","visible,","visible.","visualized:","vlissides,","vm:","voic","vulner","wait","walk","want","want,","want.","want:","warn","warning:","warranti","warranty.","was:","wasn’t","wast","water","water,","way","way,","way.","way:","way?","ways,","ways.","ways:","we,","we?","web","web,","web.","websit","website,","websites,","weeks,","well","well!","well,","well.","well:","well?","went","wet","we’ll","we’r","we’v","whatev","what’","wheel","wheel,","wheel.","when(duration)","when(length)","when(personresult)","when,","whenev","wherea","wherev","whether","whoever","whole","whose","why,","why?","wide","wide.","widely.","wider","width","wikipedia:","win","wise","wise.","wisely.","wish","with,","with.","with:","withdraw(withdrawamount:","without","withsurnam","withsurname(surname:","wonder","won’t","word","words,","work","work,","work.","working.","works,","works.","works:","workshop","world","world\")","world),","world.","worri","worries,","wors","worst","worth","wouldn’t","wrap","wrap/unwrap","wrapped.","wrapper","wrapper.","wrappers.","write","write,","write:","writing.","written","wrong","wrong,","wrong.","wrongli","x","x.plus(y).equal(z)","xcode","x”.","y","y)","yang.","year","year.","years.","years’","yet,","yield","yield(prime)","yin","you,","you.","young,","yourself","yourself,","yourself.","you’ll","you’r","you’v","z","zebra()","zebra:","zero","zh","{","{1,","{4=kirill}","{}","{}){","{},","|","}","})","}),","});","},","–","–martin","—","—thi","‘lambda","“a","“be","“be”","“but","“code","“constructor”","“creat","“creative”","“do","“game","“hack","“i","“if","“main”","“optimized”","“optimize”","“predefin","“set","“singl","“there","“unpack”","“whi","“wow,","“you","…","中文翻译","在线阅读地址","当前进度：英文原文搬运中"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"Effective-Kotlin-zh-CN\nEffective Kotlin 中文翻译\n在线阅读地址\n当前进度：英文原文搬运中\n\nPart 1 Good Code\nChapter 1 Safety\n[x] Introduction\n[x] Item 1 Limit Mutability\n[x] Item 2 Minimize The Scope Of Variables\n[x] Item 3 Eliminate Platform Types As Soon As Possible\n[x] Item 4 Do Not Expose Inferred Types\n[x] Item 5 Specify Your Expectations On Arguments And State\n[x] Item 6 Prefer Standard Errors To Custom Ones\n[x] Item 7 Prefer Null Or Failure Result When The Lack Of Result Is Possible\n[x] Item 8 Handle Nulls Properly\n[x] Item 9 Close Resources With Use\n[x] Item 10 Write Unit Tests\n\n\nChapter 2 Readability\n[x] Introduction\n[x] Item 11 Design For Readability\n[x] Item 12 Operator Meaning Should Be Consistent With Its Function Name\n[x] Item 13 Avoid Returning Or Operating On Unit\n[x] Item 14 Specify The Variable Type When It Is Not Clear\n[x] Item 15 Consider Referencing Receivers Explicitly\n[x] Item 16 Properties Should Represent State Not Behavior\n[x] Item 17 Consider Naming Arguments\n[x] Item 18 Respect Coding Conventions\n\n\n\n\nPart 2 Code Design\nChapter 3 Reusability\n[x] Introduction\n[x] Item 19 Do Not Repeat Knowledge\n[x] Item 20 Do Not Repeat Common Algorithms\n[x] Item 21 Use Property Delegation To Extract Common Property Patterns\n[x] Item 22 Use Generics When Implementing Common Algorithms\n[x] Item 23 Avoid Shadowing Type Parameters\n[x] Item 24 Consider Variance For Generic Types\n[x] Item 25 Reuse Between Different Platforms By Extracting Common Modules\n\n\nChapter 4 Abstraction Design\n[x] Introduction\n[x] Item 26 Each Function Should Be Written In Terms Of A Single Level Of Abstraction\n[x] Item 27 Use Abstraction To Protect Code Against Changes\n[x] Item 28 Specify API Stability\n[x] Item 29 Consider Wrapping External API\n[x] Item 30 Minimize Elements Visibility\n[x] Item 31 Define Contract With Documentation\n[x] Item 32 Respect Abstraction Contracts\n\n\nChapter 5 Object Creation\n[x] Introduction\n[x] Item 33 Consider Factory Functions Instead Of Constructors\n[x] Item 34 Consider A Primary Constructor With Named Optional Arguments\n[x] Item 35 Consider Defining A DSL For Complex Object Creation\n\n\nChapter 6 Class Design\n[x] Introduction\n[x] Item 36 Prefer Composition Over Inheritance\n[ ] Item 37 Use The Data Modifier To Represent A Bundle Of Data\n[ ] Item 38 Use Function Types Instead Of Interfaces To Pass Operations And Actions\n[ ] Item 39 Prefer Class Hierarchies To Tagged Classes\n[ ] Item 40 Respect The Contract Of Equals\n[ ] Item 41 Respect The Contract Of Hash Code\n[ ] Item 42 Respect The Contract Of Compare To\n[ ] Item 43 Consider Extracting Non Essential Parts Of Your API Into Extensions\n[ ] Item 44 Avoid Member Extensions\n\n\n\n\nPart 3 Efficiency\nChapter 7 Make It Cheap\n[ ] Introduction\n[ ] Item 45 Avoid Unnecessary Object Creation\n[ ] Item 46 Use Inline Modifier For Functions With Parameters Of Functional Types\n[ ] Item 47 Consider Using Inline Classes\n[ ] Item 48 Eliminate Obsolete Object References\n\n\nChapter 8 Efficient Collection Processing\n[ ] Introduction\n[ ] Item 49 Prefer Sequence For Big Collections With More Than One Processing Step\n[ ] Item 50 Limit The Number Of Operations\n[ ] Item 51 Consider Arrays With Primitives For Performance Critical Processing\n[ ] Item 52 Consider Using Mutable Collections\n\n\n\n\n\n"},"Part 1 Good code/Chapter 1 Safety/Introduction.html":{"url":"Part 1 Good code/Chapter 1 Safety/Introduction.html","title":"Introduction","keywords":"","body":"“Why do we decide to use Kotlin in our projects instead of Java, JavaScript or C++? Developers are often bought by conciseness or amazing Kotlin features. For business, as I found out, the truly convincing argument is Kotlin safety - how its design eliminates potential application errors. You don’t need to have any experience with development to get upset when the application you use crashes, or when there is an error on a website that does not let you check out after you spent an hour collecting products into a basket. Having fewer crashes makes the lives of both users and developers better, and it provides significant business value.\nSafety is important for us, and Kotlin is a really safe language, but it still needs developer support to be truly safe. In this chapter, we’ll talk about the most important best practices for safety in Kotlin. We’ll see how Kotlin features promote safety, and how we can use them properly. The general purpose of every item in this chapter is to produce code that is less prone to errors.”\n"},"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 1 Limit mutability.html","title":"Item 1 Limit Mutability","keywords":"","body":"In Kotlin, we design programs in modules and each of them is composed of different kinds of elements such as classes, objects, functions, type aliases and top-level properties. Some of those elements can hold state, for instance by having read-write property var or by composing a mutable object:\nvar a = 10\nval list: MutableList = mutableListOf()\n\nWhen an element holds state, the way it behaves depends not only on how you use it, but also on its history. A typical example of a class with a state is a bank account that has some money balance:\n class BankAccount {\n    var balance = 0.0\n       private set\n\n    fun deposit(depositAmount: Double) {\n        balance += depositAmount\n    }\n\n    @Throws(InsufficientFunds::class)\n    fun withdraw(withdrawAmount: Double) {\n        if (balance \nHere BankAccount has a state that represents how much money is present on that account. Holding state is a double-edged sword. On one hand it is very useful because it makes it possible to represent elements changing over time, but on the other hand state management is hard, because:\n\nIt is harder to understand and debug a program with many mutating points. The relationship between these mutations needs to be understood, and it is harder to track how they changed when there are more of them. A class with many mutating points that depend on each other is often really hard to understand and to modify. It is especially problematic in case of unexpected situations or errors.\n\nMutability makes it harder to reason about the code. State of immutable element is clear. Mutable state is much harder to comprehend. It is harder to reason what is its value as it might change at any point and just because we checked in some moment it doesn’t mean it is still the same.\n\nIt requires proper synchronization in multithreaded programs.Every mutation is a potential conflict.\n\nMutable elements are harder to test. We need to test every possible state, and the more mutability, the more states there are to test. What is more, the number of states we need to test generally grows exponentially with the number of mutation points in the same object or file, as we need to test all different combinations of possible states.\n\nWhen state mutates, often some other classes need to be notified about this change. For instance, when we add a mutable element to a sorted list, once the element is changed, we need to sort this list again.\n\nProblems with state consistency and the growing complexity of the project with more mutation points are familiar for developers working in bigger teams. Let’s see an example of how hard it is to manage shared state. Take a look at the below snippet⁶. It shows multiple threads trying to modify the same property, however because of conflicts some of those operations will be lost.\n var num = 0\n for (i in 1..1000) {\n    thread {\n        Thread.sleep(10)\n        num += 1\n    }\n }\n Thread.sleep(5000)\n print(num) // Very unlikely to be 1000\n // Every time a different number\n\nWhen we use Kotlin coroutines, there are less conflicts because less threads are involved, but they still occur:\nsuspend fun main() {\n    var num = 0\n    coroutineScope {\n        for (i in 1..1000) {\n            launch {\n                delay(10)\n                num += 1\n            }\n        }\n    }\n    print(num) // Every time a different number\n}\n\nIn real-life projects, we generally cannot just lose some operations, and so we need to implement proper synchronization like the one presented below. Although implementing proper synchronization is hard, and the more mutation points we have, the harder it is. Limiting mutability does help.\n val lock = Any()\n var num = 0\n for (i in 1..1000) {\n    thread {\n        Thread.sleep(10)\n        synchronized(lock) {\n            num += 1\n        }\n    }\n }\n Thread.sleep(1000)\n print(num) // 1000\n\nThe drawbacks of mutability are so numerous that there are languages that do not allow state mutation at all. These are purely functional languages. One well-known example is Haskell. Such languages are rarely used for mainstream development though, since it’s very hard to do programming with so limited mutability. Mutating state is a very useful way to represent the state of real-world systems. I recommend using mutability, but do it sparingly and wisely decide where our mutating points should be. The good news is that Kotlin supports limiting mutability well.\nLimiting mutability in Kotlin\nKotlin is designed to support limiting mutability. It is easy to make immutable objects or to keep properties immutable. It is a result of many features and characteristics of this language, but the most important ones are:\n\nRead-only properties val\n\nSeparation between mutable and read-only collections\n\ncopy in data classes\n\n\nLet’s discuss them one by one.\nRead-only properties val\nIn Kotlin we can make each property read-only val (like value) or read-write var (like variable). Read-only properties val do not allow setting:\nval a = 10\na = 20 // ERROR\n\nNotice though that read-only properties are not necessarily immutable nor final. A read-only property can hold a mutable object:\nval list = mutableListOf(1,2,3) \nlist.add(4)\n\nprint(list) // [1, 2, 3, 4]\n\nA read-only property can also be defined using a custom getter that might depend on another property:\nvar name: String = \"Marcin\"\nvar surname: String = \"Moskała\"\nval fullName \n    get() = \"$name $surname\"\n\nfun main() {\n   println(fullName) // Marcin Moskała\n   name = \"Maja\"\n   println(fullName) // Maja Moskała\n}\n\nNotice that it is possible because when we define a custom getter, it will be called every time we ask for the value.\n fun calculate(): Int {\n    print(\"Calculating... \")\n    return 42\n }\n\n val fizz = calculate() // Calculating...\n val buzz\n    get() = calculate()\n\n fun main() {\n    print(fizz) // 42\n    print(fizz) // 42\n    print(buzz) // Calculating... 42\n    print(buzz) // Calculating... 42\n }\n\nThis trait, that properties in Kotlin are encapsulated by default and they can have custom accessors (getters and setters) is very important in Kotlin because it gives us flexibility when we change or define our API. It will be described in detail in Item 16: Properties should represent state, not behavior. The core idea though is that val do not offer mutation points because it is only a getter under the hood when var is both getter and setter. That’s why we can override val with var:\ninterface Element {\n   val active: Boolean\n}\n\nclass ActualElement: Element {\n   override var active: Boolean = false\n}\n\nValues of read-only properties val can change, but such properties do not offer a mutation point which is the main source of problems when we need to synchronize or reason about a program. This is why we generally prefer val over var.\nAlthough remember that val doesn’t mean immutable. It can be defined by getter or delegate. This fact gives us more freedom to change. Though when we don’t need that, final properties should be preferred. It is easier to reason about them as they have the state stated next to their definition. They are also better supported in Kotlin. For instance, they can be smart-casted:\nval name: String? = \"Márton\"\nval surname: String = \"Braun\"\n\nval fullName: String?\n   get() = name?.let { \"$it $surname\" }\n\nval fullName2: String? = name?.let { \"$it $surname\" }\n\nfun main() {\n   if (fullName != null) {\n       println(fullName.length) // ERROR\n   }\n\n   if (fullName2 != null) {\n       println(fullName2.length) // Márton Braun\n   }\n}\n\nSmart cast is impossible for fullName because it is defined using getter, so it might give a different value during check and different later during use (for instance, if some other thread would set name). Non-local properties can be smart-casted only when they are final and do not have custom getter.\nSeparation between mutable and read-only collections\nSimilarly, as Kotlin separates read-write and read-only properties, Kotlin separates read-write and read-only collections. This is achieved thanks to the way the hierarchy of collections was designed. Take a look at the diagram presenting collections hierarchy in Kotlin. On the left side, you can see the Iterable, Collection, Set, and List interfaces that are read-only. This means that they do not have any methods that would allow modification. On the right side, you can see the MutableIterable, MutableCollection, MutableSet, and MutableList interfaces that represent mutable collections. Notice that each mutable interface extends the corresponding read-only interface, and adds methods that allow mutation. This is similar to how properties work. A read-only property means just a getter, while a read-write property means both a getter and a setter.\n\nRead-only collections are not necessarily immutable. Very often they are mutable, but they cannot be mutated because they are hidden behind read-only interfaces. For instance, the Iterable.map and Iterable.filter functions return ArrayList, which is a mutable list, as a List, which is a read-only interface. In the below snippet you can see a simplified implementation of Iterable.map from stdlib.\ninline fun  Iterable.map(\n   transformation: (T) -> R\n): List {\n   val list = ArrayList()\n   for (elem in this) {\n       list.add(transformation(elem))\n   }\n   return list\n}\n\nThe design choice to make these collection interfaces read-only instead of truly immutable is very important. It gives us much more freedom. Under the hood, any actual collection can be returned as long as it satisfies the interface. Therefore, we can use platform-specific collections.\nThe safety of this approach is close to the one achieved from having immutable collections. The only risk is when a developer tries to “hack the system” and performs down-casting. This is something that should never be allowed in Kotlin projects. We should be able to trust that when we return a list as read-only, it will be used only to read it. This is part of the contract. More about it on Part 2 of this book.\nDown-casting collections is not only breaking their contract and depending on implementation instead of abstraction as we should, but it is also insecure and can lead to surprising consequences. Take a look at this code:\nval list = listOf(1,2,3)\n\n// DON’T DO THIS!\nif (list is MutableList) {\n   list.add(4)\n}\n\nThe result of this operation is platform-specific. On the JVM listOf returns an instance of Arrays.ArrayList that implements Java List interface. This Java List interface has methods like add or set, and so it translates to the Kotlin MutableList interface. However, Arrays.ArrayList does not implement some of those operations. This is why the result of the above code is the following:\nException in thread “main” java.lang.UnsupportedOperationException\nat java.util.AbstractList.add(AbstractList.java:148)\nat java.util.AbstractList.add(AbstractList.java:108)\n\nThough there is no guarantee how this will behave in a year from now. Underlying collections might change. They might be replaced with truly immutable collections implemented in Kotlin and not implementing MutableList at all. Nothing is guaranteed. This is why down-casting read-only collections to mutable should never take place in Kotlin. If you need to change from read-only to mutable, you should use List.toMutableList function, which creates a copy that you can then modify:\nval list = listOf(1, 2, 3)\n\nval mutableList = list.toMutableList()\nmutableList.add(4)\n\nThis way does not break any contract, and it is also safer for us as we can feel safe that when we expose something as List it won’t be modified from outside.\nCopy in data classes\nThere are many reasons to prefer immutable objects - objects that do not change their internal state, like String or Int. In addition to the already named reasons why we generally prefer less mutability, immutable objects have their own advantages:\n\nThey are easier to reason about since their state stays the same once they are created.\nImmutability makes it easier to parallelize the program as there are no conflicts among shared objects.\nReferences to immutable objects can be cached as they are not going to change.\nWe do not need to make defensive copies on immutable objects. When we do copy immutable objects, we do not need to make it a deep copy.\nImmutable objects are the perfect material to construct other objects. Both mutable and immutable. We can still decide where mutability takes place, and it is easier to operate on immutable objects.\nWe can add them to set or use them as keys in maps, in opposition to mutable objects that shouldn’t be used this way. This is because both those collections use hash table under the hood in Kotlin/JVM, and when we modify elements already classified to a hash table, its classification might not be correct anymore and we won’t be able to find it. This problem will be described in detail in Item 41: Respect the contract of hashCode. We have a similar issue when a collection is sorted.\n\nval names: SortedSet = TreeSet()\nval person = FullName(\"AAA\", \"AAA\")\nnames.add(person)\nnames.add(FullName(\"Jordan\", \"Hansen\"))\nnames.add(FullName(\"David\", \"Blanc\"))\n\nprint(s) // [AAA AAA, David Blanc, Jordan Hansen]\nprint(person in names) // true\n\nperson.name = \"ZZZ\"\nprint(names) // [ZZZ AAA, David Blanc, Jordan Hansen]\nprint(person in names) // false”\n\nAt the last check, collection returned false even though that person is in this set. It couldn’t be found because it is in an incorrect position.\nAs you can see, mutable objects are more dangerous and less predictable. On the other hand, the biggest problem of immutable objects is that data sometimes needs to change. The solution is that the immutable objects should have methods that produce an object after some change. For instance, Int is immutable, and it has many methods like plus or minus that do not modify it but instead return a new Int after this operation. Iterable is read-only, and collection processing functions like map or filter do not modify it, but instead return a new collection. The same can be applied to our immutable objects. For instance, let’s say that we have an immutable class User and we need to allow its surname to change. We can support it with a withSurname method that produces a copy with a particular property changed:\nclass User(\n   val name: String,\n   val surname: String\n) {\n   fun withSurname(surname: String) = User(name, surname)\n}\n\nvar user = User(\"Maja\", \"Markiewicz\")\nuser = user.withSurname(\"Moskała\")\nprint(user) // User(name=Maja, surname=Moskała)\n\nWriting such functions is possible, but also tedious if we need one for every property. Here comes the data modifier to the rescue. One of the methods it generates is copy. It creates a new instance where all primary constructor properties are the same as in the previous one by default. New values can be specified as well. copy together with other methods generated by data modifier are described in detail in Item 37: Use data modifier to represent a bundle of data. Here is a simple example showing how it works:\ndata class User(\n   val name: String,\n   val surname: String\n)\n\nvar user = User(\"Maja\", \"Markiewicz\")\nuser = user.copy(surname = \"Moskała\")\nprint(user) // User(name=Maja, surname=Moskała)\n\nThis is an elegant and universal solution that supports making data model classes immutable. Surely, this way is less efficient than just using a mutable object instead, but it has all described advantages of immutable objects and should be preferred by default.\nDifferent kinds of mutation points\nLet’s say that we need to represent a mutating list. There are two ways we can achieve that. Either by using a mutable collection or by using read-write property var:\nval list1: MutableList = mutableListOf() \nvar list2: List = listOf()\n\nBoth properties can be modified, but in different ways:\nlist1.add(1) \nlist2 = list2 + 1\n\nBoth of these ways can be replaced with the plus-assign operator as well, but each of them is translated into a different behavior:\nlist1 += 1 // Translates to list1.plusAssign(1) \nlist2 += 1 // Translates to list2 = list2.plus(1)\n\nBoth those ways are correct and they both have their pros and cons. They both have a single mutating point, but it is located in a different place. In the first one mutation takes place on the concrete list implementation. We might depend on the fact that it has proper synchronization in case of multithreading, but such an assumption is also dangerous since it is not really guaranteed. In the second one, we need to implement the synchronization ourselves, but the overall safety is better because the mutating point is only a single property. Though, in case of a lack of synchronization, remember that we can still lose some elements:\nar list = listOf()\nfor (i in 1..1000) {\n   thread {\n       list = list + i\n   }\n}\nThread.sleep(1000)\nprint(list.size) // Very unlikely to be 1000, \n// every time a different number, like for instance 911\n\nUsing a mutable property instead of a mutable list allows us to track how this property changes when we define a custom setter or using a delegate (which is using a custom setter). For instance, when we use an observable delegate, we can log every change of a list:\nvar names by Delegates.observable(listOf()) { _, old, new ->\n   println(\"Names changed from $old to $new\")\n}\n\nnames += \"Fabio\" \n// Names changed from [] to [Fabio]\nnames += \"Bill\"   \n// Names changed from [Fabio] to [Fabio, Bill]”\n\nTo make this possible for a mutable collection, we would need a special observable implementation of the collection. For read-only collections on mutable properties, it is also easier to control how they change - there is only a setter instead of multiple methods mutating this object, and we can make it private:\nvar announcements = listOf()\n   private set\n\nIn short, using mutable collections is a slightly faster option, but using a mutable property instead gives us more control over how the object is changing.\nNotice that the worst solution is to have both a mutating property and a mutable collection:\n// Don’t do that\nvar list3 = mutableListOf()\n\nWe would need to synchronize both ways it can mutate (by property change and by internal state change). Also, changing it using plus-assign is impossible because of ambiguity:\n\nThe general rule is that one should not create unnecessary ways to mutate state. Every way to mutate state is a cost. It needs to be understood and maintained. We prefer to limit mutability.\nDo not leak mutation points\nIt is an especially dangerous situation when we expose a mutable object that makes up state. Take a look at this example:\ndata class User(val name: String)\n\nclass UserRepository {\n   private val storedUsers: MutableMap = \n       mutableMapOf()\n\n   fun loadAll(): MutableMap {\n       return storedUsers\n   }\n\n   //...\n}\n\nOne could use loadAll to modify UserRepository private state:\nval userRepository = UserRepository()\n\nval storedUsers = userRepository.loadAll()\nstoredUsers[4] = \"Kirill\"\n//...\n\nprint(userRepository.loadAll()) // {4=Kirill}\n\nIt is especially dangerous when such modifications are accidental. There are two ways how we can deal with that. The first one is copying returned mutable objects. We call that defensive copying. This can be a useful technique when we deal with a standard objects and here copy generated by data modifier can be really helpful:\nclass UserHolder {\n    private val user: MutableUser()\n\n    fun get(): MutableUser {\n        return user.copy()\n    }\n\n    //...\n}\n\nThough whenever possible we prefer limiting mutability, and for collections we can do that by upcasting those objects to their read-only supertype:\ndata class User(val name: String)\n\nclass UserRepository {\n   private val storedUsers: MutableMap = \n       mutableMapOf()\n\n   fun loadAll(): Map {\n       return storedUsers\n   }\n\n   //...\n}\n\nSummary\nIn this chapter we’ve learned why it is important to limit mutability and to prefer immutable objects. We’ve seen that Kotlin gives us a lot of tools that support limiting mutability. We should use them to limit mutation points. Simple rules are:\n\nPrefer val over var.\nPrefer an immutable property over a mutable one.\nPrefer objects and classes that are immutable over mutable.\nIf you need them to change, consider making them immutable data classes, and using copy.\nWhen you hold state, prefer read-only over mutable collections.\nDesign your mutation points wisely and do not produce unnecessary ones.\nDo not expose mutable objects.\n\nThere are some exceptions to these rules. Sometimes we prefer a mutable object because they are more efficient. Such optimizations should be preferred only in the performance critical parts of our code (Part 3: Efficiency) and when we use them, we need to remember that mutability requires more attention when we prepare it for multithreading. The baseline is that we should limit mutability.\n"},"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 2 Minimize the scope of variables.html","title":"Item 2 Minimize The Scope Of Variables","keywords":"","body":"When we define a state, we prefer to tighten the scope of variables and properties by:\n\nUsing local variables instead of properties\nUsing variables in the narrowest scope possible, so for instance, if a variable is used only inside a loop, defining it inside this loop\n\nThe scope of an element is the region of a computer program where the element is visible. In Kotlin, the scope is nearly always created by curly braces, and we can generally access elements from the outer scope. Take a look at this example:\nval a = 1\nfun fizz() {\n   val b = 2\n   print(a + b)\n}\nval buzz = {\n   val c = 3\n   print(a + c)\n}\n// Here we can see a, but not b nor c\n\nIn the above example, in the scope of the functions fizz and buzz, we can access variables from the outer scope. However, in the outer scope, we cannot access variables defined in those functions. Here is an example of how limiting variable scope might look like:\n// Bad\nvar user: User\nfor (i in users.indices) {\n   user = users[i]\n   print(\"User at $i is $user\")\n}\n\n// Better\nfor (i in users.indices) {\n   val user = users[i]\n   print(\"User at $i is $user\")\n}\n\n// Same variables scope, nicer syntax\nfor ((i, user) in users.withIndex()) {\n   print(\"User at $i is $user\")\n}\n\nIn the first example, the user variable is accessible not only in the scope of the for-loop, but also outside of it. In the second and third examples, we limit the scope of the user variable concretely to the scope of the for-loop.\nSimilarly, we might have many scopes inside scopes (most likely created by lambda expressions inside lambda expressions), and it is better to define variables in as narrow scope as possible.\nThere are many reasons why we prefer it this way, but the most important one is: When we tighten a variable’s scope, it is easier to keep our programs simple to track and manage. When we analyze code, we need to think about what elements are there at this point. The more elements there are to deal with, the harder it is to do programming. The simpler your application is, the less likely it will be to break. This is a similar reason to why we prefer immutable properties or objects over their mutable counterparts.\nThinking about mutable properties, it is easier to track how they change when they can only be modified in a smaller scope. It is easier to reason about them and change their behavior.\nAnother problem is that variables with a wider scope might be overused by another developer. For instance, one could reason that if a variable is used to assign the next elements in an iteration, the last element in the list should remain in that variable once the loop is complete. Such reasoning could lead to terrible abuse, like using this variable after the iteration to do something with the last element. It would be really bad because another developer trying to understand what value is there would need to understand the whole reasoning. This would be a needless complication.\nWhether a variable is read-only or read-write, we always prefer a variable to be initialized when it is defined. Do not force a developer to look where it was defined. This can be supported with control structures such as if, when, try-catch or the Elvis operator used as expressions:\n // Bad\nval user: User\nif (hasValue) {\n   user = getValue()\n} else {\n   user = User()\n}\n\n// Better\nval user: User = if(hasValue) {\n   getValue()\n} else {\n   User()\n}\n\nIf we need to set-up multiple properties, destructuring declarations can help us:\n// Bad\nfun updateWeather(degrees: Int) {\n   val description: String\n   val color: Int\n   if (degrees  \"cold\" to Color.BLUE\n       degrees  \"mild\" to Color.YELLOW\n       else -> \"hot\" to Color.RED\n   }\n   // ...\n}\n\nFinally, too wide variable scope can be dangerous. Let’s describe one common danger.\nCapturing\nWhen I teach about Kotlin coroutines, one of my exercises is to implement the Sieve of Eratosthenes to find prime numbers using a sequence builder. The algorithm is conceptually simple:\n\nWe take a list of numbers starting from 2.\n\nWe take the first one. It is a prime number.\n\nFrom the rest of the numbers, we remove the first one and we filter out all the numbers that are divisible by this prime number.\n\n\nA very simple implementation of this algorithm looks like this:\nvar numbers = (2..100).toList()\nval primes = mutableListOf()\nwhile (numbers.isNotEmpty()) {\n   val prime = numbers.first()\n   primes.add(prime)\n   numbers = numbers.filter { it % prime != 0 }\n}\nprint(primes) // [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, \n// 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nThe challenge is to let it produce a potentially infinite sequence of prime numbers. If you want to challenge yourself, stop now and try to implement it.\nThis is what the solution could look like:\nval primes: Sequence = sequence {\n   var numbers = generateSequence(2) { it + 1 }\n\n   while (true) {\n       val prime = numbers.first()\n       yield(prime)\n       numbers = numbers.drop(1)\n           .filter { it % prime != 0 }\n   }\n}\n\nprint(primes.take(10).toList()) \n// [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nAlthough in nearly every group there is a person who tries to “optimize” it, and to not create the variable in every loop he or she extracts prime as a mutable variable:\nval primes: Sequence = sequence {\n   var numbers = generateSequence(2) { it + 1 }\n\n   var prime: Int\n   while (true) {\n       prime = numbers.first()\n       yield(prime)\n       numbers = numbers.drop(1)\n           .filter { it % prime != 0 }\n   }\n}\n\nThe problem is that this implementation does not work correctly anymore. These are the first 10 yielded numbers:\nprint(primes.take(10).toList()) \n// [2, 3, 5, 6, 7, 8, 9, 10, 11, 12]\n\nStop now and try to explain this result.\nThe reason why we have such a result is that we captured the variable prime. Filtering is done lazily because we’re using a sequence. In every step, we add more and more filters. In the “optimized” one we always add the filter which references the mutable property prime. Therefore we always filter the last value of prime. This is why this filtering does not work properly. Only dropping works and so we end up with consecutive numbers (except for 4 which was filtered out when prime was still set to 2).\nWe should be aware of problems with unintentional capturing because such situations happen. To prevent them we should avoid mutability and prefer narrower scope for variables.\nSummary\nFor many reasons, we should prefer to define variables for the closest possible scope. Also, we prefer val over var also for local variables. We should always be aware of the fact that variables are captured in lambdas. These simple rules can save us a lot of trouble.\n"},"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 3 Eliminate platform types as soon as possible.html","title":"Item 3 Eliminate Platform Types As Soon As Possible","keywords":"","body":"The null-safety introduced by Kotlin is amazing. Java was known in the community from Null-Pointer Exceptions (NPE), and Kotlin’s safety mechanisms make them rare or eliminate them entirely. Although one thing that cannot be secured completely is a connection between a language that does not have solid null-safety - like Java or C - and Kotlin. Imagine that we use a Java method that declares String as a return type. What type should it be in Kotlin?\nIf it is annotated with the @Nullable annotation then we assume that it is nullable and we interpret it as a String?. If it is annotated with @NotNull then we trust this annotation and we type it as String. Though, what if this return type is not annotated with either of those annotations?\n// Java \npublic class JavaTest {\n    public String giveName() { \n          // ...\n    }\n}\n\nWe might say that then we should treat such a type as nullable. This would be a safe approach since in Java everything is nullable. However, we often know that something is not null so we would end up using the not-null assertion !! in many places all around our code.\nThe real problem would be when we would need to take generic types from Java. Imagine that a Java API returns a List that is not annotated at all. If Kotlin would assume nullable types by default, and we would know that this list and those users are not null, we would need to not only assert the whole list but also filter nulls:\n// Java \npublic class UserRepo {\n        public List getUsers() { \n          //*** \n    }\n}\n\n// Kotlin \nval users: List = UserRepo().users!!.filterNotNull()\n\nWhat if a function would return a List> instead?\nGets complicated:\nval users: List> = UserRepo().groupedUsers!!.map { it!!.filterNotNull() }\n\nLists at least have functions like map and filterNotNull. In other\ngeneric types, nullability would be an even bigger problem. This is why instead of being treated as nullable by default, a type that comes from Java and has unknown nullability is a special type in Kotlin. It is called a platform type.\nPlatform type - a type that comes from another language and has unknown nullability.\nPlatform types are notated with a single exclamation mark ! after the type name, such as String!. Though this notation cannot be used in a code. Platform types are non-denotable, meaning that one cannot write them down explicitly in the language. When a platform value is assigned to a Kotlin variable or property, it can be inferred but it cannot be explicitly set. Instead, we can choose the type that we expect: Either a nullable or a non-null type.\n// Java \npublic class UserRepo {\n    public User getUser() {\n            //...\n    } \n}\n\n// Kotlin \nval repo = UserRepo() \nval user1 = repo.user // Type of user1 is User! \nval user2: User = repo.user // Type of user2 is User \nval user3: User? = repo.user // Type of user3 is User?\n\nThanks to this fact, getting generic types from Java is not problematic:\nval users: List = UserRepo().users \nval users: List> = UserRepo().groupedUsers\n\nThe problem is that is still dangerous because something we assumed to be not-null might be null. This is why for safety reasons I always suggest to be very conscientious of when we get platform types from Java. Remember that even if a function does not return null now, that doesn’t mean that it won’t change in the future. If its designer hasn’t specified it by an annotation or by describing it in a comment, they can introduce this behavior without changing any contract.\nIf you have some control over Java code that needs to interoperate with Kotlin, introduce @Nullable and @NotNull annotations wherever possible.\n// Java \nimport org.jetbrains.annotations.NotNull; \npublic class UserRepo {\n        public @NotNull User getUser() {\n                //...\n    } \n}\n\nThis is one of the most important steps when we want to support Kotlin developers well (and it’s also important information for Java developers). Annotating many exposed types was one of the most important changes that were introduced into the Android API after Kotlin became a first-class citizen. This made the Android API much more Kotlin-friendly.\nNote that many different kinds of annotations are supported, including those by:\n\nJetBrains (@Nullable and @NotNull from org.jetbrains.annotations)\n\nAndroid (@Nullable and @NonNull from androidx.annotation as well as from com.android.annotations and from the support library android.support.annotations)\n\nJSR-305 (@Nullable,@CheckForNull and @Nonnull from javax.annotation)\n\nJavaX (@Nullable, @CheckForNull, @Nonnull from javax.annotation)\n\nFindBugs (@Nullable, @CheckForNull, @PossiblyNull and @NonNull from edu.umd.cs.findbugs.annotations)\n\nReactiveX (@Nullable and @NonNull from io.reactivex.annotations)\n\nEclipse (@Nullable and @NonNull from org.eclipse.jdt.annotation)\n\nLombok (@NonNull from lombok)\n\n\nAlternatively, you can specify in Java that all types should be Notnull by default using JSR 305’s @ParametersAreNonnullByDefault annotation.\nThere is something we can do in our Kotlin code as well. My recommendation for safety reasons is to eliminate these platform types as soon as possible. To understand why, think about the difference between how statedType and platformType functions behave in this example:\n// Java \npublic class JavaClass {\n        public String getValue() {\n                return null;\n    } \n}\n\n// Kotlin \nfun statedType() {\n\n        val value: String = JavaClass().value\n\n        //...\n\n        println(value.length) \n}\n\nfun platformType() { \n      val value = JavaClass().value \n      //...\n      println(value.length) \n}\n\nIn both cases, a developer assumed that getValue will not return null and he or she was wrong. This results in an NPE in both cases, but there’s a difference in where that error happens.\nIn statedType the NPE will be thrown in the same line where we get the value from Java. It would be absolutely clear that we wrongly assumed a not-null type and we got null. We would just need to change it and adjust the rest of our code to this change.\nIn platformType the NPE will be thrown when we use this value as not-nullable. Possibly from a middle of some more complex expression. Variable typed as a platform type can be treated both as nullable and not-nullable. Such variable might be used few times safely, and then unsafely and throw NPE then. When we use such properties, typing system do not protect us. It is a similar situation as in Java, but in Koltin we do not expect that we might have NPE just from using an object. It is very likely that sooner or later someone will use it unsafely, and then we will end up with a runtime exception and its cause might be not so easy to find.\n// Java \npublic class JavaClass {\n        public String getValue() {\n                return null;\n    } \n}\n\n// Kotlin \nfun platformType() {\n        val value = JavaClass().value\n        //...\n        println(value.length) // NPE \n}\n\nfun statedType() { \n      val value: String = JavaClass().value // NPE \n      //...\n      println(value.length) \n}\n\nWhat is even more dangerous, platform type might be propagated further. For instance, we might expose a platform type as a part of our interface:\ninterface UserRepo { \n    fun getUserName() = JavaClass().value \n}\n\nIn this case, methods inferred type is a platform type. This means that anyone can still decide if it is nullable or not. One might choose to treat it as nullable in a definition site, and as a non-nullable in the use-site:\nclass RepoImpl: UserRepo {\n   override fun getUserName(): String? {\n       return null\n   }\n}\n\nfun main() {\n   val repo: UserRepo = RepoImpl()\n   val text: String = repo.getUserName() // NPE in runtime\n   print(\"User name length is ${text.length}\")\n}\n\nPropagating a platform type is a recipe for disaster. They are problematic, and for safety reasons, we should always eliminate them as soon as possible. In this case, IDEA IntelliJ helps us with a warning:\n\nSummary\nTypes that come from another language and has unknown nullability are known as platform types. Since they are dangerous, we should eliminate them as soon as possible, and do not let them propagate. It is also good to specify types using annotations that specify nullability on exposed Java constructors, methods and fields. It is precious information both for Java and Kotlin developers using those elements.\n"},"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 4 Do not expose inferred types.html","title":"Item 4 Do Not Expose Inferred Types","keywords":"","body":"Kotlin’s type inference is one of the most popular Kotlin features in the JVM world. So popular that Java 10 introduced type inference as well (limited comparing to Kotlin). Though, there are some dangers in using this feature. Above all, we need to remember that the inferred type of an assignment is the exact type of the right side, and not a superclass or interface:\nopen class Animal\nclass Zebra: Animal()\n\nfun main() {\n   var animal = Zebra()\n   animal = Animal() // Error: Type mismatch\n}\n\nIn most cases, this is not a problem. When we have too restrictive type inferred, we just need to specify it and our problem is solved:\nopen class Animal\nclass Zebra: Animal()\n\nfun main() {\n   var animal: Animal = Zebra()\n   animal = Animal()\n}\n\nThough, there is no such comfort when we don’t control a library or another module. In such cases, inferred type exposition can be really dangerous. Let’s see an example. \nLet’s say that you have the following interface used to represent car factories:\n1 interface CarFactory {\n2    fun produce(): Car\n3 }\n\nThere is also a default car used if nothing else was specified:\n1 val DEFAULT_CAR: Car = Fiat126P()\n\nIt is produced in most factories, so you made it default. You omitted the type because you decided that DEFAULT_CAR is a Car anyway:\n1 interface CarFactory {\n2    fun produce() = DEFAULT_CAR\n3 }\n\nSimilarly, someone later looked at DEFAULT_CAR and decided that its type can be inferred:\n1 val DEFAULT_CAR = Fiat126P()\n\nNow, all your factories can only produce Fiat126P. Not good. If you defined this interface yourself, this problem will be probably caught soon and easily fixed. Though, if it is a part of the external API, you might be informed first by angry users.\nExcept that, the return type is important information when someone does not know API well, and so for the sake of readability, we should make it explicit especially in parts of our API visible from outside (so exposed API). \nSummary\nThe general rule is that if we are not sure about the type, we should specify it. It is important information and we should not hide it (Item 14: Specify the variable type when it is not clear). Additionally for the sake of safety, in an external API, we should always specify types. We cannot let them be changed by accident. Inferred types can be too restrictive or can too easily change when our project evolves.\n"},"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 5 Specify your expectations on arguments and state.html","title":"Item 5 Specify Your Expectations On Arguments And State","keywords":"","body":"Item 5: Specify your expectations on arguments and state\nWhen you have expectations, declare them as soon as possible. We do that in Kotlin mainly using:\n\nrequire block - a universal way to specify expectations on arguments.\ncheck block - a universal way to specify expectations on the state.\nassert block - a universal way to check if something is true. Such checks on the JVM will be evaluated only on the testing mode.\nElvis operator with return or throw.\n\nHere is an example using those mechanisms:\n// Part of Stack\nfun pop(num: Int = 1): List {\n   require(num \nSpecifying experiences this way does not free us from the necessity to specify those expectations in the documentation, but it is really helpful anyway. Such declarative checks have many advantages:\n\nExpectations are visible even to those programmers who are not reading the documentation.\nIf they are not satisfied, the function throws an exception instead of leading to unexpected behavior. It is important that these exceptions are thrown before the state is modified and so we will not have a situation where only some modifications are applied and others are not. Such situations are dangerous and hard to manage4. Thanks to assertive checks, errors are harder to miss and our state is more stable.\nCode is to some degree self-checking. There is less of a need to be unit-tested when these conditions are checked in the code.\nAll checks listed above work with smart-casting, so thanks to them there is less casting required.\n\nLet’s talk about different kinds of checks, and why we need them. Starting from the most popular one: the arguments check.\nArguments\nWhen you define a function with arguments, it is not uncommon to have some expectations on those arguments that cannot be expressed using the type system. Just take a look at a few examples:\n\nWhen you calculate the factorial of a number, you might require this number to be a positive integer.\nWhen you look for clusters, you might require a list of points to not be empty.\nWhen you send an email to a user you might require that user to have an email, and this value to be a correct email address (assuming that user should check email correctness before using this function).\n\nThe most universal and direct Kotlin way to state those requirements is using the require function that checks this requirement and throws an exception if it is not satisfied:\nfun factorial(n: Int): Long {\n   require(n >= 0)\n   return if (n ): List {\n   require(points.isNotEmpty())\n   //...\n}\n\nfun sendEmail(user: User, message: String) {\n   requireNotNull(user.email)\n   require(isValidEmail(user.email))\n   //...\n}\n\nNotice that these requirements are highly visible thanks to the fact they are declared at the very beginning of the functions. This makes them clear for the user reading those functions (though the requirements should be stated in documentation as well because not everyone reads function bodies).\nThose expectations cannot be ignored, because the require function throws an\nIllegalArgumentException when the predicate is not satisfied. When such a block is placed at the beginning of the function we know that if an argument is incorrect, the function will stop immediately and the user won’t miss it. The exception will be clear in opposition to the potentially strange result that might propagate far until it fails. In other words, when we properly specify our expectations on arguments at the beginning of the function, we can then assume that those expectations will be satisfied.\nWe can also specify a lazy message for this exception in a lambda expression after the call:\nfun factorial(n: Int): Long {\n   require(n >= 0) { \"Cannot calculate factorial of $n \" +\n\"because it is smaller than 0\" }\n   return if (n \nThe require function is used when we specify requirements on arguments.\nAnother common case is when we have expectations on the current state, and in such a case, we can use the check function instead.\nState\nIt is not uncommon that we only allow using some functions in concrete conditions. A few common examples:\n\nSome functions might need an object to be initialized first.\nActions might be allowed only if the user is logged in.\nFunctions might require an object to be open.\n\nThe standard way to check if those expectations on the state are satisfied is to use the check function:\nfun speak(text: String) {\n   check(isInitialized)\n   //...\n}\n\nfun getUserInfo(): UserInfo {\n   checkNotNull(token)\n   //...\n}\n\nfun next(): T {\n   check(isOpen)\n   //...\n}\n\nThe check function works similarly to require, but it throws an IllegalStateException when the stated expectation is not met. It checks if a state is correct. The exception message can be customized using a lazy message, just like with require. When the expectation is on the whole function, we place it at the beginning, generally after the require blocks. Although some state expectations are local, and check can be used later.\nWe use such checks especially when we suspect that a user might break our contract and call the function when it should not be called. Instead of trusting that they won’t do that, it is better to check and throw an appropriate exception. We might also use it when we do not trust that our own implementation handles the state correctly. Although for such cases, when we are checking mainly for the sake of testing our own implementation, we have another function called assert.\nAssertions\nThere are things we know to be true when a function is implemented correctly. For instance, when a function is asked to return 10 elements we might expect that it will return 10 elements. This is something we expect to be true, but it doesn’t mean we are always right. We all make mistakes. Maybe we made a mistake in the implementation. Maybe someone changed a function we used and our function does not work properly anymore. Maybe our function does not work correctly anymore because it was refactored. For all those problems the most universal solution is that we should write unit tests that check if our expectations match reality:\nclass StackTest {\n\n   @Test\n   fun `Stack pops correct number of elements`() {\n       val stack = Stack(20) { it }\n       val ret = stack.pop(10)\n       assertEquals(10, ret.size)\n   }\n\n   //...\n}\n\nUnit tests should be our most basic way to check implementation correctness but notice here that the fact that popped list size matches the desired one is rather universal to this function. It would be useful to add such a check in nearly every pop call. Having only a single check for this single use is rather naive because there might be some edge-cases. A better solution is to include the assertion in the function:\nfun pop(num: Int = 1): List {\n   //...\n   assert(ret.size == num)\n   return ret\n}\n\nSuch conditions are currently enabled only in Kotlin/JVM, and they are not checked unless they are enabled using the -ea JVM option. We should rather treat them as part of unit tests - they check if our code works as expected. By default, they are not throwing any errors in production. They are enabled by default only when we run tests. This is generally desired because if we made an error, we might rather hope that the user won’t notice. If this is a serious error that is probable and might have significant consequences, use check instead. The main advantages of having assert checks in functions instead of in unit tests are:\n\nAssertions make code self-checking and lead to more effective testing.\nExpectations are checked for every real use-case instead of for concrete cases.\nWe can use them to check something at the exact point of execution.\nWe make code fail early, closer to the actual problem. Thanks to that we can also easily find where and when the unexpected behavior started.\n\nJust remember that for them to be used, we still need to write unit tests. In a standard application run, assert will not throw any exceptions.\nSuch assertions are a common practice in Python. Not so much in Java. In Kotlin feel free to use them to make your code more reliable.\nNullability and smart casting\nBoth require and check have Kotlin contracts that state that when the function returns, its predicate is true after this check.\npublic inline fun require(value: Boolean): Unit {\n   contract {\n       returns() implies value\n   }\n   require(value) { \"Failed requirement.\" }\n}\n\nEverything that is checked in those blocks will be treated as true later in the same function. This works well with smart casting because once we check if something is true, the compiler will treat it so. In the below example we require a person’s outfit to be a Dress. After that, assuming that the outfit property is final, it will be smart cast to Dress.\nfun changeDress(person: Person) {\n   require(person.outfit is Dress)\n   val dress: Dress = person.outfit\n   //...\n}\n\nThis characteristic is especially useful when we check if something is null:\nclass Person(val email: String?)\n\nfun sendEmail(person: Person, message: String) {\n   require(person.email != null)\n   val email: String = person.email\n   //...\n}\n\nFor such cases, we even have special functions: requireNotNull and checkNotNull. They both have the capability to smart cast variables, and they can also be used as expressions to “unpack” it:\nclass Person(val email: String?)\nfun validateEmail(email: String) { /*...*/ }\n\nfun sendEmail(person: Person, text: String) {\n   val email = requireNotNull(person.email)\n   validateEmail(email)\n   //...\n}\n\nfun sendEmail(person: Person, text: String) {\n   requireNotNull(person.email)\n   validateEmail(person.email)\n   //...\n}\n\nFor nullability, it is also popular to use the Elvis operator with throw or return on the right side. Such a structure is also highly readable and at the same time, it gives us more flexibility in deciding what behavior we want to achieve. First of all, we can easily stop a function using return instead of throwing an error:\nfun sendEmail(person: Person, text: String) {\n   val email: String = person.email ?: return\n   //...\n}\n\nIf we need to make more than one action if a property is incorrectly null, we can always add them by wrapping return or throw into the run function. Such a capability might be useful if we would need to log why the function was stopped:\nfun sendEmail(person: Person, text: String) {\n   val email: String = person.email ?: run {\n       log(\"Email not sent, no email address\")\n       return\n   }\n   //...\n}\n\nThe Elvis operator with return or throw is a popular and idiomatic way to specify what should happen in case of variable nullability and we should not hesitate to use it. Again, if it is possible, keep such checks at the beginning of the function to make them visible and clear.\nSummary\nSpecify your expectations to:\n\nMake them more visible.\nProtect your application stability.\nProtect your code correctness.\nSmart cast variables.\n\nFour main mechanisms we use for that are:\n\nrequire block - a universal way to specify expectations on arguments.\ncheck block - a universal way to specify expectations on the state.\nassert block - a universal way to test in testing mode if something is true.\nElvis operator with return or throw.\n\nYou might also use throw to throw a different error.\n"},"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 6 Prefer standard errors to custom ones.html","title":"Item 6 Prefer Standard Errors To Custom Ones","keywords":"","body":"Item 6: Prefer standard errors to custom ones\nFunctions require, check and assert cover the most common Kotlin errors, but there are also other kinds of unexpected situations we need to indicate. For instance, when you implement a library to parse the JSON format, it is reasonable to throw a JsonParsingException when the provided JSON file does not have the correct format:\ninline fun  String.readObject(): T {\n   //...\n   if (incorrectSign) {\n       throw JsonParsingException()\n   }\n   //...\n   return result\n}\n\nHere we used a custom error because there is no suitable error in the standard library to indicate that situation. Whenever possible, you should use exceptions from the standard library instead of defining your own. Such exceptions are known by developers and they should be reused. Reusing known elements with well-established contracts makes your API easier to learn and to understand. Here is the list of some of the most common exceptions you can use:\n\nIllegalArgumentException and IllegalStateException that we throw using require and check as described in Item 5: Specify your expectations on arguments and state.\nIndexOutOfBoundsException - Indicate that the index parameter value is out of range. Used especially by collections and arrays. It is thrown for instance by ArrayList.get(Int).\nConcurrentModificationException - Indicate that concurrent modification is prohibited and yet it has been detected. \nUnsupportedOperationException - Indicate that the declared method is not supported by the object. Such a situation should be avoided and when a method is not supported, it should not be present in the class. \nNoSuchElementException - Indicate that the element being requested does not exist. Used for instance when we implement Iterable and the client asks for next when there are no more elements.\n\n"},"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 7 Prefer null or Failure result when the lack of result is possible.html","title":"Item 7 Prefer Null Or Failure Result When The Lack Of Result Is Possible","keywords":"","body":"Item 7: Prefer null or Failure result when the lack of result is possible\nSometimes, a function cannot produce its desired result. A few common examples are:\n\nWe try to get data from some server, but there is a problem with our internet connection\nWe try to get the first element that matches some criteria, but there is no such element in our list\nWe try to parse an object from the text, but this text is malformatted\n\nThere are two main mechanisms to handle such situations:\n\nReturn a null or a sealed class indicating failure (that is often named Failure)\nThrow an exception\n\nThere is an important difference between those two. Exceptions should not be used as a standard way to pass information. All exceptions indicate incorrect, special situations and should be treated this way. We should use exceptions only for exceptional conditions(Effective Java by Joshua Bloch). Main reasons for that are:\n\nThe way exceptions propagate is less readable for most programmers and might be easily missed in the code.\nIn Kotlin all exceptions are unchecked. Users are not forced or even encouraged to handle them. They are often not well documented. They are not really visible when we use an API. \nBecause exceptions are designed for exceptional circumstances, there is little incentive for JVM implementers to make them as fast as explicit tests.\nPlacing code inside a try-catch block inhibits certain optimizations that the compiler might otherwise perform.\n\nOn the other hand, null or Failure are both perfect to indicate an expected error. They are explicit, efficient, and can be handled in idiomatic ways. This is why the rule is that we should prefer returning null or Failure when an error is expected, and throwing an exception when an error is not expected. Here are some examples:\ninline fun  String.readObjectOrNull(): T? {\n   //...\n   if (incorrectSign) {\n       return null\n   }\n   //...\n   return result\n}\n\ninline fun  String.readObject(): Result {\n   //...\n   if (incorrectSign) {\n       return Failure(JsonParsingException())\n   }\n   //...\n   return Success(result)\n}\n\nsealed class Result\nclass Success(val result: T) : Result()\nclass Failure(val throwable: Throwable) : Result()\n\nclass JsonParsingException : Exception()\n\nErrors indicated this way are easier to handle and harder to miss. When we choose to use null, clients handling such a value can choose from the variety of null-safety supporting features like a safe-call or the Elvis operator:\nval age = userText.readObjectOrNull()?.age ?: -1\n\nWhen we choose to return a union type like Result, the user will be able to handle it using the when-expression:\nval personResult = userText.readObject()\nval age = when(personResult) {\n    is Success -> personResult.value.age\n    is Failure -> -1\n}\n\nUsing such error handling is not only more efficient than the try-catch block but often also easier to use and more explicit. An exception can be missed and can stop our whole application. Whereas a null value or a sealed result class needs to be explicitly handled, but it won’t interrupt the flow of the application. \nComparing nullable result and a sealed result class, we should prefer the latter when we need to pass additional information in case of failure, and null otherwise. Remember that Failure can hold any data you need. \nIt is common to have two variants of functions - one expecting that failure can occur and one treating it as an unexpected situation. A good example is that List has both:\n\nget which is used when we expect an element to be at the given position, and if it is not there, the function throws IndexOutOfBoundsException.\ngetOrNull, which is used when we suppose that we might ask for an element out of range, and if that happens, we’ll get null. \n\nIt also support other options, like getOrDefault, that is useful in some cases but in general might be easily replaced with getOrNull and Elvis operator ?:. \nThis is a good practice because if developers know they are taking an element safely, they should not be forced to handle a nullable value, and at the same time, if they have any doubts, they should use getOrNull and handle the lack of value properly.\n"},"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 8 Handle nulls properly.html","title":"Item 8 Handle Nulls Properly","keywords":"","body":"Item 8: Handle nulls properly\nnull means a lack of value. For property, it might mean that the value was not set or that it was removed. When a function returns null it might have a different meaning depending on the function:\n\nString.toIntOrNull() returns null when String cannot be correctly parsed to Int\nIterable.firstOrNull(() -> Boolean) returns null when there are no elements matching predicate from the argument. \n\nIn these and all other cases the meaning of null should be as clear as possible. This is because nullable values must be handled, and it is the API user (programmer using API element) who needs to decide how it is to be handled. \nval printer: Printer? = getPrinter()\nprinter.print() // Compilation Error\n\nprinter?.print() // Safe call\nif (printer != null) printer.print() // Smart casting\nprinter!!.print() // Not-null assertion\n\nIn general, there are 3 ways of how nullable types can be handled. We can:\n\nHandling nullability safely using safe call ?., smart casting, Elvis operator, etc.\nThrow an error\nRefactor this function or property so that it won’t be nullable\n\nLet’s describe them one by one.\nHandling nulls safely\nAs mentioned before, the two safest and most popular ways to handle nulls is by using safe call and smart casting:\nprinter?.print() // Safe call\nif (printer != null) printer.print() // Smart casting\n\nIn both those cases, the function print will be called only when printer is not null. This is the safest option from the application user point of view. It is also really comfortable for programmers. No wonder why this is generally the most popular way how we handle nullable values. \nSupport for handling nullable variables in Kotlin is much wider than in other languages. One popular practice is to use the Elvis operator which provides a default value for a nullable type. It allows any expression including return and throw on its right side:\nval printerName1 = printer?.name ?: \"Unnamed\"\nval printerName2 = printer?.name ?: return\nval printerName3 = printer?.name ?: \n    throw Error(\"Printer must be named\")\n\nMany objects have additional support. For instance, as it is common to ask for an empty collection instead of null, there is orEmpty extension function on Collection? returning not-nullable List. There is also a similar function for String?.\nSmart casting is also supported by Kotlin’s contracts feature that lets us smart cast in a function:\nprintln(\"What is your name?\")\nval name = readLine()\nif (!name.isNullOrBlank()) {\n   println(\"Hello ${name.toUpperCase()}\")\n}\n\nval news: List? = getNews()\nif (!news.isNullOrEmpty()) {\n   news.forEach { notifyUser(it) }\n}\n\nAll those options should be known to Kotlin developers, and they all provide useful ways to handle nullability properly. \nDefensive and offensive programming\nHandling all possibilities in a correct way - like here not using printer when it is null - is an implementation of defensive programming. Defensive programming is a blanket term for various practices increasing code stability once the code is in production, often by defending against the currently impossible. It is the best way when there is a correct way to handle all possible situations. It wouldn’t be correct if we would expect that printer is not null and should be used. In such a case it would be impossible to handle such a situation safely, and we should instead use a technique called offensive programming. The idea behind offensive programming is that in case of an unexpected situation we complain about it loudly to inform the developer who led to such situation, and to force him or her to correct it. A direct implementation of this idea is require, checkand assert presented in Item 5: Specify your expectations on arguments and state. It is important to understand that even though those two modes seem like being in conflict, they are not at all. They are more like yin and yang. Those are different modes both needed in our programs for the sake of safety, and we need to understand them both and use them appropriately. \nThrow an error\nOne problem with safe handling is that if printer could sometimes be null, we will not be informed about it but instead print won’t be called. This way we might have hidden important information. If we are expecting printer to never be null, we will be surprised when the print method isn’t called. This can lead to errors that are really hard to find. When we have a strong expectation about something that isn’t met, it is better to throw an error to inform the programmer about the unexpected situation. It can be done using throw, as well as by using the not-null assertion !!, requireNotNull, checkNotNull, or other error throwing functions:\nfun process(user: User) {\n    requireNotNull(user.name)\n    val context = checkNotNull(context)\n    val networkService = \n        getNetworkService(context) ?: \n        throw NoInternetConnection()\n    networkService.getData { data, userData ->\n        show(data!!, userData!!)\n    }\n}\n\nThe problems with the not-null assertion !!\nThe simplest way to handle nullable is by using not-null assertion !!. It is conceptually similar to what happens in Java - we think something is not null and if we are wrong, an NPE is thrown. Not-null assertion !! is a lazy option. It throws a generic exception that explains nothing. It is also short and simple, which also makes it easy to abuse or misuse. Not-null assertion !! is often used in situations where type is nullable but null is not expected. The problem is that even if it currently is not expected, it almost always can be in the future, and this operator only quietly hides the nullability.\nA very simple example is a function looking for the largest among 4 arguments9. Let’s say that we decided to implement it by packing all those arguments into a list and then using max to find the biggest one. The problem is that it returns nullable because it returns nullwhen the collection is empty. Though developer knowing that this list cannot be empty will likely use not-null assertion !!:\nfun largestOf(a: Int, b: Int, c: Int, d: Int): Int =\n   listOf(a, b, c, d).max()!!\n\nAs it was shown to me by Márton Braun who is a reviewer of this book, even in such a simple function not-null assertion !! can lead to NPE. Someone might need to refactor this function to accept any number of arguments and miss the fact that collection cannot be empty:\nfun largestOf(vararg nums: Int): Int =\n   nums.max()!!\n\nlargestOf() // NPE\n\nInformation about nullability was silenced and it can be easily missed when it might be important. Similarly with variables. Let’s say that you have a variable that needs to be set later but it will surely be set before the first use. Setting it to null and using a not-null assertion !! is not a good option:\nclass UserControllerTest {\n\n    private var dao: UserDao? = null\n    private var controller: UserController? = null\n\n    @BeforeEach\n    fun init() {\n        dao = mockk()\n        controller = UserController(dao!!)\n    }\n\n    @Test\n    fun test() {\n        controller!!.doSomething()\n    }\n\n}\n\nIt is not only annoying that we need to unpack those properties every time, but we also block the possibility for those properties to actually have a meaningful null in the future. Later in this item, we will see that the correct way to handle such situations is to use lateinit or Delegates.notNull.\nNobody can predict how code will evolve in the future, and if you use not-null assertion !! or explicit error throw, you should assume that it will throw an error one day. Exceptions are thrown to indicate something unexpected and incorrect (Item 7: Prefer null or a sealed result class result when the lack of result is possible). However, explicit errors say much more than generic NPE and they should be nearly always preferred.\nRare cases where not-null assertion !! does make sense are mainly a result of common interoperability with libraries in which nullability is not expressed correctly. When you interact with an API properly designed for Kotlin, this shouldn’t be a norm.\nIn general we should avoid using the not-null assertion !!. This suggestion is rather widely approved by our community. Many teams have the policy to block it. Some set the Detekt static analyzer to throw an error whenever it is used. I think such an approach is too extreme, but I do agree that it often is a code smell. Seems like the way this operator looks like is no coincidence. !! seems to be screaming “Be careful” or “There is something wrong here”.\nAvoiding meaningless nullability\nNullability is a cost as it needs to be handled properly and we prefer avoiding nullability when it is not needed. null might pass an important message, but we should avoid situations where it would seem meaningless to other developers. They would then be tempted to use the unsafe not-null assertion !! or forced to repeat generic safe handling that only clutters the code. We should avoid nullability that does not make sense for a client. The most important ways for that are:\n\nClasses can provide variants of functions where the result is expected and in which lack of value is considered and nullable result or a sealed result class is returned. Simple example is get and getOrNull on List. Those are explained in detail in Item 7: Prefer null or a sealed result class result when the lack of result is possible.\nUse lateinit property or notNull delegate when a value is surely set before use but later than during class creation.\nDo not return null instead of an empty collection. When we deal with a collection, like List? or Set?, null has a different meaning than an empty collection. It means that no collection is present. To indicate a lack of elements, use an empty collection. \nNullable enum and None enum value are two different messages. null is a special message that needs to be handled separately, but it is not present in the enum definition and so it can be added to any use-side you want.\n\nLet’s talk about lateinit property and notNull delegate as they deserve a deeper explanation. \nlateinit property and notNull delegate\nIt is not uncommon in projects to have properties that cannot be initialized during class creation, but that will surely be initialized before the first use. A typical example is when the property is set-up in a function called before all others, like in @BeforeEach in JUnit 5:\nclass UserControllerTest {\n\n    private var dao: UserDao? = null\n    private var controller: UserController? = null\n\n    @BeforeEach\n    fun init() {\n        dao = mockk()\n        controller = UserController(dao!!)\n    }\n\n    @Test\n    fun test() {\n        controller!!.doSomething()\n    }\n\n}\n\nCasting those properties from nullable to not null whenever we need to use them is highly undesirable. It is also meaningless as we expect that those values are set before tests. The correct solution to this problem is to use lateinit modifier that lets us initialize properties later:\nclass UserControllerTest {\n   private lateinit var dao: UserDao\n   private lateinit var controller: UserController\n\n   @BeforeEach\n   fun init() {\n       dao = mockk()\n       controller = UserController(dao)\n   }\n\n   @Test\n   fun test() {\n       controller.doSomething()\n   }\n}\n\nThe cost of lateinit is that if we are wrong and we try to get value before it is initialized, then an exception will be thrown. Sounds scary but it is actually desired - we should use lateinit only when we are sure that it will be initialized before the first use. If we are wrong, we want to be informed about it. The main differences between lateinit and a nullable are:\n\nWe do not need to “unpack” property every time to not-nullable\nWe can easily make it nullable in the future if we need to use null to indicate something meaningful\nOnce property is initialized, it cannot get back to an uninitialized state\n\nlateinit is a good practice when we are sure that a property will be initialized before the first use. We deal with such a situation mainly when classes have their lifecycle and we set properties in one of the first invoked methods to use it on the later ones. For instance when we set objects in onCreate in an Android Activity, viewDidAppear in an iOS UIViewController, or componentDidMount in a React React.Component.\nOne case in which lateinit cannot be used is when we need to initialize a property with a type that, on JVM, associates to a primitive, like Int, Long, Double or Boolean. For such cases we have to use Delegates.notNull which is slightly slower, but supports those types:\nclass DoctorActivity: Activity() {\n   private var doctorId: Int by Delegates.notNull()\n   private var fromNotification: Boolean by \n       Delegates.notNull()\n\n   override fun onCreate(savedInstanceState: Bundle?) {\n       super.onCreate(savedInstanceState)\n       doctorId = intent.extras.getInt(DOCTOR_ID_ARG)\n       fromNotification = intent.extras\n          .getBoolean(FROM_NOTIFICATION_ARG)\n   }\n}\n\nThese kinds of cases are often replaced with property delegates, like in the above example where we read the argument in onCreate, we could instead use a delegate that initializes those properties lazily:\nclass DoctorActivity: Activity() {\n   private var doctorId: Int by arg(DOCTOR_ID_ARG)\n   private var fromNotification: Boolean by \n       arg(FROM_NOTIFICATION_ARG)\n}\n\nThe property delegation pattern is described in detail in Item 21: Use property delegation to extract common property patterns. One reason why they are so popular is that they help us safely avoid nullability.\n"},"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 9 Close resources with use.html","title":"Item 9 Close Resources With Use","keywords":"","body":"Item 9: Close resources with use\nThere are resources that cannot be closed automatically, and we need to invoke the close method once we do not need them anymore. The Java standard library, that we use in Kotlin/JVM, contains a lot of these resources, such as:\n\nInputStream and OutputStream,\njava.sql.Connection,\njava.io.Reader (FileReader, BufferedReader, CSSParser),\njava.new.Socket and java.util.Scanner.\n\nAll these resources implement the Closeable interface, which extends AutoCloseable. \nThe problem is that in all these cases, we need to be sure that we invoke the close method when we no longer need the resource because these resources are rather expensive and they aren’t easily closed by themselves (the Garbage Collector will eventually handle it if we do not keep any reference to this resource, but it will take some time). Therefore, to be sure that we will not miss closing them, we traditionally wrapped such resources in a try-finally block and called close there:\nfun countCharactersInFile(path: String): Int {\n   val reader = BufferedReader(FileReader(path))\n   try {\n       return reader.lineSequence().sumBy { it.length }\n   } finally {\n       reader.close()\n   }\n}\n\nSuch a structure is complicated and incorrect. It is incorrect because close can throw an error, and such an error will not be caught. Also, if we had errors from both the body of the try and from finally blocks, only one would be properly propagated. The behavior we should expect is for the information about the new error to be added to the previous one. The proper implementation of this is long and complicated, but it is also common and so it has been extracted into the usefunction from the standard library. It should be used to properly close resources and handle exceptions. This function can be used on any Closeable object:\nfun countCharactersInFile(path: String): Int {\n   val reader = BufferedReader(FileReader(path))\n   reader.use {\n       return reader.lineSequence().sumBy { it.length }\n   }\n}\n\nReceiver (reader in this case) is also passed as an argument to the lambda, so the syntax can be shortened:\nfun countCharactersInFile(path: String): Int {\n   BufferedReader(FileReader(path)).use { reader ->\n       return reader.lineSequence().sumBy { it.length }\n   }\n}\n\nAs this support is often needed for files, and as it is common to read files line-by-line, there is also a useLines function in the Kotlin Standard Library that gives us a sequence of lines (String) and closes the underlying reader once the processing is complete:\nfun countCharactersInFile(path: String): Int {\n   File(path).useLines { lines ->\n       return lines.sumBy { it.length }\n   }\n}\n\nThis is a proper way to process even large files as this sequence will read lines on-demand and does not hold more than one line at a time in memory. The cost is that this sequence can be used only once. If you need to iterate over the lines of the file more than once, you need to open it more than once. The useLines function can be also used as an expression:\nfun countCharactersInFile(path: String): Int =\n   File(path).useLines { lines -> \n       lines.sumBy { it.length } \n   }\n\nAll the above implementations use sequences to operate on the file and it is the correct way to do it. Thanks to that we can always read only one line instead of loading the content of the whole file. More about it in the item Item 49: Prefer Sequence for big collections with more than one processing step.\nSummary\nOperate on objects implementing Closeable or AutoCloseable using use. It is a safe and easy option. When you need to operate on a file, consider useLines that produces a sequence to iterate over the next lines.\n"},"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html":{"url":"Part 1 Good code/Chapter 1 Safety/Item 10 Write unit tests.html","title":"Item 10 Write Unit Tests","keywords":"","body":"Item 10: Write unit tests\nIn this chapter, you’ve seen quite a few ways to make your code safer, but the ultimate way to achieve this is to have different kinds of tests. One kind is checking that our application behaves correctly from the user’s perspective. These kinds of tests are too often the only ones recognized by management as this is generally their primary goal to make the application behave correctly from outside, not internally. These kinds of tests do not even need developers at all. They can be handled by a sufficient number of testers or, what is generally better in the long run, by automatic tests written by test engineers.\nSuch tests are useful for programmers, but they are not sufficient. They do not build proper assurance that concrete elements of our system behave correctly. They also do not provide fast feedback that is useful during development. For that, we need a different kind of tests that is much more useful for developers, and that is written by developers: unit tests. Here is an example unit test checking if our function fib calculating the Fibonacci number at n-th position gives us correct results for the first 5 numbers:\n@Test\nfun `fib works correctly for the first 5 positions`() {\n   assertEquals(1, fib(0))\n   assertEquals(1, fib(1))\n   assertEquals(2, fib(2))\n   assertEquals(3, fib(3))\n   assertEquals(5, fib(4))\n}\n\nWith unit tests, we typically check:\n\nCommon use cases (the happy path) - typical ways we expect the element to be used. Just like in the example above, we test if the function works for a few small numbers.\nCommon error cases or potential problems - Cases that we suppose might not work correctly or that were shown to be problematic in the past. \nEdge-cases and illegal arguments - for Int we might check for really big numbers like Int.MAX_VALUE. For a nullable object, it might be null or object filled with null values. There are no Fibonacci numbers for negative positions, so we might check how this function behaves then. \n\nUnit tests can be really useful during development as they give fast feedback on how the implemented element works. Tests are only ever-accumulating so you can easily check for regression. They can also check cases that are hard to test manually. There is even an approach called Test Driven Development (TDD) in which we write a unit test first and then implementation to satisfy it10. \nThe biggest advantages that result from unit tests are:\n\nWell-tested elements tend to be more reliable. There is also a psychological safety. When elements are well tested, we operate more confidently on them. \nWhen an element is properly tested, we are not afraid to refactor it. As a result, well-tested programs tend to get better and better. On the other hand, in programs that are not tested, developers are scared of touching legacy code because they might accidentally introduce an error without even knowing about it. \nIt is often much faster to check if something works correctly using unit tests rather than checking it manually. A faster feedback-loop makes development faster and more pleasurable11. It also helps reduce the cost of fixing bugs: the quicker you find them, the cheaper it is to fix them.\n\nClearly, there are also disadvantages to unit tests:\n\nIt takes time to write unit tests. Though in the long-term, good unit tests rather save our time as we spend less time debugging and looking for bugs later. We also save a lot of time as running unit tests is much faster than manual testing or other kinds of automated tests. \nWe need to adjust our code to make it testable. Such changes are often hard, but they generally also force developers to use good and well-established architectures. \nIt is hard to write good unit tests. It requires skills and understanding that are orthogonal to the rest of the development. Poorly written unit tests can do more harm than good. Everyone needs to learn how to properly unit-test their code. It is useful to take a course on Software-Testing or Test Driven Development (TDD) first.\n\nThe biggest challenge is to obtain the skills to effectively unit test and to write code that supports unit testing. Experienced Kotlin developers should obtain such skills and learn to unit test at least the important parts of the code. Those are:\n\nComplex functionalities\nParts that will most likely change over time or will be refactored\nBusiness logic\nParts of our public API\nParts that have a tendency to break\nProduction bugs that we fixed\n\nWe do not need to stop there. Tests are an investment in application reliability and long-term maintainability.\nSummary\nThis chapter was started with a reflection that the first priority should be for our programs to behave correctly. It can be supported by using good practices presented in this chapter, but above that, the best way to ensure that our application behaves correctly is to check it by testing, especially unit testing. This is why a responsible chapter about safety needs at least a short section about unit testing. Just like responsible business application requires at least some unit tests.\n"},"Part 1 Good code/Chapter 2 Readability/Introduction.html":{"url":"Part 1 Good code/Chapter 2 Readability/Introduction.html","title":"Introduction","keywords":"","body":"Chapter 2: Readability\n\nAny fool can write code that a computer can understand. Good programmers write code that humans can understand.\n–Martin Fowler, Refactoring: Improving the Design of Existing Code, p. 15\n\nThere is a very common misconception that Kotlin is designed to be concise. It isn’t. There are languages that are much more concise. For instance, the most concise language I know is APL. This is John Conway’s “Game of Life” implemented in APL:\n\nYour first thought is probably “Wow, that’s short”. Then you might realize that you don’t have some of those characters on your keyboard. There are more such languages, for example, here is the same program in J:\n1 life=:[:+/(3 4=/[:+/(,/,\"0/~i:1)|.])*.1,:]\nThese two are really concise languages. This characteristic makes them champions in code golf contests. It also makes them absurdly hard to read. Let’s be honest: even for experienced APL developers (and there are probably only a few of them in the world), it is a challenge to understand what this program does and how it works. \nKotlin never had ambitions to be very concise. It is designed to be readable. It is concise compared to other popular languages, but this comes from the fact that Kotlin eliminates a lot of noise: boilerplate code and repetitive structures. It was done to help developers concentrate on what is important, and thus make Kotlin more readable. \nKotlin allows programmers to design clean and meaningful code and APIs. Its features let us hide or highlight whatever we want. This chapter is about using these tools wisely. This particular chapter serves as an introduction and provides a set of general suggestions. Although it also introduces the concept of readability, which we will refer to in the rest of this book. Especially in Part 2: Abstraction design, where we will dive into topics related to class and function design.\nLet’s start with a bit more abstract item about readability, which will introduce the general problem.\n"},"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html":{"url":"Part 1 Good code/Chapter 2 Readability/Item 11 Design for readability.html","title":"Item 11 Design For Readability","keywords":"","body":"Item 11: Design for readability\nIt is a known observation in programming that developers read code much more than they write it. A common estimate is that for every minute spent writing code, ten minutes are spent reading it (this ratio was popularized by Robert C. Martin in the book Clean Code). If this seems unbelievable, just think about how much time you spend on reading code when you are trying to find an error. I believe that everyone has been in this situation at least once in their career where they’ve been searching for an error for weeks, just to fix it by changing a single line. When we learn how to use a new API, it’s often from reading code. We usually read the code to understand what is the logic or how implementation works. Programming is mostly about reading, not writing. Knowing that it should be clear that we should code with readability in mind.\nReducing cognitive load\nReadability means something different to everyone. However, there are some rules that were formed based on experience or came from cognitive science. Just compare the following two implementations:\n// Implementation A\nif (person != null && person.isAdult) {\n   view.showPerson(person)\n} else {\n   view.showError()\n}\n\n// Implementation B\nperson?.takeIf { it.isAdult }\n   ?.let(view::showPerson)\n   ?: view.showError()\n\nWhich one is better, A or B? Using the naive reasoning, that the one with fewer lines is better, is not a good answer. We could just as well remove the line breaks from the first implementation, and it wouldn’t make it more readable. \nHow readable both constructs are, depends on how fast we can understand each of them. This, in turn, depends a lot on how much our brain is trained to understand each idiom (structure, function, pattern). For a beginner in Kotlin, surely implementation A is way more readable. It uses general idioms (if/else, &&, method calls). Implementation B has idioms that are typical to Kotlin (safe call ?., takeIf, let, Elvis operator ?:, a bounded function reference view::showPerson). Surely, all those idioms are commonly used throughout Kotlin, so they are well known by most experienced Kotlin developers. Still, it is hard to compare them. Kotlin isn’t the first language for most developers, and we have much more experience in general programming than in Kotlin programming. We don’t write code only for experienced developers. The chances are that the junior you hired (after fruitless months of searching for a senior) does not know what let, takeIf, and bounded references are. It is also very likely that they never saw the Elvis operator used this way. That person might spend a whole day puzzling over this single block of code. Additionally, even for experienced Kotlin developers, Kotlin is not the only programming language they use. Many developers reading your code will not be experienced with Kotlin. The brain will always need to spend a bit of time to recognize Kotlin-specific idioms. Even after years with Kotlin, it still takes much less time for me to understand the first implementation. Every less known idiom introduces a bit of complexity and when we analyze them all together in a single statement that we need to comprehend nearly all at once, this complexity grows quickly.\nNotice that implementation A is easier to modify. Let’s say that we need to add additional operation on the if block. In the implementation A adding that is easy. In the implementation B we cannot use function reference anymore. Adding something to the else block in the implementation B is even harder - we need to use some function to be able to hold more than a single expression on the right side of the Elvis operator:\nif (person != null && person.isAdult) {\n   view.showPerson(person)\n   view.hideProgressWithSuccess()\n} else {\n   view.showError()\n   view.hideProgress()\n}\n\nperson?.takeIf { it.isAdult }\n   ?.let {\n       view.showPerson(it)\n       view.hideProgressWithSuccess()\n   } ?: run {\n       view.showError()\n       view.hideProgress()\n   }\n\nDebugging implementation A is also much simpler. No wonder why - debugging tools were made for such basic structures. \nThe general rule is that less common and “creative” structures are generally less flexible and not so well supported. Let’s say for instance that we need to add a third branch to show different error when person is null and different one when he or she is not an adult. On the implementation A using if/else, we can easily change if/else to when using IntelliJ refactorization, and then easily add additional branch. The same change on the code would be painful on the implementation B. It would probably need to be totally rewritten.\nHave you noticed that implementation A and B do not even work the same way? Can you spot the difference? Go back and think about it now. \nThe difference lies in the fact that let returns a result from the lambda expression. This means that if showPerson would return null, then the second implementation would call showError as well! This is definitely not obvious, and it teaches us that when we use less familiar structures, it is easier to fall in unexpected behavior (and not to spot them).\nThe general rule here is that we want to reduce cognitive load. Our brains recognize patterns and based on these patterns they build our understanding of how programs work. When we think about readability we want to shorten this distance. We prefer less code, but also more common structures. We recognize familiar patterns when we see them often enough. We always prefer structures that we are familiar with in other disciplines.\nDo not get extreme\nJust because in the previous example I presented how let can be misused, it does not mean that it should be always avoided. It is a popular idiom reasonably used in a variety of contexts to actually make code better. One popular example is when we have a nullable mutable property and we need to do an operation only if it is not null. Smart casting cannot be used because mutable property can be modified by another thread. One great way to deal with that is to use safe call let:\nclass Person(val name: String)\nvar person: Person? = null\n\nfun printName() {\n    person?.let {\n        print(it.name)\n    }\n}\n\nSuch idiom is popular and widely recognizable. There are many more reasonable cases for let. For instance:\n\nTo move operation after its argument calculation\nTo use it to wrap an object with a decorator\n\nHere are examples showing those two (both additionally use function references):\nstudents\n     .filter { it.result >= 50 }    \n     .joinToString(separator = \"\\n\") { \n        \"${it.name} ${it.surname}, ${it.result}\" \n     }\n     .let(::print)\n\nvar obj = FileInputStream(\"/file.gz\")\n    .let(::BufferedInputStream)\n    .let(::ZipInputStream)\n    .let(::ObjectInputStream)\n    .readObject() as SomeObject\n\nIn all those cases we pay our price - this code is harder to debug and harder to be understood by less experienced Kotlin developers. But we pay for something and it seems like a fair deal. The problem is when we introduce a lot of complexity for no good reason. \nThere will always be discussions when something makes sense and when it does not. Balancing that is an art. It is good though to recognize how different structures introduce complexity or how they clarify things. Especially since when they are used together, the complexity of two structures is generally much more than the sum of their individual complexities. \nConventions\nWe’ve acknowledged that different people have different views of what readability means. We constantly fight over function names, discuss what should be explicit and what implicit, what idioms should we use, and much more. Programming is an art of expressiveness. Still, there are some conventions that need to be understood and remembered. \nWhen one of my workshop groups in San Francisco asked me about the worst thing one can do in Kotlin, I gave them this:\nval abc = \"A\" { \"B\" } and \"C\"\nprint(abc) // ABC\n\nAll we need to make this terrible syntax possible is the following code:\noperator fun String.invoke(f: ()->String): String = \n    this + f()\n\ninfix fun String.and(s: String) = this + s\n\nThis code violates many rules that we will describe later:\n\nIt violates operator meaning - invoke should not be used this way. A String cannot be invoked.\nThe usage of the ‘lambda as the last argument’ convention here is confusing. It is fine to use it after functions, but we should be very careful when we use it for the invoke operator. \nand is clearly a bad name for this infix method. append or plus would be much better. \nWe already have language features for String concatenation and we should use them instead of reinventing the wheel. \n\nBehind each of these suggestions, there is a more general rule that guards good Kotlin style. We will cover the most important ones in this chapter starting with the first item which will focus on overriding operators.\n"},"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html":{"url":"Part 1 Good code/Chapter 2 Readability/Item 12 Operator meaning should be consistent with its function name.html","title":"Item 12 Operator Meaning Should Be Consistent With Its Function Name","keywords":"","body":"Item 12: Operator meaning should be consistent with its function name\nOperator overloading is a powerful feature, and like most powerful features it is dangerous as well. In programming, with great power comes great responsibility. As a trainer, I’ve often seen how people can get carried away when they first discover operator overloading. For example, one exercise involves making a function for calculating the factorial of a number:\nfun Int.factorial(): Int = (1..this).product()\n\nfun Iterable.product(): Int = \n    fold(1) { acc, i -> acc * i }\n\nAs this function is defined as an extension function to Int, its usage is convenient:\nprint(10 * 6.factorial()) // 7200\n\nA mathematician will know that there is a special notation for factorials. It is an exclamation mark after a number:\n10 * 6!\n\nThere is no support in Kotlin for such an operator, but as one of my workshop participants noticed, we can use operator overloading for not instead:\noperator fun Int.not() = factorial()\n\nprint(10 * !6) // 7200\n\nWe can do this, but should we? The simplest answer is NO. You only need to read the function declaration to notice that the name of this function is not. As this name suggests, it should not be used this way. It represents a logical operation, not a numeric factorial. This usage would be confusing and misleading. In Kotlin, all operators are just syntactic sugar for functions with concrete names, as presented in the table below. Every operator can always be invoked as a function instead of using the operator syntax. How would the following look like?\nprint(10 * 6.not()) // 7200\n\n\nThe meaning of each operator in Kotlin always stays the same. This is a very important design decision. Some languages, like Scala, give you unlimited operator overloading capabilities. This amount of freedom is known to be highly misused by some developers. Reading code using an unfamiliar library for the first time might be difficult even if it has meaningful names of functions and classes. Now imagine operators being used with another meaning, known only to the developers familiar with category theory. It would be way harder to understand. You would need to understand each operator separately, remember what it means in the specific context, and then keep it all in mind to connect the pieces to understand the whole statement. We don’t have such a problem in Kotlin, because each of these operators has a concrete meaning. For instance, when you see the following expression:\nx + y == z\n\nYou know that this is the same as:\nx.plus(y).equal(z)\n\nOr it can be the following code if plus declares a nullable return type:\n(x.plus(y))?.equal(z) ?: (z === null)\n\nThese are functions with a concrete name, and we expect all functions to do what their names indicate. This highly restricts what each operator can be used for. Using not to return factorial is a clear breach of this convention, and should never happen. \nUnclear cases\nThe biggest problem is when it is unclear if some usage fulfills conventions. For instance, what does it mean when we triple a function? For some people, it is clear that it means making another function that repeats this function 3 times:\noperator fun Int.times(operation: () -> Unit): ()->Unit = \n    { repeat(this) { operation() } }\n\nval tripledHello = 3 * { print(\"Hello\") }\n\ntripledHello() // Prints: HelloHelloHello\n\nFor others, it might be clear that it means that we want to call this function 3 times1:\noperator fun Int.times(operation: ()->Unit) {\n   repeat(this) { operation() }\n}\n\n3 * { print(\"Hello\") } // Prints: HelloHelloHello\n\nWhen the meaning is unclear, it is better to favor descriptive extension functions. If we want to keep their usage operator-like, we can make them infix:\ninfix fun Int.timesRepeated(operation: ()->Unit) = {\n   repeat(this) { operation() }\n}\n\nval tripledHello = 3 timesRepeated { print(\"Hello\") }\ntripledHello() // Prints: HelloHelloHello\n\nSometimes it is better to use a top-level function instead. Repeating function 3 times is already implemented and distributed in the stdlib:\nrepeat(3) { print(\"Hello\") } // Prints: HelloHelloHello\n\nWhen is it fine to break this rule?\nThere is one very important case when it is fine to use operator overloading in a strange way: When we design a Domain Specific Language (DSL). Think of a classic HTML DSL example:\nbody {\n    div {\n        +\"Some text\"\n    }\n}\n\nYou can see that to add text into an element we use String.unaryPlus. This is acceptable because it is clearly part of the Domain Specific Language (DSL). In this specific context, it’s not a surprise to readers that different rules apply.\nSummary\nUse operator overloading conscientiously. The function name should always be coherent with its behavior. Avoid cases where operator meaning is unclear. Clarify it by using a regular function with a descriptive name instead. If you wish to have a more operator-like syntax, then use the infix modifier or a top-level function.\n"},"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html":{"url":"Part 1 Good code/Chapter 2 Readability/Item 13 Avoid returning or operating on Unit?.html","title":"Item 13 Avoid Returning Or Operating On Unit","keywords":"","body":"Item 13: Avoid returning or operating on Unit?\nDuring the recruitment process, a dear friend of mine was asked, “Why might one want to return Unit? from a function?”. Well, Unit? has only 2 possible values: Unit or null. Just like Boolean can be either true or false. Ergo, these types are isomorphic, so they can be used interchangeably. Why would we want to use Unit? instead of Boolean to represent something? I have no other answer than that one can use the Elvis operator or a safe call. So instead of:\nfun keyIsCorrect(key: String): Boolean = //...\n\nif(!keyIsCorrect(key)) return\n\nWe are able to do this:\nfun verifyKey(key: String): Unit? = //...\n\nverifyKey(key) ?: return\n\nThis appears to be the expected answer. What was missing in my friend’s interview was a way more important question: “But should we do it?”. This trick looks nice when we are writing the code, but not necessarily when we are reading it. Using Unit? to represent logical values is misleading and can lead to errors that are hard to detect. We’ve already discussed how this expression can be surprising:\ngetData()?.let{ view.showData(it) } ?: view.showError()\n\nWhen showData returns null and getData returns not null, both showData and showError will be called. Using standard if-else is less tricky and more readable:\nif (person != null && person.isAdult) {\n   view.showPerson(person)\n} else {\n   view.showError()\n}\n\nCompare the following two notations:\nif(!keyIsCorrect(key)) return\n\nverifyKey(key) ?: return\n\nI have never found even a single case when Unit? is the most readable option. It is misleading and confusing. It should nearly always be replaced by Boolean. This is why the general rule is that we should avoid returning or operating on Unit?.\n"},"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html":{"url":"Part 1 Good code/Chapter 2 Readability/Item 14 Specify the variable type when it is not clear.html","title":"Item 14 Specify The Variable Type When It Is Not Clear","keywords":"","body":"Item 14: Specify the variable type when it is not clear\nKotlin has a great type inference system that allows us to omit types when those are obvious for developers:\nval num = 10\nval name = \"Marcin\"\nval ids = listOf(12, 112, 554, 997)\n\nIt improves not only development time, but also readability when a type is clear from the context and additional specification is redundant and messy. However, it should not be overused in cases when a type is not clear:\nval data = getSomeData()\n\nWe design our code for readability, and we should not hide important information that might be important for a reader. It is not valid to argue that return types can be omitted because the reader can always jump into the function specification to check it there. Type might be inferred there as well and a user can end up going deeper and deeper. Also, a user might read this code on GitHub or some other environment that does not support jumping into implementation. Even if they can, we all have very limited working memory and wasting it like this is not a good idea. Type is important information and if it is not clear, it should be specified. \nval data: UserData = getSomeData()\n\nImproving readability is not the only case for type specification. It is also for safety as shown in the Chapter: Safety on Item 3: Eliminate platform types as soon as possible and Item 4: Do not expose inferred types. Type might be important information both for a developer and for the compiler. Whenever it is, do not hesitate to specify the type. It costs little and can help a lot.\n"},"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html":{"url":"Part 1 Good code/Chapter 2 Readability/Item 15 Consider referencing receivers explicitly.html","title":"Item 15 Consider Referencing Receivers Explicitly","keywords":"","body":"Item 15: Consider referencing receivers explicitly\nOne common place where we might choose a longer structure to make something explicit is when we want to highlight that a function or a property is taken from the receiver instead of being a local or top-level variable. In the most basic situation it means a reference to the class to which the method is associated:\nclass User: Person() {\n   private var beersDrunk: Int = 0\n\n   fun drinkBeers(num: Int) {\n       // ...\n       this.beersDrunk += num\n       // ...\n   }\n}\n\nSimilarly, we may explicitly reference an extension receiver (this in an extension method) to make its use more explicit. Just compare the following Quicksort implementation written without explicit receivers:\nfun > List.quickSort(): List {\n   if (size \nWith this one written using them:\nfun > List.quickSort(): List {\n   if (this.size \nThe usage is the same for both functions:\nlistOf(3, 2, 5, 1, 6).quickSort() // [1, 2, 3, 5, 6]\nlistOf(\"C\", \"D\", \"A\", \"B\").quickSort() // [A, B, C, D]\n\nMany receivers\nUsing explicit receivers can be especially helpful when we are in the scope of more than one receiver. We are often in such a situation when we use the apply, with or run functions. Such situations are dangerous and we should avoid them. It is safer to use an object using explicit receiver. To understand this problem, see the following code2:\nclass Node(val name: String) {\n\n   fun makeChild(childName: String) =\n       create(\"$name.$childName\")\n           .apply { print(\"Created ${name}\") }\n\n   fun create(name: String): Node? = Node(name)\n} \n\nfun main() {\n   val node = Node(\"parent\")\n   node.makeChild(\"child\")\n}\n\nWhat is the result? Stop now and spend some time trying to answer yourself before reading the answer. \nIt is probably expected that the result should be “Created parent.child”, but the actual result is “Created parent”. Why? To investigate, we can use explicit receiver before name:\nclass Node(val name: String) {\n\n   fun makeChild(childName: String) =\n       create(\"$name.$childName\")\n         .apply { print(\"Created ${this.name}\") } \n         // Compilation error\n\n   fun create(name: String): Node? = Node(name)\n}\n\nThe problem is that the type this inside apply is Node? and so methods cannot be used directly. We would need to unpack it first, for instance by using a safe call. If we do so, result will be finally correct:\nclass Node(val name: String) {\n\n   fun makeChild(childName: String) =\n       create(\"$name.$childName\")\n           .apply { print(\"Created ${this?.name}\") }\n\n   fun create(name: String): Node? = Node(name)\n}\n\nfun main() {\n    val node = Node(\"parent\")\n    node.makeChild(\"child\") \n    // Prints: Created parent.child\n}\n\nThis is an example of bad usage of apply. We wouldn’t have such a problem if we used also instead, and call name on the argument. Using also forces us to reference the function’s receiver explicitly the same way as an explicit receiver. In general also and let are much better choice for additional operations or when we operate on a nullable value. \nclass Node(val name: String) {\n\n   fun makeChild(childName: String) =\n       create(\"$name.$childName\")\n           .also { print(\"Created ${it?.name}\") }\n\n   fun create(name: String): Node? = Node(name)\n}\n\nWhen receiver is not clear, we either prefer to avoid it or we clarify it using explicit receiver. When we use receiver without label, we mean the closest one. When we want to use outer receiver we need to use a label. In such case it is especially useful to use it explicitly. Here is an example showing them both in use:\nclass Node(val name: String) {\n\n    fun makeChild(childName: String) =\n        create(\"$name.$childName\").apply { \n           print(\"Created ${this?.name} in \"+\n               \" ${this@Node.name}\") \n        }\n\n    fun create(name: String): Node? = Node(name)\n}\n\nfun main() {\n    val node = Node(\"parent\")\n    node.makeChild(\"child\") \n    // Created parent.child in parent\n}\n\nThis way direct receiver clarifies what receiver do we mean. This might be an important information that might not only protect us from errors but also improve readability. \nDSL marker\nThere is a context in which we often operate on very nested scopes with different receivers, and we don’t need to use explicit receivers at all. I am talking about Kotlin DSLs. We don’t need to use receivers explicitly because DSLs are designed in such a way. However, in DSLs, it is especially dangerous to accidentally use functions from an outer scope. Think of a simple HTML DSL we use to make an HTML table:\ntable {\n   tr {\n       td { +\"Column 1\" }\n       td { +\"Column 2\" }\n   }\n   tr {\n       td { +\"Value 1\" }\n       td { +\"Value 2\" }\n   }\n}\n\nNotice that by default in every scope we can also use methods from receivers from the outer scope. We might use this fact to mess with DSL:\ntable {\n   tr {\n       td { +\"Column 1\" }\n       td { +\"Column 2\" }\n       tr {\n           td { +\"Value 1\" }\n           td { +\"Value 2\" }\n      }\n   }\n}\n\nTo restrict such usage, we have a special meta-annotation (an annotation for annotations) that restricts implicit usage of outer receivers. This is the DslMarker. When we use it on an annotation, and later use this annotation on a class that serves as a builder, inside this builder implicit receiver use won’t be possible. Here is an example of how DslMarker might be used:\n@DslMarker\nannotation class HtmlDsl\n\nfun table(f: TableDsl.() -> Unit) { /*...*/ }\n\n@HtmlDsl\nclass TableDsl { /*...*/ }\n\nWith that, it is prohibited to use outer receiver implicitly:\ntable {\n   tr {\n       td { +\"Column 1\" }\n       td { +\"Column 2\" }\n       tr { // COMPILATION ERROR\n           td { +\"Value 1\" }\n           td { +\"Value 2\" }\n       }\n   }\n}\n\nUsing functions from an outer receiver requires explicit receiver usage:\ntable {\n   tr {\n       td { +\"Column 1\" }\n       td { +\"Column 2\" }\n       this@table.tr {\n           td { +\"Value 1\" }\n           td { +\"Value 2\" }\n       }\n   }\n}\n\nThe DSL marker is a very important mechanism that we use to force usage of either the closest receiver or explicit receiver usage. However, it is generally better to not use explicit receivers in DSLs anyway. Respect DSL design and use it accordingly. \nSummary\nDo not change scope receiver just because you can. It might be confusing to have too many receivers all giving us methods we can use. Explicit argument or reference is generally better. When we do change receiver, using explicit receivers improves readability because it clarifies where does the function come from. We can even use a label when there are many receivers to clarify from which one the function comes from. If you want to force using explicit receivers from the outer scope, you can use DslMarker meta-annotation.\n"},"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html":{"url":"Part 1 Good code/Chapter 2 Readability/Item 16 Properties should represent state not behavior.html","title":"Item 16 Properties Should Represent State Not Behavior","keywords":"","body":"Item 16: Properties should represent state, not behavior\nKotlin properties look similar to Java fields, but they actually represent a different concept. \n// Kotlin property\nvar name: String? = null\n\n// Java field\nString name = null;\n\nEven though they can be used the same way, to hold data, we need to remember that properties have many more capabilities. Starting with the fact that they can always have custom setters and getters:\nvar name: String? = null\n   get() = field?.toUpperCase()\n   set(value) {\n       if(!value.isNullOrBlank()) {\n           field = value\n       }\n   }\n\nYou can see here that we are using the field identifier. This is a reference to the backing field that lets us hold data in this property. Such backing fields are generated by default because default implementations of setter and getter use them. We can also implement custom accessors that do not use them, and in such a case a property will not have a field at all. For instance, a Kotlin property can be defined using only a getter for a read-only property val: \nval fullName: String\n   get() = \"$name $surname\"\n\nFor a read-write property var, we can make a property by defining a getter and setter. Such properties are known as derived properties, and they are not uncommon. They are the main reason why all properties in Kotlin are encapsulated by default. Just imagine that you have to hold a date in your object and you used Date from the Java stdlib. Then at some point for a reason, the object cannot store the property of this type anymore. Perhaps because of a serialization issue, or maybe because you lifted this object to a common module. The problem is that this property has been referenced throughout your project. With Kotlin, this is no longer a problem, as you can move your data into a separate property millis, and modify the date property to not hold data but instead to wrap/unwrap that other property. \nvar date: Date\n   get() = Date(millis)\n   set(value) {\n       millis = value.time\n   }\n\nProperties do not need fields. Rather, they conceptually represent accessors (getter for val, getter and setter for var). This is why we can define them in interfaces:\ninterface Person {\n   val name: String\n}\n\nThis means that this interface promises to have a getter. We can also override properties:\nopen class Supercomputer {\n   open val theAnswer: Long = 42\n}\n\nclass AppleComputer : Supercomputer() {\n   override val theAnswer: Long = 1_800_275_2273\n}\n\nFor the same reason, we can delegate properties:\nval db: Database by lazy { connectToDb() }\n\nProperty delegation is described in detail in Item 21: Use property delegation to extract common property patterns. Because properties are essentially functions, we can make extension properties as well:\nval Context.preferences: SharedPreferences\n   get() = PreferenceManager\n       .getDefaultSharedPreferences(this)\n\nval Context.inflater: LayoutInflater\n   get() = getSystemService(\n       Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n\nval Context.notificationManager: NotificationManager\n   get() = getSystemService(Context.NOTIFICATION_SERVICE) \n       as NotificationManager\n\nAs you can see, properties represent accessors, not fields. This way they can be used instead of some functions, but we should be careful what we use them for. Properties should not be used to represent algorithmic behaviour like in the example below:\n// DON’T DO THIS!\nval Tree.sum: Int\n   get() = when (this) {\n       is Leaf -> value\n       is Node -> left.sum + right.sum\n   }\n\nHere sum property iterates over all elements and so it represents algorithmic behavior. Therefore this property is misleading: finding the answer can be computationally heavy for big collections, and this is not expected at all for a getter. This should not be a property, this should be a function:\nfun Tree.sum(): Int = when (this) {\n   is Leaf -> value\n   is Node -> left.sum() + right.sum()\n}\n\nThe general rule is that we should use them only to represent or set state, and no other logic should be involved. A useful heuristic to decide if something should be a property is: If I would define this property as a function, would I prefix it with get/set? If not, it should rather not be a property. More concretely, here are the most typical situations when we should not use properties, and we should use functions instead:\n\nOperation is computationally expensive or has computational complexity higher than O(1) - A user does not expect that using a property might be expensive. If it is, using a function is better because it communicates that it might be and that user might be parsimonious using it, or the developer might consider caching it.\nIt involves business logic (how the application acts) - when we read code, we do not expect that a property might do anything more than simple actions like logging, notifying listeners, or updating a bound element. \nIt is not deterministic - Calling the member twice in succession produces different results.\nIt is a conversion, such as Int.toDouble() - It is a matter of convention that conversions are a method or an extension function. Using a property would seem like referencing some inner part instead of wrapping the whole object. \nGetters should not change property state - We expect that we can use getters freely without worrying about property state modifications. \n\nFor instance, calculating the sum of elements requires iterating over all of the elements (this is behavior, not state) and has linear complexity. Therefore it should not be a property, and is defined in the standard library as a function:\nval s = (1..100).sum()\n\nOn the other hand, to get and set state we use properties in Kotlin, and we should not involve functions unless there is a good reason. We use properties to represent and set state, and if you need to modify them later, use custom getters and setters:\n// DON’T DO THIS!\nclass UserIncorrect {\n   private var name: String = \"\"\n\n   fun getName() = name\n\n   fun setName(name: String) {\n       this.name = name\n   }\n}\n\nclass UserCorrect {\n   var name: String = \"\"\n}\n\nA simple rule of thumb is that a property describes and sets state, while a function describes behavior.\n"},"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html":{"url":"Part 1 Good code/Chapter 2 Readability/Item 17 Consider naming arguments.html","title":"Item 17 Consider Naming Arguments","keywords":"","body":"Item 17: Consider naming arguments\nWhen you read a code, it is not always clear what an argument means. Take a look at the following example:\nval text = (1..10).joinToString(\"|\")\n\nWhat is \"|\"? If you know joinToString well, you know that it is the separator. Although it could just as well be the prefix. It is not clear at all3. We can make it easier to read by clarifying those arguments whose values do not clearly indicate what they mean. The best way to do that is by using named arguments:\nval text = (1..10).joinToString(separator = \"|\")\n\nWe could achieve a similar result by naming variable:\nval separator = \"|\"\nval text = (1..10).joinToString(separator)\n\nAlthough naming the argument is more reliable. A variable name specifies developer intention, but not necessarily correctness. What if a developer made a mistake and placed the variable in the wrong position? What if the order of parameters changed? Named arguments protect us from such situations while named values do not. This is why it is still reasonable to use named arguments when we have values named anyway:\nval separator = \"|\"\nval text = (1..10).joinToString(separator = separator)\n\nWhen should we use named arguments?\nClearly, named arguments are longer, but they have two important advantages:\n\nName that indicates what value is expected. \nThey are safer because they are independent of order.\n\nThe argument name is important information not only for a developer using this function but also for the one reading how it was used. Take a look at this call:\nsleep(100)\n\nHow much will it sleep? 100 ms? Maybe 100 seconds? We can clarify it using a named argument:\nsleep(timeMillis = 100)\n\nThis is not the only option for clarification in this case. In statically typed languages like Kotlin, the first mechanism that protects us when we pass arguments is the parameter type. We could use it here to express information about time unit:\nsleep(Millis(100))\n\nOr we could use an extension property to create a DSL-like syntax:\nsleep(100.ms)\n\nTypes are a good way to pass such information. If you are concerned about efficiency, use inline classes as described in Item 46: Use inline modifier for functions with parameters of functional types. They help us with parameter safety, but they do not solve all problems. Some arguments might still be unclear. Some arguments might still be placed on wrong positions. This is why I still suggest considering named arguments, especially for parameters:\n\nwith default arguments,\nwith the same type as other parameters,\nof functional type, if they’re not the last parameter.\n\nParameters with default arguments\nWhen a property has a default argument, we should nearly always use it by name. Such optional parameters are changed more often than those that are required. We don’t want to miss such a change. Function name generally indicates what are its non-optional arguments, but not what are its optional ones. This is why it is safer and generally cleaner to name optional arguments.4\nMany parameters with the same type\nAs we said, when parameters have different types, we are generally safe from placing an argument at an incorrect position. There is no such freedom when some parameters have the same type. \nfun sendEmail(to: String, message: String) { /*...*/ }\n\nWith a function like this, it is good to clarify arguments using names:\nsendEmail(\n   to = \"contact@kt.academy\",\n   message = \"Hello, ...\"\n)\n\nParameters of function type\nFinally, we should treat parameters with function types specially. There is one special position for such parameters in Kotlin: the last position. Sometimes a function name describes an argument of a function type. For instance, when we see repeat, we expect that a lambda after that is the block of code that should be repeated. When you see thread, it is intuitive that the block after that is the body of this new thread. Such names only describe the function used at the last position. \nthread {\n   // ...\n}\n\nAll other arguments with function types should be named because it is easy to misinterpret them. For instance, take a look at this simple view DSL:\nval view = linearLayout {\n   text(\"Click below\")\n   button({ /* 1 */ }, { /* 2 */ })\n}\n\nWhich function is a part of this builder and which one is an on-click listener? We should clarify it by naming the listener and moving builder outside of arguments:\nval view = linearLayout {\n   text(\"Click below\")\n   button(onClick = { /* 1 */ }) {\n      /* 2 */\n   }\n}\n\nMultiple optional arguments of a function type can be especially confusing:\nfun call(before: ()->Unit = {}, after: ()->Unit = {}){\n   before()\n   print(\"Middle\")\n   after()\n}\n\ncall({ print(\"CALL\") }) // CALLMiddle\ncall { print(\"CALL\") }  // MiddleCALL\n\nTo prevent such situations, when there is no single argument of a function type with special meaning, name them all:\ncall(before = { print(\"CALL\") }) // CALLMiddle\ncall(after = { print(\"CALL\") })  // MiddleCALL\n\nThis is especially true for reactive libraries. For instance, in RxJava when we subscribe to an Observable, we can set functions that should be called:\n\non every received item\nin case of error,\nafter the observable is finished. \n\nIn Java I’ve often seen people setting them up using lambda expressions, and specifying in comments which method each lambda expression is:\n// Java\nobservable.getUsers()\n       .subscribe((List users) -> { // onNext\n           // ...\n       }, (Throwable throwable) -> { // onError\n           // ...\n       }, () -> { // onCompleted\n           // ...\n       });\n\nIn Kotlin we can make a step forward and use named arguments instead:\nobservable.getUsers()\n   .subscribeBy(\n       onNext = { users: List ->\n           // ...\n       },\n       onError = { throwable: Throwable ->\n           // ...\n       },\n       onCompleted = {\n           // ...\n       })\n\nNotice that I changed function name from subscribe to subscribeBy. It is because RxJava is written in Java and we cannot use named arguments when we call Java functions. It is because Java does not preserve information about function names. To be able to use named arguments we often need to make our Kotlin wrappers for those functions (extension functions that are alternatives to those functions). \nSummary\nNamed arguments are not only useful when we need to skip some default values. They are important information for developers reading our code, and they can improve the safety of our code. We should consider them especially when we have more parameters with the same type (or with functional types) and for optional arguments. When we have multiple parameters with functional types, they should almost always be named. An exception is the last function argument when it has a special meaning, like in DSL.\n"},"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html":{"url":"Part 1 Good code/Chapter 2 Readability/Item 18 Respect coding conventions.html","title":"Item 18 Respect Coding Conventions","keywords":"","body":"Item 18: Respect coding conventions\nKotlin has well-established coding conventions described in the documentation in a section aptly called “Coding Conventions”. Those conventions are not optimal for all projects, but it is optimal for us as a community to have conventions that are respected in all projects. Thanks to them:\n\nIt is easier to switch between projects\nCode is more readable even for external developers\nIt is easier to guess how code works\nIt is easier to later merge code with a common repository or to move some parts of code from one project to another\n\nProgrammers should get familiar with those conventions as they are described in the documentation. They should also be respected when they change - which might happen to some degree over time. Since it is hard to do both, there are two tools that help:\n\nThe IntelliJ formatter can be set up to automatically format according to the official Coding Conventions style. For that go to Settings | Editor | Code Style | Kotlin, click on “Set from…” link in the upper right corner, and select “Predefined style / Kotlin style guide” from the menu.\nktlint - popular linter that analyzes your code and notifies you about all coding conventions violations.\n\nLooking at Kotlin projects, I see that most of them are intuitively consistent with most of the conventions. This is probably because Kotlin mostly follows the Java coding conventions, and most Kotlin developers today are post-Java developers. One rule that I see often violated is how classes and functions should be formatted. According to the conventions, classes with a short primary-constructor can be defined in a single line:\nclass FullName(val name: String, val surname: String)\nHowever, classes with many parameters should be formatted in a way so that every parameter is on another line, and there is no parameter in the first line:\nclass Person(\n    val id: Int = 0,\n    val name: String = \"\",\n    val surname: String = \"\"\n) : Human(id, name) { \n    // body\n}\n\nSimilarly, this is how we format a long function:\npublic fun  Iterable.joinToString(\n    separator: CharSequence = \", \", \n    prefix: CharSequence = \"\", \n    postfix: CharSequence = \"\", \n    limit: Int = -1, \n    truncated: CharSequence = \"...\", \n    transform: ((T) -> CharSequence)? = null\n): String {\n   // ...\n}\n\nNotice that those two are very different from the convention that leaves the first parameter in the same line and then indents all others to it. \n// Don’t do that\nclass Person(val id: Int = 0,\n             val name: String = \"\",\n             val surname: String = \"\") : Human(id, name){ \n    // body\n}\n\nIt can be problematic in 2 ways:\n\nArguments on every class start with a different indentation based on the class name. Also, when we change the class name, we need to adjust the indentations of all primary constructor parameters.\nClasses defined this way tend to be still too wide. Width of the class defined this way is the class name with class keyword and the longest primary constructor parameter, or last parameter plus superclasses and interfaces. \n\nSome teams might decide to use slightly different conventions. This is fine, but then those conventions should be respected all around the given project. Every project should look like it was written by a single person, not a group of people fighting with each other.\nCoding conventions are often not respected enough by developers, but they are important, and a chapter dedicated to readability in a best practices book couldn’t be closed without at least a short section dedicated to them. Read them, use static checkers to help you be consistent with them, apply them in your projects. By respecting coding conventions, we make Kotlin projects better for us all.\n"},"Part 2 Code design/Chapter 3 Reusability/Introduction.html":{"url":"Part 2 Code design/Chapter 3 Reusability/Introduction.html","title":"Introduction","keywords":"","body":"Chapter 3: Reusability\nHave you ever wondered how the System.out.print function works (print function in Kotlin/JVM)? It’s one of the most basic functions used again and again and yet, would you be able to implement it yourself if it would vanish one day? Truth is that this is not an easy task. Especially if the rest of java.io would vanish as well. You would need to implement the communication with the operating system in C using JNI, separately for each operating system you support1. Believe me, implementing it once is terrifying. Implementing it again and again in every project would be a horror. \nThe same applies to many other functions as well. Making Android views is so easy because Android has a complex API that supports it. A backend developer doesn’t need to know too much about the HTTP(S) protocol even though they work with it every day. You don’t need to know any sorting algorithms to call Iterable.sorted. Thankfully, we don’t need to have and use all this knowledge every day. Someone implemented it once, and now we can use it whenever we need. This demonstrates a key feature of Programming languages: reusability.\nSounds enthusiastic, but code reusability is as dangerous as it is powerful. A small change in the print function could break countless programs. If we extract a common part from A and B, we have an easier job in the future if we need to change them both, but it’s harder and more error-prone when we need to change only one. \nThis chapter is dedicated to reusability. It touches on many subjects that developers do intuitively. We do so because we learned them through practice. Mainly through observations of how something we did in the past has an impact on us now. We extracted something, and now it causes problems. We haven’t extracted something, and now we have a problem when we need to make some changes. Sometimes we deal with code written by different developers years ago, and we see how their decisions impact us now. Maybe we just looked at another language or project and we thought “Wow, this is short and readable because they did X”. This is the way we typically learn, and this is one of the best ways to learn. \nIt has one problem though: it requires years of practice. To speed it up and to help you systematize this knowledge, this chapter will give you some generic rules to help you make your code better in the long term. It is a bit more theoretical than the rest of the book. If you’re looking for concrete rules (as presented in the previous chapters), feel free to skip it.\n"},"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html":{"url":"Part 2 Code design/Chapter 3 Reusability/Item 19 Do not repeat knowledge.html","title":"Item 19 Do Not Repeat Knowledge","keywords":"","body":"Item 19: Do not repeat knowledge\nThe first big rule I was taught about programming was:\nIf you use copy-paste in your project, you are most likely doing something wrong.\nThis is a very simple heuristic, but it is also very wise. Till today whenever I reflect on that, I am amazed how well a single and clear sentence expresses the key idea behind the “Do not repeat knowledge” principle. It is also often known as DRY principle after the Pragmatic Programmer book that described the Don’t Repeat Yourself rule. Some developers might be familiar with the WET antipattern, that sarcastically teaches us the same. DRY is also connected to the Single Source of Truth (SSOT) practice, As you can see, this rule is quite popular and has many names. However, it is often misused or abused. To understand this rule and the reasons behind it clearly, we need to introduce a bit of theory.\nKnowledge\nLet’s define knowledge in programming broadly, as any piece of intentional information. It can be stated by code or data. It can also be stated by lack of code or data, which means that we want to use the default behavior. For instance when we inherit, and we don’t override a method, it’s like saying that we want this method to behave the same as in the superclass. \nWith knowledge defined this way, everything in our projects is some kind of knowledge. Of course, there are many different kinds of knowledge: how an algorithm should work, what UI should look like, what result we wish to achieve, etc. There are also many ways to express it: for example by using code, configurations, or templates. In the end, every single piece of our program is information that can be understood by some tool, virtual machine, or directly by other programs.\nThere are two particularly important kinds of knowledge in our programs:\n\nLogic - How we expect our program to behave and what it should look like\nCommon algorithms - Implementation of algorithms to achieve the expected behavior\n\nThe main difference between them is that business logic changes a lot over time, while common algorithms generally do not once they are defined. They might be optimized or we might replace one algorithm with another, but algorithms themselves are generally stable. Because of this difference, we will concentrate on algorithms in the next item. For now, let’s concentrate on the first point, that is the logic - knowledge about our program. \nEverything can change\nThere is a saying that in programming the only constant is change. Just think of projects from 10 or 20 years ago. It is not such a long time. Can you point a single popular application or website that hasn’t changed? Android was released in 2008. The first stable version of Kotlin was released in 2016. Not only technologies but also languages change so quickly. Think about your old projects. Most likely now you would use different libraries, architecture, and design. \nChanges often occur where we don’t expect them. There is a story that once when Einstein was examining his students, one of them stood up and loudly complained that questions were the same as the previous year. Einstein responded that it was true, but answers were totally different that year. Even things that you think are constant, because they are based on law or science, might change one day. Nothing is absolutely safe.\nStandards of UI design and technologies change much faster. Our understanding of clients often needs to change on a daily basis. This is why knowledge in our projects will change as well. For instance, here are very typical reasons for the change:\n\nThe company learns more about user needs or habits\nDesign standards change\nWe need to adjust to changes in the platform, libraries, or some tools\n\nMost projects nowadays change requirements and parts of the internal structure every few months. This is often something desired. Many popular management systems are agile and fit to support constant changes in requirements. Slack was initially a game named Glitch3. The game didn’t work out, but customers liked its communication features. \nThings change, and we should be prepared for that. The biggest enemy of changes is knowledge repetition. Just think for a second: what if we need to change something that is repeated in many places in our program? The simplest answer is that in such a case, you just need to search for all the places where this knowledge is repeated, and change it everywhere. Searching can be frustrating, and it is also troublesome: what if you forget to change some repetitions? What if some of them are already modified because they were integrated with other functionalities? It might be tough to change them all in the same way. Those are real problems. \nTo make it less abstract, think of a universal button used in many different places in our project. When our graphic designer decides that this button needs to be changed, we would have a problem if we defined how it looks like in every single usage. We would need to search our whole project and change every single instance separately. We would also need to ask testers to check if we haven’t missed any instance. \nAnother example: Let’s say that we use a database in our project, and then one day we change the name of a table. If we forget to adjust all SQL statements that depend on this table, we might have a very problematic error. If we had some table structure defined only once, we wouldn’t have such a problem. \nOn both examples, you can see how dangerous and problematic knowledge repetition is. It makes projects less scalable and more fragile. Good news is that we, programmers, work for years on tools and features that help us eliminate knowledge redundancy. On most platforms, we can define a custom style for a button, or custom view/component to represent it. Instead of writing SQL in text format, we can use an ORM (like Hibernate) or DAO (like Exposed).\nAll those solutions represent different kinds of abstractions and they protect us from a different kinds of redundancy. Analysis of different kinds of abstractions is presented in Item 27: Use abstraction to protect code against changes. \nWhen should we allow code repetition?\nThere are situations where we can see two pieces of code that are similar but should not be extracted into one. This is when they only look similar but represent different knowledge. \nLet’s start from an example. Let’s say that we have two independent Android applications in the same project. Their build tool configurations are similar so it might be tempting to extract it. But what if we do that? Applications are independent so if we will need to change something in the configuration, we will most likely need to change it only in one of them. Changes after this reckless extraction are harder, not easier. Configuration reading is harder as well - configurations have their boilerplate code, but developers are already familiar with it. Making abstractions means designing our own API, which is another thing to learn for a developer using this API. This is a perfect example of how problematic it is when we extract something that is not conceptually the same knowledge.\nThe most important question to ask ourselves when we decide if two pieces of code represent similar knowledge is: Are they more likely going to change together or separately? Pragmatically this is the most important question because this is the biggest result of having a common part extracted: it is easier to change them both, but it is harder to change only a single one. \nOne useful heuristic is that if business rules come from different sources, we should assume that they will more likely change independently. For such a case we even have a rule that protects us from unintended code extraction. It is called the Single Responsibility Principle. \nSingle responsibility principle\nA very important rule that teaches us when we should not extract common code is the Single Responsibility Principle from SOLID. It states that “A class should have only one reason to change”. This rule4 can be simplified by the statement that there should be no such situations when two actors need to change the same class. By actor, we mean a source of change. They are often personified by developers from different departments who know little about each other’s work and domain. Although even if there is only a single developer in a project, but having multiple managers, they should be treated as separate actors. Those are two sources of changes knowing little about each other domains. The situation when two actors edit the same piece of code is especially dangerous.\nLet’s see an example. Imagine that we work for a university, and we have a class Student. This class is used both by the Scholarships Department and the Accreditations Department. Developers from those two departments introduced two different properties:\n\nisPassing was created by the Accreditations Department and answers the question of whether a student is passing.\nqualifiesForScholarship was created by the Scholarships Department and answers the question if a student has enough points to qualify for a Scholarship.\n\nBoth functions need to calculate how many points the student collected in the previous semester, so a developer extracted a function calculatePointsFromPassedCourses.\n\nclass Student {\n   // ...\n\n   fun isPassing(): Boolean = \n       calculatePointsFromPassedCourses() > 15\n\n   fun qualifiesForScholarship(): Boolean = \n       calculatePointsFromPassedCourses() > 30\n\n   private fun calculatePointsFromPassedCourses(): Int {\n       //...\n   }\n}\n\nThen, original rules change and the dean decides that less important courses should not qualify for scholarship points calculation. A developer who was sent to introduce this change checked function qualifiesForScholarship, finds out that it calls the private method calculatePointsFromPassedCourses and changes it to skip courses that do not qualify. Unintentionally, that developer changed the behavior of isPassing as well. Students who were supposed to pass, got informed that they failed the semester. You can imagine their reaction.\nIt is true that we could easily prevent such situation if we would have unit tests (Item 10: Write unit tests), but let’s skip this aspect for now. \nThe developer might check where else the function is used. Although the problem is that this developer didn’t expect that this private function was used by another property with a totally different responsibility. Private functions are rarely used just by more than one function. \nThis problem, in general, is that it is easy to couple responsibilities located very close (in the same class/file). A simple solution would be to extract these responsibilities into separate classes. We might have separate classes StudentIsPassingValidator and \nStudentQualifiesForScholarshipValidator. Though in Kotlin we don’t need to use such heavy artillery (see more at Chapter 4: Design abstractions). We can just define qualifiesForScholarship and \ncalculatePointsFromPassedCourses as extension functions on Student located in separate modules: one over which Scholarships Department is responsible, and another over which Accreditations Department is responsible.\n// scholarship module\nfun Student.qualifiesForScholarship(): Boolean { \n    /*...*/ \n}\n\n// accreditations module\nfun Student.calculatePointsFromPassedCourses(): Boolean { \n    /*...*/ \n}\n\nWhat about extracting a function for calculating results? We can do it, but it cannot be a private function used as a helper for both these methods. Instead, it can be:\n\nA general public function defined in a module used by both departments. In such a case, the common part is treated as something common, so a developer should not change it without modifying the contract and adjusting usages.\nTwo separate helper functions, each for every department.\n\nBoth options are safe.\nThe Single Responsibility Principle teaches us two things:\n\nKnowledge coming from two different sources (here two different departments) is very likely to change independently, and we should rather treat it as a different knowledge.\nWe should separate different knowledge because otherwise, it is tempting to reuse parts that should not be reused. \n\nSummary\nEverything changes and it is our job to prepare for that: to recognize common knowledge and extract it. If a bunch of elements has similar parts and it is likely that we will need to change it for all instances, extract it and save time on searching through the project and update many instances. On the other hand, protect yourself from unintentional modifications by separating parts that are coming from different sources. Often it’s even more important side of the problem. I see many developers who are so terrified of the literal meaning of Don’t Repeat Yourself, that they tend to looking suspiciously at any 2 lines of code that look similar. Both extremes are unhealthy, and we need to always search for a balance. Sometimes, it is a tough decision if something should be extracted or not. This is why it is an art to design information systems well. It requires time and a lot of practice.\n"},"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html":{"url":"Part 2 Code design/Chapter 3 Reusability/Item 20 Do not repeat common algorithms.html","title":"Item 20 Do Not Repeat Common Algorithms","keywords":"","body":"Item 20: Do not repeat common algorithms\nI often see developers reimplementing the same algorithms again and again. By algorithms here I mean patterns that are not project-specific, so they do not contain any business logic, and can be extracted into separate modules or even libraries. Those might be mathematical operations, collection processing, or any other common behavior. Sometimes those algorithms can be long and complicated, like optimized sorting algorithms. There are also many simple examples though, like number coercion in a range:\nval percent = when {\n   numberFromUser > 100 -> 100\n   numberFromUser  0\n   else -> numberFromUser\n}\n\nNotice that we don’t need to implement it because it is already in the stdlib as the coerceIn extension function:\nval percent = numberFromUser.coerceIn(0, 100)\n\nThe advantages of extracting even short but repetitive algorithms are:\n\nProgramming is faster because a single call is shorter than an algorithm (list of steps).\nThey are named, so we need to know the concept by name instead of recognizing it by reading its implementation. This is easier for developers who are familiar with the concept. This might be harder for new developers who are not familiar with these concepts, but it pays off to learn the names of repetitive algorithms. Once they learn it, they will profit from that in the future.\nWe eliminate noise, so it is easier to notice something atypical. In a long algorithm, it is easy to miss hidden pieces of atypical logic. Think of the difference between sortedBy and sortedByDescending. Sorting direction is clear when we call those functions, even though their bodies are nearly identical. If we needed to implement this logic every time, it would be easy to confuse whether implemented sorting has natural or descending order. Comments before an algorithm implementation are not really helpful either. Practice shows that developers do change code without updating comments, and over time we lose trust in them. \nThey can be optimized once, and we profit from this optimization everywhere we use those functions.\n\nLearn the standard library\nCommon algorithms are nearly always already defined by someone else. Most libraries are just collections of common algorithms. The most special among them is the stdlib (standard library). It is a huge collection of utilities, mainly defined as extension functions. Learning the stdlib functions can be demanding, but it is worth it. Without it, developers reinvent the wheel time and time again. To see an example, take a look at this snippet taken from an open-source project:\noverride fun saveCallResult(item: SourceResponse) {\n   var sourceList = ArrayList()\n   item.sources.forEach {\n       var sourceEntity = SourceEntity()\n       sourceEntity.id = it.id\n       sourceEntity.category = it.category\n       sourceEntity.country = it.country\n       sourceEntity.description = it.description\n       sourceList.add(sourceEntity)\n   }\n   db.insertSources(sourceList)\n}\n\nUsing forEach here is useless. I see no advantage to using it instead of a for-loop. What I do see in this code though is a mapping from one type to another. We can use the map function in such cases. Another thing to note is that the way SourceEntity is set-up is far from perfect. This is a JavaBean pattern that is obsolete in Kotlin, and instead, we should use a factory method or a primary constructor (Chapter 5: Objects creation). If for a reason someone needs to keep it this way, we should, at least, use apply to set up all the properties of a single object implicitly. This is our function after a small clean-up:\noverride fun saveCallResult(item: SourceResponse) {\n   val sourceEntries = item.sources.map(::sourceToEntry)\n   db.insertSources(sourceEntries)\n}\n\nprivate fun sourceToEntry(source: Source) = SourceEntity()\n    .apply {\n        id = source.id\n        category = source.category\n        country = source.country\n        description = source.description\n    }\n\nImplementing your own utils\nAt some point in every project, we need some algorithms that are not in the standard library. For instance what if we need to calculate a product of numbers in a collection? It is a well-known abstraction, and so it is good to define it as a universal utility function:\nfun Iterable.product() = \n      fold(1) { acc, i -> acc * i }\n\nYou don’t need to wait for more than one use. It is a well-known mathematical concept and its name should be clear for developers. Maybe another developer will need to use it later in the future and they’ll be happy to see that it is already defined. Hopefully, that developer will find this function. It is bad practice to have duplicate functions achieving the same results. Each function needs to be tested, remembered and maintained, and so should be considered as a cost. We should be aware not to define functions we don’t need, therefore, we should first search for an existing function before implementing our own.\nNotice that product, just like most functions in the Kotlin stdlib, is an extension function. There are many ways we can extract common algorithms, starting from top-level functions, property delegates and ending up on classes. Although extension functions are a really good choice:\n\nFunctions do not hold state, and so they are perfect to represent behavior. Especially if it has no side-effects.\nCompared to top-level functions, extension functions are better because they are suggested only on objects with concrete types. \nIt is more intuitive to modify an extension receiver than an argument. \nCompared to methods on objects, extensions are easier to find among hints since they are suggested on objects. For instance \"Text\".isEmpty() is easier to find than TextUtils.isEmpty(\"Text\"). It is because when you place a dot after \"Text\" you’ll see as suggestions all extension functions that can be applied to this object. To find TextUtils.isEmpty you would need to guess where is it stored, and you might need to search through alternative util objects from different libraries. \nWhen we are calling a method, it is easy to confuse a top-level function with a method from the class or superclass, and their expected behavior is very different. Top-level extension functions do not have this problem, because they need to be invoked on an object. \n\nSummary\nDo not repeat common algorithms. First, it is likely that there is a stdlib function that you can use instead. This is why it is good to learn the standard library. If you need a known algorithm that is not in the stdlib, or if you need a certain algorithm often, feel free to define it in your project. A good choice is to implement it as an extension function.\n"},"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html":{"url":"Part 2 Code design/Chapter 3 Reusability/Item 21 Use property delegation to extract common property patterns.html","title":"Item 21 Use Property Delegation To Extract Common Property Patterns","keywords":"","body":"Item 21: Use property delegation to extract common property patterns\nOne new feature introduced by Kotlin that supports code reuse is property delegation. It gives us a universal way to extract common property behavior. One important example is the lazy property - a property that needs to be initialized on demand during its first use. Such a pattern is really popular, and in languages that do not support its extraction (like Java or JavaScript), it is implemented every time it is needed. In Kotlin, it can easily be extracted using property delegation. In the Kotlin stdlib, we can find the function lazy that returns a property delegate that implements the lazy property pattern:\nval value by lazy { createValue() }\n\nThis is not the only repetitive property pattern. Another important example is the observable property - a property that does something whenever it is changed. For instance, let’s say that you have a list adapter drawing a list. Whenever data change inside it, we need to redraw changed items. Or you might need to log all changes of a property. Both cases can be implemented using observable from stdlib:\nvar items: List by \n   Delegates.observable(listOf()) { _, _, _ ->\n       notifyDataSetChanged()\n   }\n\nvar key: String? by \n   Delegates.observable(null) { _, old, new ->\n       Log.e(\"key changed from $old to $new\")\n   }\n\nThe lazy and observable delegates are not special from the language’s point of view. They can be extracted thanks to a more general property delegation mechanism that can be used to extract many other patterns as well. Some good examples are View and Resource Binding, Dependency Injection (formally Service Location), or Data Binding. Many of these patterns require annotation processing in Java, however Kotlin allows you to replace them with easy, type-safe property delegation.\n// View and resource binding example in Android\nprivate val button: Button by bindView(R.id.button)\nprivate val textSize by bindDimension(R.dimen.font_size)\nprivate val doctor: Doctor by argExtra(DOCTOR_ARG)\n\n// Dependency Injection using Koin \nprivate val presenter: MainPresenter by inject()\nprivate val repository: NetworkRepository by inject()\nprivate val vm: MainViewModel by viewModel()\n\n// Data binding\nprivate val port by bindConfiguration(\"port\")\nprivate val token: String by preferences.bind(TOKEN_KEY)\n\nTo understand how this is possible and how we can extract other common behavior using property delegation, let’s start from a very simple property delegate. Let’s say that we need to track how some properties are used, and for that, we define custom getters and setters that log their changes:\nvar token: String? = null\n   get() {\n       print(\"token returned value $field\")\n       return field\n   }\n   set(value) {\n       print(\"token changed from $field to $value\")\n       field = value\n   }\n\nvar attempts: Int = 0\n   get() {\n       print(\"attempts returned value $field\")\n       return field\n   }\n   set(value) {\n       print(\"attempts changed from $field to $value\")\n       field = value\n   }\n\nEven though their types are different, the behavior of those two properties is nearly identical. It seems like a repeatable pattern that might be needed more often in our project. This behavior can be extracted using property delegation. Delegation is based on the idea that a property is defined by its accessors - the getter in a val, and the getter and setter in a var - and those methods can be delegated into methods of another object. The getter will be delegated to the getValue function, and the setter to the setValue function. We then place such an object on the right side of the by keyword. To keep exactly the same property behaviors as in the example above, we can create the following delegate:\nvar token: String? by LoggingProperty(null)\nvar attempts: Int by LoggingProperty(0)\n\nprivate class LoggingProperty(var value: T) {\n   operator fun getValue(\n       thisRef: Any?, \n       prop: KProperty\n   ): T {\n       print(\"${prop.name} returned value $value\")\n       return value\n   }\n\n    operator fun setValue(\n        thisRef: Any?, \n        prop: KProperty, \n        newValue: T\n    ) {\n        val name = prop.name\n        print(\"$name changed from $value to $newValue\")\n        value = newValue\n    }\n}\n\nTo fully understand how property delegation works, take a look at what by is compiled to. The above token property will be compiled to something similar to the following code6:\n@JvmField\nprivate val `token$delegate` = \n    LoggingProperty(null)\nvar token: String?\n   get() = `token$delegate`.getValue(this, ::token)\n   set(value) {\n       `token$delegate`.setValue(this, ::token, value)\n   }\n\nAs you can see, getValue and setValue methods operate not only on the value, but they also receive a bounded reference to the property, as well as a context (this). The reference to the property is most often used to get its name, and sometimes to get information about annotations. Context gives us information about where the function is used. \nWhen we have multiple getValue and setValue methods but with different context types, different ones will be chosen in different situations. This fact can be used in clever ways. For instance, we might need a delegate that can be used in different kinds of views, but with each of them, it should behave differently based on what is offered by the context:\nclass SwipeRefreshBinderDelegate(val id: Int) {\n    private var cache: SwipeRefreshLayout? = null\n\n    operator fun getValue(\n       activity: Activity, \n       prop: KProperty\n    ): SwipeRefreshLayout {\n       return cache ?: activity\n           .findViewById(id)\n           .also { cache = it }\n    }\n\n    operator fun getValue(\n       fragment: Fragment, \n       prop: KProperty\n    ): SwipeRefreshLayout {\n       return cache ?: fragment.view\n           .findViewById(id)\n           .also { cache = it }\n    }\n}\n\nTo make it possible to use an object as a property delegate, all it needs is getValue operator for val, and getValue and setValue operators for var. This operation can be a member function, but it can be also an extension. For instance, Map can be used as a property delegate:\nval map: Map = mapOf(\n   \"name\" to \"Marcin\",\n   \"kotlinProgrammer\" to true\n)\nval name by map\nprint(name) // Marcin\n\nIt is possible thanks to the fact that there is the following extension function in the Kotlin stdlib:\ninline operator fun  Map\n.getValue(thisRef: Any?, property: KProperty): V1 = \ngetOrImplicitDefault(property.name) as V1\n\nKotlin standard library has some property delegates that we should know. Those are:\n\nlazy\nDelegates.observable\nDelegates.vetoable\nDelegates.notNull\n\nIt is worth to know them, and if you notice a common pattern around properties in your project, remember that you can make your own property delegate. \nSummary\nProperty delegates have full control over properties and have nearly all the information about their context. This feature can be used to extract practically any property behavior. lazy and observable are just two examples from the standard library. Property delegation is a universal way to extract property patterns, and as practice shows, there are a variety of such patterns. It is a powerful and generic feature that every Kotlin developer should have in their toolbox. When we know it, we have more options for common pattern extraction or to define a better API.\n"},"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html":{"url":"Part 2 Code design/Chapter 3 Reusability/Item 22 Use generics when implementing common algorithms.html","title":"Item 22 Use Generics When Implementing Common Algorithms","keywords":"","body":"Item 22: Use generics when implementing common algorithms\nSimilarly, as we can pass a value to a function as an argument, we can pass a type as a type argument. Functions that accept type arguments (so having type parameters) are called generic functions. One known example is the filter function from stdlib that has type parameter T:\ninline fun  Iterable.filter(\n    predicate: (T) -> Boolean\n): List {\n    val destination = ArrayList()\n    for (element in this) { \n        if (predicate(element)) {\n           destination.add(element)\n        }\n    }\n    return destination   \n}\n\nType parameters are useful to the compiler since they allow it to check and correctly infer types a bit further, what makes our programs safer and programming more pleasurable for developers. For instance, when we use filter, inside the lambda expression, the compiler knows that an argument is of the same type as the type of elements in the collection, so it protects us from using something illegal and the IDE can give us useful suggestions. \n\nGenerics were primarily introduced to classes and interfaces to allow the creation of collections with only concrete types, like List or Set. Those types are lost during compilation but when we are developing, the compiler forces us to pass only elements of the correct type. For instance Int when we add to MutableList. Also, thanks to them, the compiler knows that the returned type is User when we get an element from Set. This way type parameters help us a lot in statically-typed languages. Kotlin has powerful support for generics that is not well understood and from my experience even experienced Kotlin developers have gaps in their knowledge especially about variance modifiers. So let’s discuss the most important aspects of Kotlin generics in this and in Item 24: Consider variance for generic types. \nGeneric constraints\nOne important feature of type parameters is that they can be constrained to be a subtype of a concrete type. We set a constraint by placing supertype after a colon. This type can include previous type parameters:\nfun > Iterable.sorted(): List { \n   /*...*/ \n}\n\nfun >\nIterable.toCollection(destination: C): C {\n   /*...*/\n}\n\nclass ListAdapter(/*...*/) { /*...*/ }\n\nOne important result of having a constraint is that instances of this type can use all the methods this type offers. This way when T is constrained as a subtype of Iterable, we know that we can iterate over an instance of type T, and that elements returned by the iterator will be of type Int. When we constraint to Comparable, we know that this type can be compared with itself. Another popular choice for a constraint is Any which means that a type can be any non-nullable type:\ninline fun  Iterable.mapNotNull(\n   transform: (T) -> R?\n): List {\n   return mapNotNullTo(ArrayList(), transform)\n}\n\nIn rare cases in which we might need to set more than one upper bound, we can use where to set more constraints:\nfun  pet(animal: T) where T: GoodTempered { \n   /*...*/ \n}\n\n// OR\n\nfun  pet(animal: T) where T: Animal, T: GoodTempered { \n   /*...*/ \n}\n\nSummary\nType parameters are an important part of Kotlin typing system. We use them to have type-safe generic algorithms or generic objects. Type parameters can be constrained to be a subtype of a concrete type. When they are, we can safely use methods offered by this type.\n"},"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html":{"url":"Part 2 Code design/Chapter 3 Reusability/Item 23 Avoid shadowing type parameters.html","title":"Item 23 Avoid Shadowing Type Parameters","keywords":"","body":"Item 23: Avoid shadowing type parameters\nIt is possible to define property and parameters with the same name due to shadowing. Local parameter shadows outer scope property. There is no warning because such a situation is not uncommon and is rather visible for developers:\nclass Forest(val name: String) {\n\n   fun addTree(name: String) {\n       // ...\n   }\n}\n\nOn the other hand, the same can happen when we shadow class type parameter with a function type parameter. Such a situation is less visible and can lead to serious problems. This mistake is often done by developers not understanding well how generics work. \ninterface Tree\nclass Birch: Tree\nclass Spruce: Tree\n\nclass Forest {\n\n   fun  addTree(tree: T) {\n       // ...\n   }\n}\n\nThe problem is that now Forest and addTree type parameters are independent of each other:\nval forest = Forest()\nforest.addTree(Birch())\nforest.addTree(Spruce())\n\nSuch situation is rarely desired and might be confusing. One solution is that addTree should use the class type parameter T:\nclass Forest {\n\n   fun addTree(tree: T) {\n       // ...\n   }\n}\n\n// Usage\nval forest = Forest()\nforest.addTree(Birch())\nforest.addTree(Spruce()) // ERROR, type mismatch\n\nIf we need to introduce a new type parameter, it is better to name it differently. Note that it can be constrained to be a subtype of the other type parameter:\nclass Forest {\n\n   fun  addTree(tree: ST) {\n       // ...\n   }\n}\n\nSummary\nAvoid shadowing type parameters, and be careful when you see that type parameter is shadowed. Unlike for other kinds of parameters, it is not intuitive and might be highly confusing.\n"},"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html":{"url":"Part 2 Code design/Chapter 3 Reusability/Item 24 Consider variance for generic types.html","title":"Item 24 Consider Variance For Generic Types","keywords":"","body":"Item 24: Consider variance for generic types\nLet’s say that we have the following generic class:\nclass Cup\n\nType parameter T in the above declaration does not have any variance modifier (out or in) and by default, it is invariant. It means that there is no relation between any two types generated by this generic class. For instance, there is no relation between Cup and Cup, Cup or Cup.\nfun main() {\n  val anys: Cup = Cup() // Error: Type mismatch\n  val nothings: Cup = Cup() // Error\n}\n\nIf we need such a relation, then we should use variance modifiers: out or in. out makes type parameter covariant. It means that when A is a subtype of B, and Cup is covariant (out modifier), then type Cup is a subtype of Cup:\nclass Cup\nopen class Dog\nclass Puppy: Dog()\n\nfun main(args: Array) {\n  val b: Cup = Cup() // OK\n  val a: Cup = Cup() // Error\n\n  val anys: Cup = Cup() // OK\n  val nothings: Cup = Cup() // Error\n}\n\nThe opposite effect can be achieved using in modifier, which makes type parameter contravariant. It means that when A is a subtype of B, and Cup is contravariant, then Cup is a supertype of Cup:\nclass Cup\nopen class Dog\nclass Puppy(): Dog()\n\nfun main(args: Array) {\n  val b: Cup = Cup() // Error\n  val a: Cup = Cup() // OK\n\n  val anys: Cup = Cup() // Error\n  val nothings: Cup = Cup() // OK\n}\n\nThose variance modifiers are illustrated in the below diagram:\n\nFunction types\nIn function types (explained deeply in Item 35: Consider defining a DSL for complex object creation) there are relations between function types with different expected types of parameters or return types. To see it practically, think of a function that expects as argument a function accepting an Int and returning Any:\n1 fun printProcessedNumber(transition: (Int)->Any) {\n2    print(transition(42))\n3 }\n\nBased on its definition, such a function can accept a function of type (Int)->Any, but it would also work with: (Int)->Number, (Number)->Any, (Number)->Number, (Any)->Number, (Number)->Int, etc. \nval intToDouble: (Int) -> Number = { it.toDouble() }\nval numberAsText: (Number) -> Any = { it.toShort() }\nval identity: (Number) -> Number = { it }\nval numberToInt: (Number) -> Int = { it.toInt() }\nval numberHash: (Any) -> Number = { it.hashCode() }\nprintProcessedNumber(intToDouble)\nprintProcessedNumber(numberAsText)\nprintProcessedNumber(identity)\nprintProcessedNumber(numberToInt)\nprintProcessedNumber(numberHash)\n\nIt is because between those all types there is the following relation: \n\nNotice that when we go down in this hierarchy, the parameter type moves towards types that are higher in the typing system hierarchy, and the return type moves toward types that are lower. \n\nIt is no coincidence. All parameter types in Kotlin function types are contravariant, as the name of this variance modifier in suggests. All return types in Kotlin function types are covariant, as the name of this variance modifier out suggests\n\nThis fact supports us when we use function types, but it is not the only popular Kotlin type with variance modifiers. A more popular one is List which is covariant in Kotlin (out modifier). Unlike MutableList which is invariant (no variance modifier). To understand why we need to understand the safety of variance modifiers.\nThe safety of variance modifiers\nIn Java, arrays are covariant. Many sources state that the reason behind this decision was to make it possible to create functions, like sort, that makes generic operations on arrays of every type. But there is a big problem with this decision. To understand it, let’s analyze following valid operations, which produce no compilation time error, but instead throws runtime error:\n// Java\nInteger[] numbers = {1, 4, 2, 1};\nObject[] objects = numbers;\nobjects[2] = \"B\"; // Runtime error: ArrayStoreException\n\nAs you can see, casting numbersto Object[] didn’t change the actual type used inside the structure (it is still Integer), so when we try to assign a value of type String to this array, then an error occurs. This is clearly a Java flaw, and Kotlin protects us from that by making Array (as well as IntArray, CharArray, etc.) invariant (so upcasting from Array to Array is not possible). \nTo understand what went wrong here, we should first realize that when a parameter type is expected, we can pass any subtype of this type as well. Therefore when we pass an argument we can do implicit upcasting. \nopen class Dog\nclass Puppy: Dog()\nclass Hound: Dog()\n\nfun takeDog(dog: Dog) {}\n\ntakeDog(Dog())\ntakeDog(Puppy())\ntakeDog(Hound())\n\nThis does not get along with covariance. If a covariant type parameter (out modifier) was present at in-position (for instance a type of a parameter), by connecting covariance and up-casting, we would be able to pass any type we want. Clearly, this wouldn’t be safe since value is typed to a very concrete type and so when it is typed to Dog it cannot hold String. \nclass Box {\n   private var value: T? = null\n\n   // Illegal in Kotlin\n   fun set(value: T) {\n       this.value = value\n   }\n\n   fun get(): T = value ?: error(\"Value not set\")\n}\n\nval puppyBox = Box()\nval dogBox: Box = puppyBox\ndogBox.set(Hound()) // But I have a place for a Puppy\n\nval dogHouse = Box()\nval box: Box = dogHouse\nbox.set(\"Some string\") // But I have a place for a Dog\nbox.set(42) // But I have a place for a Dog\n\nSuch a situation wouldn’t be safe, because after casting, the actual object stays the same and it is only treated differently by the typing system. We are trying to set Int, but we have only a place for a Dog. We would have an error if it was possible. This is why Kotlin prevents such a situation by prohibiting using covariant (out modifier) type parameters at a public in-position. \nclass Box {\n   var value: T? = null // Error\n\n   fun set(value: T) { // Error\n       this.value = value\n   }\n\n   fun get(): T = value ?: error(\"Value not set\")\n}\n\nIt is fine when we limit visibility to private because inside the object we cannot use covariance to up-cast object:\nclass Box {\n   private var value: T? = null\n\n   private set(value: T) {\n       this.value = value\n   }\n\n   fun get(): T = value ?: error(\"Value not set\")\n}\n\nCovariance (out modifier) is perfectly safe with public out-positions and so they are not limited. This is why we use covariance (out modifier) for types that are produced or only exposed. It is often used for producers or immutable data holders. \nOne good example is a List in which T is covariant in Kotlin. Thanks to that when a function expects List, we can give any kind of list without any transformation needed. In MutableList, T is invariant because it is used at in-position and it wouldn’t be safe:\nfun append(list: MutableList) {\n   list.add(42)\n}\n\nval strs = mutableListOf(\"A\", \"B\", \"C\")\nappend(strs) // Illegal in Kotlin\nval str: String = strs[3]\nprint(str)\n\nAnother good example is Response which can benefit a lot from using it. You can see how they can be used in the following snippet. Thanks to the variance modifiers, the following desired facts come true:\n\nWhen we expect Response, response with any subtype of T will be accepted. For instance, when Response is expected, we accept Response as well as Response.\nWhen we expect Response, response with any subtype of T1 and T2 will be accepted. \nWhen we expect Failure, failure with any subtype of T will be accepted. For instance, when Failure is expected, Failure or Failure are accepted. When Failure is expected, we accept Failure as well as Failure.\nSuccess does not need to specify a type of potential error, and Failure does not need to specify a type of potential success value. This is achieved thanks to covariance and Nothing type.\n\nsealed class Response\nclass Success(val value: R): Response()\nclass Failure(val error: E): Response()\n\nA similar problem as with covariance and public in-positions occurs when we are trying to use a contravariant type parameter (in modifier) as a public out-position (return type of a function or a property type). Out-positions also allow implicit up-casting. \nopen class Car\ninterface Boat\nclass Amphibious: Car(), Boat\n\nfun getAmphibious(): Amphibious = Amphibious()\n\nval car: Car = getAmphibious()\nval boat: Boat = getAmphibious()\n\nThis fact does not get along with contravariance (in modifier). They both can be used again to move from any box to expect anything else:\nclass Box(\n   // Illegal in Kotlin\n   val value: T\n)\n\nval garage: Box = Box(Car())\nval amphibiousSpot: Box = garage\nval boat: Boat = garage.value // But I only have a Car\n\nval noSpot: Box = Box(Car())\nval boat: Nothing = noSpot.value \n// I cannot produce Nothing!\n\nTo prevent such a situation, Kotlin prohibits using contravariant (in modifier) type parameters at public out-positions:\nclass Box {\n   var value: T? = null // Error\n\n   fun set(value: T) { \n       this.value = value\n   }\n\n   fun get(): T = value // Error\n      ?: error(\"Value not set\")\n}\n\nAgain, it is fine when those elements are private:\nclass Box {\n   private var value: T? = null\n\n   fun set(value: T) { \n       this.value = value\n   }\n\n   private fun get(): T = value\n      ?: error(\"Value not set\")\n}\n\nThis way we use contravariance (in modifier) for type parameters that are only consumed or accepted. One known example is kotlin.coroutines.Continuation:\npublic interface Continuation {\n   public val context: CoroutineContext\n   public fun resumeWith(result: Result)\n}\n\nVariance modifier positions\nVariance modifiers can be used in two positions. The first one, the declaration-side, is more common. It is a modifier on the class or interface declaration. It will affect all the places where the class or interface is used.\n// Declaration-side variance modifier\nclass Box(val value: T)\nval boxStr: Box = Box(\"Str\")\nval boxAny: Box = boxStr\n\nThe other one is the use-site, which is a variance modifier for a particular variable.\nclass Box(val value: T)\nval boxStr: Box = Box(\"Str\")\n// Use-side variance modifier\nval boxAny: Box = boxStr\n\nWe use use-site variance when for some reason we cannot provide variance modifiers for all instances, and yet you need it for one variable. For instance, MutableList cannot have in modifier because then it wouldn’t allow returning elements (as described in the next section), but for a single parameter type we can make its type contravariant (in modifier) to allow any collections that can accept some type:\ninterface Dog\ninterface Cutie\ndata class Puppy(val name: String): Dog, Cutie\ndata class Hound(val name: String): Dog\ndata class Cat(val name: String): Cutie\n\nfun fillWithPuppies(list: MutableList) {\n   list.add(Puppy(\"Jim\"))\n   list.add(Puppy(\"Beam\"))\n}\n\nval dogs = mutableListOf(Hound(\"Pluto\"))\nfillWithPuppies(dogs)\nprintln(dogs) \n// [Hound(name=Pluto), Puppy(name=Jim), Puppy(name=Beam)]\n\nval animals = mutableListOf(Cat(\"Felix\"))\nfillWithPuppies(animals)\nprintln(animals) \n// [Cat(name=Felix), Puppy(name=Jim), Puppy(name=Beam)]\n\nNotice that when we use variance modifiers, some positions are limited. When we have MutableList, we can use get to get elements and we receive an instance typed as T, but we cannot use set because it expects us to pass an argument of type Nothing. It is because list with any subtype of T might be passed there including the subtype of every type that is Nothing. When we use MutableList, we can use both get and set, but when we use get, the returned type is Any? because there might be a list with any supertype of T including the supertype of every type that is Any?. Therefore, we can freely use out when we only read from a generic object, and in when we only modify that generic object. \nSummary\nKotlin has powerful generics that support constraints and also allow to have a relation between generic types with different type arguments declared both on declaration-side as well as on use-side. This fact gives us great support when we operate on generic objects. We have the following type modifiers:\n\nThe default variance behavior of a type parameter is invariance. If in Cup, type parameter T is invariant and A is a subtype of B then there is no relation between Cup and Cup.\nout modifier makes type parameter covariant. If in Cup, type parameter T is covariant and A is a subtype of B, then Cup is a subtype of Cup. Covariant types can be used at out-positions.\nin makes type parameter contravariant. If in Cup, type parameter T is contravariant and A is a subtype of B, then Cup is a subtype of Cup. Contravariant types can be used at in-positions.\n\nIn Kotlin:\n\nType parameter of List and Set are covariant (out modifier) so for instance, we can pass any list where List is expected. Also, the type parameter representing value type in Map is covariant (out modifier). Type parameters of Array, MutableList, MutableSet, MutableMap are invariant (no variance modifier).\nIn function types parameter types are contravariant (in modifier) and return type is covariant (out modifier).\nWe use covariance (out modifier) for types that are only returned (produced or exposed).\nWe use contravariance (in modifier) for types that are only accepted.\n\n"},"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html":{"url":"Part 2 Code design/Chapter 3 Reusability/Item 25 Reuse between different platforms by extracting common modules.html","title":"Item 25 Reuse Between Different Platforms By Extracting Common Modules","keywords":"","body":"Item 25: Reuse between different platforms by extracting common modules\nCompanies rarely write applications only for just a single platform. They would rather develop a product for two or more platforms, and their products, nowadays, often rely on several applications running on different platforms. Think of client and server applications communicating through network calls. As they need to communicate, there are often similarities that can be reused. Implementations of the same product for different platforms generally have even more similarities. Especially their business logic is often nearly identical. These projects can profit significantly from sharing code.\nFull-stack development\nLots of companies are based on web development. Their product is a website, but in most cases, those products need a backend application (also called server-side). On websites, JavaScript is the king. It nearly has a monopoly on this platform. On the backend, a very popular option (if not the most popular) is Java. Since these languages are very different, it is common that backend and web development are separated. Things can change, however. Now Kotlin is becoming a popular alternative to Java for backend development. For instance with Spring, the most popular Java framework, Kotlin is a first-class citizen. Kotlin can be used as an alternative to Java in every framework. There are also many Kotlin backend frameworks like Ktor. This is why many backend projects migrate from Java to Kotlin. A great part of Kotlin is that it can also be compiled into JavaScript. There are already many Kotlin/JS libraries, and we can use Kotlin to write different kinds of web applications. For instance, we can write a web frontend using the React framework and Kotlin/JS. This allows us to write both the backend and the website all in Kotlin. What is even better, we can have parts that compile both to JVM bytecode and to JavaScript. Those are shared parts. We can place there, for instance, universal tools, API endpoint definitions, common abstractions, etc. that we might want to reuse. \n\nMobile development\nThis capability is even more important in the mobile world. We rarely build only for Android. Sometimes we can live without a server, but we generally need to implement an iOS application as well. Each application is written for a different platform using different languages and tools. In the end, Android and iOS versions of the same application are very similar. They are often designed differently, but they nearly always have the same logic inside. Using Kotlin multiplatform capabilities, we can implement this logic only once and reuse it between those two platforms. We can make a common module and implement business logic there. Business logic should be independent of frameworks and platforms anyway (Clean Architecture). Such common logic can be written in pure Kotlin or using other common modules, and it can then be used on different platforms.\nIn Android, it can be used directly since Android is built the same way using Gradle. The experience is similar to having those common parts in our Android project.\nFor iOS, we compile these common parts to an Objective-C framework using Kotlin/Native which is compiled using LLVM. We can then use it from Swift in Xcode or AppCode. Alternatively, we can implement our whole application using Kotlin/Native. \n\nLibraries\nDefining common modules is also a powerful tool for libraries. In particular, those that do not depend strongly on platform can easily be moved to a common module and allow users to use them from all languages running on the JVM, JavaScript or natively (so from Java, Scala, JavaScript, CoffeeScript, TypeScript, C, Objective-C, Swift, Python, C#, etc.). \nAll together\nWe can use all those platforms together. Using Kotlin, we can develop for nearly all kinds of popular devices and platforms, and reuse code between them however we want. Just a few examples of what we can write in Kotlin:\n\nBackend in Kotlin/JVM, for instance on Spring or Ktor\nWebsite in Kotlin/JS, for instance in React\nAndroid in Kotlin/JVM, using the Android SDK\niOS Frameworks that can be used from Objective-C or Swift, using Kotlin/Native\nDesktop applications in Kotlin/JVM, for instance in TornadoFX\nRaspberry Pi, Linux or Mac OS programs in Kotlin/Native \n\nHere is a typical application visualized:\n\nWe are still learning how to organize our code to make code reuse safe and efficient in the long run. But it is good to know the possibilities this approach gives us. We can reuse between different platforms using common modules. This is a powerful tool to eliminate redundancy and to reuse common logic and common algorithms.\n"},"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html":{"url":"Part 2 Code design/Chapter 4 Abstraction design/Introduction.html","title":"Introduction","keywords":"","body":"Chapter 4: Abstraction design\nAbstraction is one of the most important concepts of the programming world. In OOP (Object-Oriented Programming) abstraction is one of three core concepts (along with encapsulation and inheritance). In the functional programming community, it is common to say that all we do in programming is abstraction and composition. As you can see, we treat abstraction seriously. Although what is an abstraction? The definition I find most useful comes from Wikipedia:\n\nAbstraction is a process or result of generalization, removal of properties, or distancing of ideas from objects. \nhttps://en.wikipedia.org/wiki/Abstraction_(disambiguation)\n\nIn other words, by abstraction we mean a form of simplification used to hide complexity. A fundamental example in programming is the interface. It is an abstraction of a class because it expresses only a subset of traits. Concretely, it is a set of methods and properties. \n\nThere is no single abstraction for every instance. There are many. In terms of objects, it can be expressed by many interfaces implemented or by multiple superclasses. It is an inseparable feature of abstraction that it decides what should be hidden and what should be exposed. \n\nAbstraction in programming\nWe often forget how abstract everything we do in programming is. When we type a number, it is easy to forget that it is actually represented by zeros and ones. When we type some String, it is easy to forget that it is a complex object where each character is represented on a defined charset, like UTF-8. \nDesigning abstractions is not only about separating modules or libraries. Whenever you define a function, you hide its implementation behind this function’s signature. This is an abstraction! \nLet’s do a thought experiment: what if it wasn’t possible to define a method maxOf that would return the biggest of two numbers:\nfun maxOf(a: Int, b: Int) = if (a > b) a else b\n\nOf course, we could get along without ever defining this function, by always writing the full expression and never mentioning maxOf explicitly: \nval biggest = if (x > y) x else y\n\nval height = \n    if (minHeight > calculatedHeight) minHeight \n    else calculatedHeight\n\nHowever, this would place us at a serious disadvantage. It would force us to always work at the level of the particular operations that happen to be primitives in the language (comparison, in this case) rather than in terms of higher-level operations. Our programs would be able to compute which number is bigger, but our language would lack the ability to express the concept of choosing a bigger number. This problem is not abstract at all. Until version 8, Java lacked the capability to easily express mapping on a list. Instead, we had to use repeatable structures to express this concept:\n// Java\nList names = new ArrayList<>();\nfor (User user : users) {\n   names.add(user.getName());\n}\n\nIn Kotlin, since the beginning we have been able to express it using a simple function:\nval names = users.map { it.name }\n\nLazy property initialization pattern still cannot be expressed in Java. In Kotlin, we use a property delegate instead:\nval connection by lazy { makeConnection() }\n\nWho knows how many other concepts are there, that we do not know how to extract and express directly. \nOne of the features we should expect from a powerful programming language is the ability to build abstractions by assigning names to common patterns2. In one of the most rudimentary forms, this is what we achieve by extracting functions, delegates, classes, etc. As a result, we can then work in terms of the abstractions directly. \nCar metaphor\nMany things happen when you drive a car. It requires the coordinated work of the engine, alternator, suspension and many other elements. Just imagine how hard driving a car would be if it required understanding and following each of these elements in real-time! Thankfully, it doesn’t. As a driver, all we need to know is how to use a car interface–the steering wheel, gear shifter, and pedals–to operate the vehicle. Everything under the hood can change. A mechanic can change from petrol to natural gas, and then to diesel, without us even knowing about it. As cars introduce more and more electronic elements and special systems, the interface remains the same for the most part. With such changes under the hood, the car’s performance would likely also change; however, we are able to operate the car regardless.\nA car has a well-defined interface. Despite all of the complex components, it is simple to use. The steering wheel represents an abstraction for left-right direction change, the gear shifter is an abstraction for forward-backward direction change, the gas pedal an abstraction for acceleration, and the brake an abstraction of deceleration. These are all we need in an automobile. These are abstractions that hide all the magic happening under the hood. Thanks to that, users do not need to know anything about car construction. They only need to understand how to drive it. Similarly, creators or car enthusiasts can change everything in the car, and it is fine as long as driving stays the same. Remember this metaphor as we will refer to it throughout the chapter. \nSimilarly, in programming, we use abstractions mainly to:\n\nHide complexity\nOrganize our code\nGive creators the freedom to change\n\nThe first reason was already described in Chapter 3: Reusability and I assume that it is clear at this point why it is important to extract functions, classes or delegates to reuse common logic or common algorithms. In Item 26: Each function should be written in terms of a single level of abstraction, we will see how to use abstractions to organize the code. In Item 27: Use abstraction to protect code against changes, we will see how to use abstractions to give ourselves the freedom to change. Then we will spend the rest of this chapter on creating and using abstractions. \nThis is a pretty high-level chapter, and the rules presented here are a bit more abstract. Just after this chapter, we will cover some more concrete aspects of OOP design in Chapter 5: Object creation and Chapter 6: Class design. They will dive into deeper aspects of class implementation and use, but they will both build on this chapter.\n"},"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html":{"url":"Part 2 Code design/Chapter 4 Abstraction design/Item 26 Each function should be written in terms of a single level of abstraction.html","title":"Item 26 Each Function Should Be Written In Terms Of A Single Level Of Abstraction","keywords":"","body":"Item 26: Each function should be written in terms of a single level of abstraction\nA computer is an extremely complex device, but we can work with it thanks to the fact that its complexity was split into different elements in distinct layers. \nFrom a programmer’s perspective, the lowest abstraction layer of a computer is hardware. Going up, since we generally write code for processors, the next interesting layer is a processor control commands. For readability, they are expressed in a very simple language that is one-to-one translated into those commands. This language is called Assembly. Programming in the Assembly language is difficult, and it is absolutely unthinkable to build today’s applications this way. To simplify programming, engineers introduced a compiler: a program that translates one language into another (generally a lower-level one). First compilers were written in the Assembly language, and they translated code written as text into Assembly instructions. This is how the first higher-level languages were created. They were in turn used to write compilers for better languages. Thus, introducing C, C++ and other high-level languages. These languages are used to write programs and applications. Later, the concepts of the abstract machine and interpreted languages were invented and it is hard to place languages like Java or JavaScript on this pyramid, but the general notion of abstraction layers stayed as an idea.\nThe big advantage of having well-separated layers is that when one operates on a specific layer, they can rely on lower levels working as expected, removing the need to fully understand the details. We can program without knowing anything about assembler or JVM bytecode. This is very convenient. Similarly, when assembler or JVM bytecode needs to change, they don’t need to worry about changing applications as long as creators adjust the upper layer - what native languages or Java are compiled to. Programmers operate on a single layer, often building for upper layers. This is all developers need to know and it is very convenient.\n\nLevel of abstraction\nAs you can see, layers were built upon layers in computer science. This is why computer scientists started distinguishing how high-level something is. The higher the level, the further from physics. In programming, we say that the higher the level, the further from the processor. The higher the level, the fewer details we need to worry about. But you are trading this simplicity with a lack of control. In C, memory management is an important part of your job. In Java, the Garbage Collector handles it automatically for you, but optimizing memory usage is much harder.\nSingle Level of Abstraction principle\nJust like computer science problems were extracted into separate layers, we can create abstractions in our code as well. The most basic tool we use for that is a function. Also, the same as in computers, we prefer to operate on a single level of abstraction at a time. This is why the programming community developed the “Single Level of Abstraction” principle that states that: Each function should be written in terms of a single level of abstraction.\nImagine that you need to create a class to represent a coffee machine with a single button to make coffee. Making coffee is a complex operation that needs many different parts of a coffee machine. We’ll represent it by a class with a single function named makeCoffee. We could definitely implement all the necessary logic inside that unique function:\nclass CoffeeMachine {\n\n   fun makeCoffee() {\n       // Declarations of hundreds of variables\n       // Complex logic to coordinate everything\n       // with many low-level optimizations\n   }\n}\n\nThis function could have hundreds of lines. Believe me, I’ve seen such things. Especially in old programs. Such functions are absolutely unreadable. It would be really hard to understand the general behavior of the function because, when we read it, we would constantly focus our attention on the details. It would also be hard to find anything. Just imagine that you are asked to make a small modification, like to modify the temperature of the water, and to do that, you would probably need to understand this whole function, and it would be absurdly hard. Our memory is limited and we do not want a programmer to waste time on the unnecessary details. This is why it is better to extract high-level steps as separate functions:\nclass CoffeeMachine {\n\n   fun makeCoffee() {\n       boilWater()\n       brewCoffee()\n       pourCoffee()\n       pourMilk()\n   }\n\n   private fun boilWater() {\n       // ...\n   }\n\n   private fun brewCoffee() {\n       // ...\n   }\n\n   private fun pourCoffee() {\n       // ...\n   }\n\n   private fun pourMilk() {\n       // ...\n   }\n}\n\nNow you can clearly see what the general flow of this function is. Those private functions are just like chapters in a book. Thanks to that, if you need to change something, you can jump directly where it is implemented. We just extracted higher-level procedures, which greatly simplified the comprehension of our first procedure. We made it readable, and if someone wanted to understand it at a lower level, they can just jump there and read it. By extracting very simple abstractions, we improved readability. \nFollowing this rule, all these new functions should be just as simple. This is a general rule - functions should be small and have a minimal number of responsibilities. If one of them is more complex, we should extract intermediary abstractions. As a result, we should achieve many small and readable functions, all localized at a single level of abstraction. At every level of abstraction we operate on abstract terms (methods and classes) and if you want to clarify them, you can always jump into their definition (in IntelliJ or Android Studio, holding the Ctrl key [Command on Mac] while you click on the function name will take you to the implementation). This way we lose nothing from extracting those functions, and make our code more readable. \nAdditional bonus is that functions extracted this way are easier to reuse and test. Say that we now need to make a separate function to produce espresso coffee and the difference is that it does not have milk. When parts of the process are extracted, we can now reuse them easily:\nfun makeEspressoCoffee() {\n     boilWater()\n     brewCoffee()\n     pourCoffee()\n}\n\nIt is also so that we can now unit test separately smaller functions like boilWater or brewCoffee, instead of more complex functions like makeCoffee or makeEspressoCoffee. \nAbstraction levels in program architecture\nThe notion of layers of abstractions is also applicable to higher levels than functions. We separate abstraction to hide details of a subsystem, allowing the separation of concerns to facilitate interoperability and platform independence. It means defining higher levels in problem-domain terms. \n\nThis notion is also important when we design modular systems. Separated modules are a strong separation that can hide layer-specific elements. When we write applications, the general understanding is that those modules that represent input or output (views is frontend, HTTP request handlers on the backend) are lower-layer modules. On the other hand, those representing use cases and business logic are higher-level layers. \nWe say that projects with well-separated layers stratified. In a well-stratified project, one can view the system at any single level and get a consistent view. Stratification is generally desired in programs. \nSummary\nMaking separate abstraction layers is a popular concept used in programming. It helps us organize knowledge and hide details of a subsystem, allowing the separation of concerns to facilitate interoperability and platform independence. We separate abstractions in many ways, like functions, classes, modules. We should try not to make any of those layers too big. Smaller abstractions operating on a single layer are easier to understand. The general notion of abstraction level is that the closer to concrete actions, processor or input/output, the lower level it is. In a lower abstraction layers we define a language of terms (API) for a higher layer or layers.\n"},"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html":{"url":"Part 2 Code design/Chapter 4 Abstraction design/Item 27 Use abstraction to protect code against changes.html","title":"Item 27 Use Abstraction To Protect Code Against Changes","keywords":"","body":"Item 27: Use abstraction to protect code against changes\n\nWalking on water and developing software from a specification are easy if both are frozen\n– Edward V Berard ; Essays on object-oriented software engineering, p. 46\n\nWhen we hide actual code behind abstractions like functions or classes, we do not only protect users from those details, but we also give ourselves the freedom to change this code later. Often without users even knowing about it. For instance, when you extract a sorting algorithm into a function, you can later optimize its performance without changing the way it is used. \nThinking about the car metaphor mentioned before, car manufacturers and mechanics can change everything under the hood of the car, and as long as the operation remains the same, a user won’t notice. This provides manufacturers the freedom to make more environment-friendly cars or to add more sensors to make cars safer. \nIn this item, we will see how different kinds of abstractions give us freedom by protecting us from a variety of changes. We will examine three practical cases, and in the end, discuss finding a balance in a number of abstractions. Let’s start with the simplest kind of abstraction: constant value.\nConstant\nLiteral constant values are rarely self-explanatory and they are especially problematic when they repeat in our code. Moving the values into constant properties not only assigns the value a meaningful name, but also helps us better manage when this constant needs to be changed. Let’s see a simple example with password validation:\nfun isPasswordValid(text: String): Boolean {\n   if(text.length \nThe number 7 can be understood based on context, but it would be easier if it would be extracted into a constant:\nconst val MIN_PASSWORD_LENGTH = 7\n\nfun isPasswordValid(text: String): Boolean {\n   if(text.length \nWith that, it is easier to modify the minimum password size. We don’t need to understand validation logic, but instead, we can just change this constant. This is why it is especially important to extract values that are used more than once. For instance, the maximum number of threads that can connect to our database at the same time: \nval MAX_THREADS = 10\n\nOnce it is extracted, you can easily change it when you need. Just imagine how hard it would be to change it if this number was spread all over the project. \nAs you can see, extracting constant:\n\nNames it\nHelps us change its value in the future\n\nWe will see similar results for different kinds of abstractions as well.\nFunction\nImagine that you are developing an application and you noticed that you often need to display a toast message to a user. This is how you do it programmatically:\n1 Toast.makeText(this, message, Toast.LENGTH_LONG).show()\n\nWe can extract this common algorithm into a simple extension function for displaying toast:\nfun Context.toast(\n   message: String, \n   duration: Int = Toast.LENGTH_LONG\n) {\n   Toast.makeText(this, message, duration).show()\n}\n\n// Usage\ncontext.toast(message)\n\n// Usage in Activity or subclasses of Context\ntoast(message)\n\nThis change helped us extract a common algorithm so that we don’t need to remember how to display a toast every time. It would also help if the way to display a toast, in general, was to change (what is rather unlikely). Though there are changes we are not prepared for. \nWhat if we had to change the way we display messages to the user from toasts to snackbars (a different kind of message display)? A simple answer is that having this functionality extracted, we can just change the implementation inside this function and rename it. \nfun Context.snackbar(\n   message: String, \n   length: Int = Toast.LENGTH_LONG\n) {\n   //...\n}\n\n\nThis solution is far from perfect. First of all, renaming the function might be dangerous even if it is used only internally8. Especially if other modules depend on this function. The next problem is that parameters cannot be automatically changed so easily, thus we are still stuck with the toast API to declare the message duration. This is very problematic. When we display a snackbar we should not depend on a field from Toast. On the other hand, changing all usages to use the Snackbar’s enum would be problematic as well:\nfun Context.snackbar(\n   message: String, \n   duration: Int = Snackbar.LENGTH_LONG\n) {\n   //...\n}\n\nWhen we know that the way the message is displayed might change, we know that what is really important is not how this message is displayed, but instead the fact that we want to display the message to a user. What we need is a more abstract method to display a message. Having that in mind, a programmer could hide toast display behind a higher-level function showMessage, which would be independent of the concept of toast:\nfun Context.showMessage(\n    message: String, \n    duration: MessageLength = MessageLength.LONG\n) {\n   val toastDuration = when(duration) {\n       SHORT -> Toast.LENGTH_SHORT\n       LONG -> Toast.LENGTH_LONG\n   }\n   Toast.makeText(this, message, toastDuration).show()\n}\n\nenum class MessageLength { SHORT, LONG }\n\nThe biggest change here is the name. Some developers might neglect the importance of this change saying that a name is just a label and it doesn’t matter. This perspective is valid from the compiler’s point of view, but not from a developer’s point of view. A function represents an abstraction, and the signature of this function informs us what abstraction this is. A meaningful name is very important. \nA function is a very simple abstraction, but it is also very limited. A function does not hold a state. Changes in a function signature often influence all usages. A more powerful way to abstract away implementation is by using classes. \nClass\nHere is how we can abstract message display into a class:\nclass MessageDisplay(val context: Context) {\n\n   fun show(\n       message: String, \n       duration: MessageLength = MessageLength.LONG\n   ) {\n       val toastDuration = when(duration) {\n           SHORT -> Toast.LENGTH_SHORT\n           LONG -> Toast.LENGTH_LONG\n       }\n       Toast.makeText(context, message, toastDuration)\n            .show()\n   }\n}\n\nenum class MessageLength { SHORT, LONG }\n\n// Usage\nval messageDisplay = MessageDisplay(context)\nmessageDisplay.show(\"Message\")\n\nThe key reason why classes are more powerful than functions is that they can hold a state and expose many functions (class member functions are called methods). In this case, we have a context in the class state, and it is injected via the constructor. Using a dependency injection framework we can delegate the class creation:\n@Inject lateinit var messageDisplay: MessageDisplay\n\nAdditionally, we can mock the class to test the functionality of other classes that depend on the specified class. This is possible because we can mock classes for testing purposes:\nval messageDisplay: MessageDisplay = mockk()\n\nFurthermore, one could add more methods to set up message display:\n1 messageDisplay.setChristmasMode(true)\nAs you can see, the class gives us more freedom. But they still have their limitations. For instance, when a class is final, we know what exact implementation is under its type. We have a bit more freedom with open classes because one could serve a subclass instead. This abstraction is still strongly bound to this class though. To get more freedom we can make it even more abstract and hide this class behind an interface. \nInterface\nReading the Kotlin standard library, you might notice that nearly everything is represented as an interface. Just take a look at a few examples:\n\nlistOf function returns List, which is an interface. This is similar to other factory methods (we will explain them in Item 33, Consider factory methods instead of constructors).\nCollection processing functions are extension functions on Iterable or Collection, and return List, Map, etc. Those are all interfaces.\nProperty delegates are hidden behind ReadOnlyProperty or ReadWriteProperty which are also interfaces. Actual classes are often private. Function lazy declares interface Lazy as its return type as well. \n\nIt is common practice for library creators to restrict inner class visibility and expose them from behind interfaces, and there are good reasons for that. This way library creators are sure that users do not use these classes directly, so they can change their implementations without any worries, as long as the interfaces stay the same. This is exactly the idea behind this item - by hiding objects behind an interface we abstract away any actual implementation and we force users to depend only on this abstraction. This way we reduce coupling. \nIn Kotlin, there is another reason behind returning interfaces instead of classes - Kotlin is a multiplatform language and the same listOf returns different list implementations for Kotlin/JVM, Kotlin/JS, and Kotlin/Native. This is an optimization - Kotlin generally uses platform-specific native collections. This is fine because they all respect the List interface. \nLet’s see how we can apply this idea to our message display. This is how it can look like when we hide our class behind an interface:\n 1 interface MessageDisplay {\n 2    fun show(\n 3        message: String, \n 4        duration: MessageLength = LONG\n 5    )\n 6 }\n 7 \n 8 class ToastDisplay(val context: Context): MessageDisplay {\n 9 \n10    override fun show(\n11        message: String, \n12        duration: MessageLength\n13    ) {\n14        val toastDuration = when(duration) {\n15            SHORT -> Toast.LENGTH_SHORT\n16            LONG -> Toast.LENGTH_LONG\n17        }\n18        Toast.makeText(context, message, toastDuration)\n19           .show()\n20    }\n21 }\n22 \n23 enum class MessageLength { SHORT, LONG }\nIn return, we got more freedom. For instance, we can inject the class that displays toasts on tablets, and snackbars on phones. One might also use MessageDisplay in a common module shared between Android, iOS, and Web. Then we could have different implementations for each platform. For instance, in iOS and Web, it could display an alert. \nAnother benefit is that interface faking for testing is simpler than class mocking, and it does not need any mocking library:\n1 val messageDisplay: MessageDisplay = TestMessageDisplay()\nFinally, the declaration is more decoupled from usage, and so we have more freedom in changing actual classes like ToastDisplay. On the other hand, if we want to change the way it is used, we would need to change the MessageDisplay interface and all the classes that implement it. \nNext ID\nLet’s discuss one more example. Let’s say that we need a unique ID in our project. A very simple way is to have a top-level property to hold next ID, and increment it whenever we need a new ID:\n1 var nextId: Int = 0\n2 \n3 // Usage\n4 \n5 val newId = nextId++\nSeeing such usage spread around our code should cause some alerts. What if we wanted to change the way IDs are created. Let’s be honest, this way is far from perfect:\n\nWe start at 0 whenever we cold-start our program. \nIt is not thread-safe.\n\nSupposing that for now we accept this solution, we should protect ourselves from change by extracting ID creation into a function:\n1 private var nextId: Int = 0\n2 fun getNextId(): Int = nextId++\n3 \n4 // Usage\n5 val newId = getNextId()\nNotice though that this solution only protects us from ID creation change. There are many changes that we are still prone to. The biggest one is the change of ID type. What if one day we need to keep ID as a String? Also notice that someone seeing that ID is represented as an Int, might use some type-dependent operations. For instance use comparison to check which ID is older. Such assumptions might lead to serious problems. To prevent that and to let ourselves change ID type easily in the future, we might extract ID as a class:\n1 data class Id(private val id: Int)\n2 \n3 private var nextId: Int = 0\n4 fun getNextId(): Id = Id(nextId++)\nOnce again, it is clear that more abstractions give us more freedom, but also make definitions and usage harder to define and to understand. \nAbstractions give freedom\nWe’ve presented a few common ways to introduce abstraction:\n\nExtracting constant\nWrapping behavior into a function\nWrapping function into a class\nHiding a class behind an interface\nWrapping universal objects into specialistic\n\nWe’ve seen how each of those gave us different kinds of freedom. Notice that there are many more tools available. Just to name a few:\n\nUsing generic type parameters\nExtracting inner classes\nRestricting creation, for instance by forcing object creation via factory method9\n\nOn the other hand, abstractions have their dark side. They give us freedom and split code, but often they can make code harder to understand and to modify. Let’s talk about problems with abstractions. \nProblems with abstraction\nAdding new abstractions requires readers of the code to learn or already be familiar with the specific concept. When we define another abstraction, it is another thing that needs to be understood in our project. Of course, it is less of a problem when we restrict abstractions visibility (Item 30: Minimize elements visibility) or when we define abstractions that are used only for concrete tasks. This is why modularity is so important in bigger projects. We need to understand that defining abstraction is having this cost and we should not abstract everything by default. \nWe can infinitely extract abstractions, but soon this will make more harm than good. This fact was parodied in the FizzBuzz Enterprise Edition project10 where authors showed that even for such a simple problem as Fizz Buzz11, one can extract a ridiculous amount of abstractions making this problem extremely hard to use and understand. At the time of writing this book, there are 61 classes and 26 interfaces. All that to solve a problem that generally requires less than 10 lines of code. Sure, applying changes at any level is easy, though on the other hand understanding what does this code do and how does it do it is extremely hard. \n\nAbstractions can hide a lot. On the one hand, it is easier to do development when there is less to think about, on the other hand, it becomes harder to understand the consequences of our actions when we use too many abstractions.One might use the showMessage function thinking that it still displays toast, and we might be surprised when it displays a snackbar. One seeing that unintended toast message is displayed might look for Toast.makeText and have problems finding it because it is displayed using showMessage. Having too many abstractions makes it harder to understand our code. It can also make us anxious when we are not sure what are the consequences of our actions. \nTo understand abstractions, examples are very helpful. Unit test or examples in the documentation that shows how an element can be used, make abstractions more real for us. For the same reason, I filled this book with concrete examples for most ideas I present. It is hard to understand abstract descriptions. It is also easy to misunderstand them. \nWhere is the balance?\nThe rule of thumb is: Every level of complexity gives us more freedom and organizes our code, but also makes it harder to understand what is really going on in our project. Both extremes are bad. The best solution is always somewhere in between, and where is it exactly, it depends on many factors like: \n\nTeam size\nTeam experience\nProject size\nFeature set\nDomain knowledge\n\nWe are constantly looking for balance in every project. Finding a proper balance is almost an art, as it requires intuition gained over hundreds if not thousands of hours architecting and coding projects. Here are a few suggestions I can give:\n\nIn bigger projects with more developers, it is much harder to change object creation and usage later, so we prefer more abstract solutions. Also, a separation between modules or parts is especially useful then. \nWe care less about how hard creation is when we use a dependency injection framework because we probably only need to define this creation once anyway. \nTesting or making different application variants might require us to use some abstractions. \nWhen your project is small and experimental, you can enjoy your freedom to directly make changes without the necessity of dealing with abstractions. Although when it gets serious, change it as soon as possible. \n\nAnother thing that we need to constantly think about is what might change and what are the odds for each change. For instance, there is a very small chance that the API for toast display will change, but there is a reasonable probability that we will need to change the way we display a message. Is there a chance we might need to mock this mechanism? A chance that one day you will need a more generic mechanism? Or a mechanism that might be platform-independent? These probabilities are not 0, so how big are they? Observing how things change over the years gives us better and better intuition. \nSummary\nAbstractions are not only to eliminate redundancy and to organize our code. They also help us when we need to change our code. Although using abstractions is harder. They are something we need to learn and understand. It is also harder to understand the consequences when we use abstract structures. We need to understand both the importance and risk of using abstractions, and we need to search for a balance in every project. Having too many or too little abstractions would not be an ideal situation.\n"},"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html":{"url":"Part 2 Code design/Chapter 4 Abstraction design/Item 28 Specify API stability.html","title":"Item 28 Specify API Stability","keywords":"","body":"Item 28: Specify API stability\nLife would be much harder if every car was totally different to drive. There are some elements in cars that are not universal, like the way we preset radio stations, and I often see car owners having trouble using them. We are too lazy to learn meaningless and temporary interfaces. We prefer stable and universal ones.\nSimilarly, in programming, we much prefer stable and possibly standard Application Programming Interfaces (API). The main reasons are:\n\nWhen the API changes and developers get the update, they will need to manually update their code. This point can be especially problematic when many elements depend on this API. Fixing its use or giving an alternative might be hard. Especially if our API was used by another developer in a part of our project we are not familiar with. If it is a public library, we cannot adjust these uses ourselves, but instead, our users have to make the changes. From a user’s perspective, it is not a comfortable situation. Small changes in a library might require many changes in different parts of the codebase. When users are afraid of such changes, they stay on older library versions. This is a big problem because updating becomes harder and harder for them, and new updates might have things they need, like bug fixes or vulnerability corrections. Older libraries may no longer be supported or might stop working entirely. It is a very unhealthy situation when programmers are afraid to use newer stable releases of libraries. \nUsers need to learn a new API. This is additional energy users are generally unwilling to spend. What’s more, they need to update knowledge that changed. This is painful for them as well, so they avoid it. Not healthy either: outdated knowledge can lead to security issues and learning changes the hard way. \n\nOn the other hand, designing a good API is very hard, and so creators want to make changes to improve it. The solution that we (the programming community) developed is that we specify API stability. \nThe simplest way is that creators should specify in the documentation to make it clear if an API or some of its parts are unstable. More formally, we specify the stability of the whole library or module using versions. There are many versioning systems, though there is one that is now so popular it can be treated nearly like a standard. It is Semantic Versioning (SemVer), and in this system, we compose version number from 3 parts: MAJOR.MINOR.PATCH. Each of those parts is a positive integer starting from 0, and we increment each of them when changes in the public API have concrete importance. So we increment:\n\nMAJOR version when you make incompatible API changes.\nMINOR version when you add functionality in a backward-compatible manner.\nPATCH version when you make backward-compatible bug fixes.\n\nWhen we increment MAJOR, we set MINOR and PATCH to 0. When we increment MINOR we set PATCH to 0. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format. Major version zero (0.y.z) is for initial development, and with this version, anything may change at any time, and the public API should not be considered stable. Therefore when a library or module follows SemVer and has MAJOR version 0, we should not expect it to be stable.\nDo not worry about staying in beta for a long time. It took over 5 years for Kotlin to reach version 1.0. This was a very important time for this language since it changed a lot in this period. \nWhen we introduce new elements into a stable API, and they are not yet stable, we should first keep them for some time in another branch. When you want to allow some users to use it (by merging code into the main branch and releasing it), you can use the Experimental meta-annotation to warn them that they are not yet stable. It makes elements visible, but their use displays a warning or an error (depending on set level).\n@Experimental(level = Experimental.Level.WARNING)\nannotation class ExperimentalNewApi\n\n@ExperimentalNewApi\nsuspend fun getUsers(): List {\n   //...\n}\n\n\nWe should expect that such elements might change at any moment. Again, don’t worry to keep elements experimental for a long time. Doing that slows down adoption, but also helps us design good API for longer. \nWhen we need to change something that is part of a stable API, to help users deal with this transition, we start with annotating this element with the Deprecated annotation:\n@Deprecated(\"Use suspending getUsers instead\")\nfun getUsers(callback: (List)->Unit) {\n   //...\n}\n\nAlso, when there is a direct alternative, specify it using ReplaceWith to allow the IDE to make automatic transition:\n@Deprecated(\"Use suspending getUsers instead\", \nReplaceWith(\"getUsers()\"))\nfun getUsers(callback: (List)->Unit) {\n   //...\n}\n\nAn example from the stdlib:\n@Deprecated(\"Use readBytes() overload without \"+\n\"estimatedSize parameter\", \nReplaceWith(\"readBytes()\"))\npublic fun InputStream.readBytes(\n   estimatedSize: Int = DEFAULT_BUFFER_SIZE\n): ByteArray {\n   //...\n}\n\nThen we need to give users time to adjust. This should be a long time because users have other responsibilities than adjusting to new versions of libraries they use. In widely used APIs, this takes years. Finally after this time, in some major release, we can remove the deprecated element. \nSummary\nUsers need to know about API stability. While a stable API is preferred, there is nothing worse than unexpected changes in an API that supposed to be stable. Such changes can be really painful for users. Correct communication between module or library creators and their users is important. We achieve that by using version names, documentation, and annotations. Also, each change in a stable API needs to follow a long process of deprecation.\n"},"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html":{"url":"Part 2 Code design/Chapter 4 Abstraction design/Item 29 Consider wrapping external API.html","title":"Item 29 Consider Wrapping External API","keywords":"","body":"Item 29: Consider wrapping external API\nIt is risky to heavily use an API that might be unstable. Both when creators clarify that it is unstable, and when we do not trust those creators to keep it stable. Remembering that we need to adjust every use in case of inevitable API change, we should consider limiting uses and separate them from our logic as much as possible. This is why we often wrap potentially unstable external library APIs in our own project. This gives us a lot of freedom and stability:\n\nWe are not afraid of API changes because we would only need to change a single usage inside the wrapper.\nWe can adjust the API to our project style and logic.\nWe can replace it with a different library in case of some problems with this one. \nWe can change the behavior of these objects if we need to (of course, do it responsibly). \n\nThere are also counterarguments to this approach: \n\nWe need to define all those wrappers.\nOur internal API is internal, and developers need to learn it just for this project. \nThere are no courses teaching how our internal API works. We should also not expect answers on Stack Overflow. \n\nKnowing both sides, you need to decide which APIs should be wrapped. A good heuristics that tells us how stable a library is are version number and the number of users. Generally, the more users the library has, the more stable it is. Creators are more careful with changes when they know that their small change might require corrections in many projects. The riskiest libraries are new ones with small popularity. Use them wisely and consider wrapping them into your own classes and functions to control them internally.\n"},"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html":{"url":"Part 2 Code design/Chapter 4 Abstraction design/Item 30 Minimize elements visibility.html","title":"Item 30 Minimize Elements Visibility","keywords":"","body":"Item 30: Minimize elements visibility\nWhen we design an API, there are many reasons why we prefer it as lean as possible. Let’s name the most important reasons.\nIt is easier to learn and maintain a smaller interface. Understanding a class is easier when there are a few things we can do with it, than when there are dozens. Maintenance is easier as well. When we make changes, we often need to understand the whole class. When fewer elements are visible, there is less to maintain and to test.\nWhen we want to make changes, it is way easier to expose something new, rather than to hide an existing element. All publicly visible elements are part of our public API, and they can be used externally. The longer an element is visible, the more external uses it will have. As such, changing these elements will be harder because they will require updating all usages. Restricting visibility would be even more of a challenge. If you do, you’ll need to carefully consider each usage and provide an alternative. Giving an alternative might not be simple, especially if it was implemented by another developer. Finding out now what were the business requirements might be tough as well. If it is a public library, restricting some elements’ visibility might make some users angry. They will need to adjust their implementation and they will face the same problems - they will need to implement alternative solutions probably years after code was developed. It is much better to force developers to use a smaller API in the first place. \nA class cannot be responsible for its own state when properties that represent this state can be changed from the outside. We might have assumptions on a class state that class needs to satisfy. When this state can be directly changed from the outside, the current class cannot guarantee its invariants, because it might be changed externally by someone not knowing about our internal contract. Take a look at CounterSet from Chapter 2. We correctly restricted the visibility of elementsAdded setter. Without it, someone might change it to any value from outside and we wouldn’t be able to trust that this value really represents how many elements were added. Notice that only setter is private. This is a very useful trick. \nclass CounterSet(\n       private val innerSet: MutableSet = mutableSetOf\\\n()\n) : MutableSet by innerSet {\n\n   var elementsAdded: Int = 0\n       private set\n\n   override fun add(element: T): Boolean {\n       elementsAdded++\n       return innerSet.add(element)\n   }\n\n   override fun addAll(elements: Collection): Boolean {\n       elementsAdded += elements.size\n       return innerSet.addAll(elements)\n   }\n}\n\nFor many cases, it is very helpful that all properties are encapsulated by default in Kotlin because we can always restrict the visibility of concrete accessors. \nProtecting internal object state is especially important when we have properties depending on each other. For instance, in the below mutableLazy delegate implementation, we expect that if initialized is true, the value is initialized and it contains a value of type T. Whatever we do, setter of the initialized should not be exposed, because otherwise it cannot be trusted and that can lead to an ugly exception on a different property. \nclass MutableLazyHolder(val initializer: () -> T) {\n    private var value: Any? = Any()\n    private var initialized = false\n\n    fun get(): T {\n        if (!initialized) {\n            value = initializer()\n            initialized = true\n        }\n        return value as T\n    }\n\n    fun set(value: T) {\n        this.value = value\n        initialized = true\n    }\n}\n\nIt is easier to track how class changes when they have more restricted visibility. This makes the property state easier to understand. It is especially important when we are dealing with concurrency. State changes are a problem for parallel programming, and it is better to control and restrict them as much as possible.\nUsing visibility modifiers\nTo achieve a smaller interface from outside, without internal sacrifices, we restrict elements visibility. In general, if there is no reason for an element to be visible, we prefer to have it hidden. This is why if there is no good reason to have less restrictive visibility type, it is a good practice to make the visibility of classes and elements as restrictive as possible. We do that using visibility modifiers. \nFor class members, these are 4 visibility modifiers we can use together with their behavior:\n\npublic (default) - visible everywhere, for clients who see the declaring class.\nprivate - visible inside this class only.\nprotected - visible inside this class and in subclasses.\ninternal - visible inside this module, for clients who see the declaring class.\n\nTop-level elements have 3 visibility modifiers:\n\npublic (default) - visible everywhere.\nprivate - visible inside the same file only.\ninternal - visible inside this module.\n\nNote that the module is not the same as package. In Kotlin it is defined as a set of Kotlin sources compiled together. It might mean:\n\na Gradle source set,\na Maven project,\nan IntelliJ IDEA module,\na set of files compiled with one invocation of the Ant task.\n\nIf your module might be used by another module, change the visibility of your public elements that you don’t want to expose to internal. If an element is designed for inheritance and it is only used in a class and subclasses, make it protected. If you use element only in the same file or class, make it private. This convention is supported by Kotlin as it suggests to restrict visibility to private if an element is used only locally:\n\nThis rule should not be applied to properties in the classes that were designed primarily to hold data (data model classes, DTO). If your server returns a user with an age, and you decided to parse it, you don’t need to hide it just because you don’t use it at the moment. It is there to be used and it is better to have it visible. If you don’t need it, get rid of this property entirely. \nclass User(\n       val name: String,\n       val surname: String,\n       val age: Int\n)\n\nOne big limitation is that when we inherit an API, we cannot restrict the visibility of a member by overriding it. This is because the subclass can always be used as its superclass. This is just another reason to prefer composition instead of inheritance (Item 36: Prefer composition over inheritance).\nSummary\nThe rule of thumb is that: Elements visibility should be as restrictive as possible. Visible elements constitute the public API, and we prefer it as lean as possible because:\n\nIt is easier to learn and maintain a smaller interface. \nWhen we want to make changes, it is way easier to expose something than to hide something.\nA class cannot be responsible for its own state when properties that represent this state can be changed from outside.\nIt is easier to track how the API changes when they have more restricted visibility.\n\n"},"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html":{"url":"Part 2 Code design/Chapter 4 Abstraction design/Item 31 Define contract with documentation.html","title":"Item 31 Define Contract With Documentation","keywords":"","body":"Item 31: Define contract with documentation\nThink again about the function to display a message from Item 27: Use abstraction to protect code against changes:\nfun Context.showMessage(\n    message: String, \n    length: MessageLength = MessageLength.LONG\n) {\n   val toastLength = when(length) {\n       SHORT -> Toast.LENGTH_SHORT\n       LONG -> Toast.LENGTH_LONG\n   }\n   Toast.makeText(this, message, toastLength).show()\n}\n\nenum class MessageLength { SHORT, LONG }\n\nWe extracted it to give ourselves the freedom to change how the message is displayed. However, it is not well documented. Another developer might read its code and assume that it always displays a toast. This is the opposite of what we wanted to achieve by naming it in a way not suggesting concrete message type. To make it clear it would be better to add a meaningful KDoc comment explaining what should be expected from this function. \n/**\n* Universal way for the project to display a short \n* message to a user.\n* @param message The text that should be shown to\n* the user\n* @param length How long to display the message.\n*/ \nfun Context.showMessage(\n    message: String, \n    duration: MessageLength = MessageLength.LONG\n) {\n   val toastDuration = when(duration) {\n       SHORT -> Toast.LENGTH_SHORT\n       LONG -> Toast.LENGTH_LONG\n   }\n   Toast.makeText(this, message, toastDuration).show()\n}\n\nenum class MessageLength { SHORT, LONG }\n\nIn many cases, there are details that are not clearly inferred by the name at all. For instance, powerset, even though it is a well-defined mathematical concept, needs an explanation since it is not so well known and interpretation is not clear enough:\n/**\n* Powerset returns a set of all subsets of the receiver \n* including itself and the empty set\n*/ \nfun  Collection.powerset(): Set> =\n    if (isEmpty()) setOf(emptySet())\n    else take(size - 1)\n        .powerset()\n        .let { it + it.map { it + last() } }\n\nNotice that this description gives us some freedom. It does not specify the order of those elements. As a user, we should not depend on how those elements are ordered. Implementation hidden behind this abstraction can be optimized without changing how this function looks from the outside:\n/**\n* Powerset returns a set of all subsets of the receiver \n* including itself and empty set\n*/ \nfun  Collection.powerset(): Set> = \n      powerset(this, setOf(setOf()))\n\nprivate tailrec fun  powerset(\n    left: Collection, \n    acc: Set>\n): Set> = when {\n   left.isEmpty() -> acc\n   else -> {\n      val head = left.first()\n      val tail = left.drop(1)\n      powerset(tail, acc + acc.map { it + head })\n   }\n}\n\nThe general problem is that when the behavior is not documented and the element name is not clear, developers will depend on current implementation instead of on the abstraction we intended to create. We solve this problem by describing what behavior can be expected. \nContract\nWhenever we describe some behavior, users treat it as a promise and based on that they adjust their expectations. We call all such expected behaviors a contract of an element. Just like in a real-life contract another side expects us to honor it, here as well users will expect us to keep this contract once it is stable (Item 28: Specify API stability).\nAt this point, defining a contract might sound scary, but actually, it is great for both sides. When a contract is well specified, creators do not need to worry about how the class is used, and users do not need to worry about how something is implemented under the hood. Users can rely on this contract without knowing anything about the actual implementation. For creators, the contract gives freedom to change everything as long as the contract is satisfied. Both users and creators depend on abstractions defined in the contract, and so they can work independently. Everything will work perfectly fine as long as the contract is respected. This is a comfort and freedom for both sides. \nWhat if we don’t set a contract? Without users knowing what they can and cannot do, they’ll depend on implementation details instead. A creator without knowing what users depend on would be either blocked or they would risk breaking users implementations. As you can see, it is important to specify a contract. \nDefining a contract\nHow do we define a contract? There are various ways, including:\n\nNames - when a name is connected to some more general concept, we expect this element to be consistent with this concept. For instance, when you see sum method, you don’t need to read its comment to know how it will behave. It is because the summation is a well defined mathematical concept. \nComments and documentation - the most powerful way as it can describe everything that is needed.\nTypes - Types say a lot about objects. Each type specifies a set of often well-defined methods, and some types additionally have set-up responsibilities in their documentation. When we see a function, information about return type and arguments types are very meaningful. \n\nDo we need comments?\nLooking at history, it is amazing to see how opinions in the community fluctuate. When Java was still young, there was a very popular concept of literate programming. It suggested explaining everything in comments12. A decade later we can hear a very strong critique of comments and strong voices that we should omit comments and concentrate on writing readable code instead (I believe that the most influential book was the Clean Code by Robert C. Martin). \nNo extreme is healthy. I absolutely agree that we should first concentrate on writing readable code. Though what needs to be understood is that comments before elements (functions or classes) can describe it at a higher level, and set their contract. Additionally, comments are now often used to automatically generate documentation, which generally is treated as a source of truth in projects.\nSure, we often do not need comments. For instance, many functions are self-explanatory and they don’t need any special description. We might, for instance, assume that product is a clear mathematical concept that is known by programmers, and leave it without any comment:\nfun List.product() = fold(1) { acc, i -> acc * i }\n\nObvious comments are a noise that only distracts us. Do not write comments that only describe what is clearly expressed by a function name and parameters. The following example demonstrates an unnecessary comment because the functionality can be inferred from the method’s name and parameter type:\n// Product of all numbers in a list\nfun List.product() = fold(1) { acc, i -> acc * i }\n\nI also agree that when we just need to organize our code, instead of comments in the implementation, we should extract a function. Take a look at the example below:\nfun update() {\n   // Update users\n   for (user in users) {\n       user.update()\n   }\n\n   // Update books\n   for (book in books) {\n       updateBook(book)\n   }\n}\n\nFunction update is clearly composed of extractable parts, and comment suggests that those parts can be described with a different explanation. Therefore it is better to extract those parts into separate abstractions like for instance methods, and their names are clear enough to explain what they mean (just like it in Item 26: Each function should be written in terms of a single level of abstraction). \nfun update() {\n   updateUsers()\n   updateBooks()\n}\n\nprivate fun updateBooks() {\n   for (book in books) {\n       updateBook(book)\n   }\n}\n\nprivate fun updateUsers() {\n   for (user in users) {\n       user.update()\n   }\n}\n\nAlthough comments are often useful and important. To find examples, take a look at nearly any public function from the Kotlin standard library. They have well-defined contracts that give a lot of freedom. For instance, take a look at the function listOf: \n/**\n* Returns a new read-only list of given elements. \n* The returned list is serializable (JVM).\n* @sample samples.collections.Collections.Lists.\nreadOnlyList\n*/\npublic fun  listOf(vararg elements: T): List = \n     if (elements.size > 0) elements.asList() \n     else emptyList()\n\nAll it promises is that it returns List that is read-only and serializable on JVM. Nothing else. The list does not need to be immutable. No concrete class is promised. This contract is minimalistic, but satisfactory for the needs of most Kotlin developers. You can also see that it points to sample uses, which are also useful when we are learning how to use an element. \nKDoc format\nWhen we document functions using comments, the official format in which we present that comment is called KDoc. All KDoc comments start with /** and end with */, and internally all lines generally start with *. Descriptions there are written in KDoc markdown. \nThe structure of this KDoc comment is the following:\n\nThe first paragraph of the documentation text is the summary description of the element.\nThe second part is the detailed description.\nEvery next line begins with a tag. Those tags are used to reference an element to describe it.\n\nHere are tags that are supported:\n\n@param  - Documents a value parameter of a function or a type parameter of a class, property or function. \n@return - Documents the return value of a function.\n@constructor - Documents the primary constructor of a class.\n@receiver - Documents the receiver of an extension function.\n@property  - Documents the property of a class which has the specified name. Used for properties defined on the primary constructor. \n@throws , @exception  - Documents an exception which can be thrown by a method.\n@sample  - Embeds the body of the function with the specified qualified name into the documentation for the current element, in order to show an example of how the element could be used.\n@see  - Adds a link to the specified class or method\n@author - Specifies the author of the element being documented.\n@since - Specifies the version of the software in which the element being documented was introduced.\n@suppress - Excludes the element from the generated documentation. Can be used for elements which are not part of the official API of a module but still have to be visible externally.\n\nBoth in descriptions and in texts describing tags we can link classes, methods, properties or parameters. Links are in square brackets or with double square brackets when we want to have different description than the name of the linked element.\n/**\n* This is an example descriptions linking to [element1], \n* [com.package.SomeClass.element2] and \n* [this element with custom description][element3]\n*/\n\nAll those tags will be understood by Kotlin documentation generation tools. The official one is called Dokka. They generate documentation files that can be published online and presented to outside users. Here is as example documentation with shortened description:\n/**\n* Immutable tree data structure.\n*\n* Class represents immutable tree having from 1 to \n* infinitive number of elements. In the tree we hold \n* elements on each node and nodes can have left and \n* right subtrees...\n*\n* @param T the type of elements this tree holds.\n* @property value the value kept in this node of the tree.\n* @property left the left subtree. \n* @property right the right subtree. \n*/\nclass Tree(\n    val value: T, \n    val left: Tree? = null, \n    val right: Tree? = null\n) {\n    /**\n    * Creates a new tree based on the current but with \n    * [element] added.\n    * @return newly created tree with additional element. \n    */\n    operator fun plus(element: T): Tree { ... }\n}\n\nNotice that not everything needs to be described. The best documentation is short and on-point describes what might be unclear. \nType system and expectations\nType hierarchy is an important source of information about an object. An interface is more than just a list of methods we promise to implement. Classes and interfaces can also have some expectations. If a class promises an expectation, all of its subclasses should guarantee that too. This principle is known as Liskov substitution principle, and it is one of the most important rules in the object-oriented programming. It is generally translated to “if S is a subtype of T, then objects of type T may be replaced with objects of type S without altering any of the desirable properties of the program”. A simple explanation why it is important is that every class can be used as a superclass, and so if it does not behave as we expect its superclass to behave, we might end up with unexpected failure. In programming, children should always satisfy parents’ contracts. \nOne important implication of this rule is that we should properly specify contracts for open functions. For instance, coming back to our car metaphor, we could represent a car in our code using the following interface:\ninterface Car {\n   fun setWheelPosition(angle: Float)\n   fun setBreakPedal(pressure: Double)\n   fun setGasPedal(pressure: Double)\n}\n\nclass GasolineCar: Car {\n   // ...\n}\n\nclass GasCar: Car {\n   // ...\n}\n\nclass ElectricCar: Car {\n   // ...\n}\n\nThe problem with this interface is that it leaves a lot of questions. What does angle in the setWheelPosition function means? In what units it is measured. What if it is not clear for someone what the gas and brake pedals do? People using instances of type Car need to know how to use them, and all brands should behave similarly when they are used as a Car. We can address those concerns with documentation:\ninterface Car {\n   /**\n    * Changes car direction.\n    *\n    * @param angle Represents position of wheels in \n    * radians relatively to car axis. 0 means driving\n    * straight, pi/2 means driving maximally right, \n    * -pi/2 maximally left. \n    * Value needs to be in (-pi/2, pi/2)\n    */\n   fun setWheelPosition(angle: Float)\n\n   /**\n    * Decelerates vehicle speed until 0.\n    *\n    * @param pressure The percentage of brake pedal use. \n    * Number from 0 to 1 where 0 means not using break \n    * at all, and 1 means maximal pedal pedal use.\n    */\n   fun setBreakPedal(pressure: Double)\n\n   /**\n    * Accelerates vehicle speed until max speed possible\n    * for user.\n    *\n    * @param pressure The percentage of gas pedal use. \n    * Number from 0 to 1 where 0 means not using gas at \n    * all, and 1 means maximal gas pedal use.\n    */\n   fun setGasPedal(pressure: Double)\n}\n\nNow all cars have set a standard that describes how they all should behave. \nMost classes in the stdlib and in popular libraries have well-defined and well-described contracts and expectancies for their children. We should define contracts for our elements as well. Those contracts will make those interfaced truly useful. They will give us the freedom to use classes that implement those interfaces in the way their contract guarantees. \nLeaking implementation\nImplementation details always leak. In a car, different kinds of engines behave a bit differently. We are still able to drive the car, but we can feel a difference. It is fine as this is not described in the contract. \nIn programming languages, implementation details leak as well. For instance, calling a function using reflection works, but it is significantly slower than a normal function call (unless it is optimized by the compiler). We will see more examples in the chapter about performance optimization. Though as long as a language works as it promises, everything is fine. We just need to remember and apply good practices. \nIn our abstractions, implementation will leak as well, but still, we should protect it as much as we can. We protect it by encapsulation, which can be described as “You can do what I allow, and nothing more”. The more encapsulated classes and functions are, the more freedom we have inside them because we don’t need to think about how one might depend on our implementation.\nSummary\nWhen we define an element, especially parts of external API, we should define a contract. We do that through names, documentation, comments, and types. The contract specifies what the expectations are on those elements. It can also describe how an element should be used. \nA contract gives users confidence about how elements behave now and will behave in the future, and it gives creators the freedom to change what is not specified in the contract. The contract is a kind of agreement, and it works well as long as both sides respect it.\n"},"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html":{"url":"Part 2 Code design/Chapter 4 Abstraction design/Item 32 Respect abstraction contracts.html","title":"Item 32 Respect Abstraction Contracts","keywords":"","body":"Item 32: Respect abstraction contracts\nBoth contract and visibility are kind of an agreement between developers. This agreement nearly always can be violated by a user. Technically, everything in a single project can be hacked. For instance, it is possible to use reflection to open and use anything we want:\nclass Employee {\n   private val id: Int = 2\n   override fun toString() = \"User(id=$id)\"\n\n   private fun privateFunction() {\n       println(\"Private function called\")\n   }\n}\n\nfun callPrivateFunction(employee: Employee) {\n   employee::class.declaredMemberFunctions\n        .first { it.name == \"privateFunction\" }\n        .apply { isAccessible = true }\n        .call(employee)\n}\n\nfun changeEmployeeId(employee: Employee, newId: Int) {\n   employee::class.java.getDeclaredField(\"id\")\n        .apply { isAccessible = true }\n        .set(employee, newId)\n}\n\nfun main() {\n   val employee = Employee()\n   callPrivateFunction(employee) \n   // Prints: Private function called\n\n   changeEmployeeId(employee, 1)\n   print(employee) // Prints: User(id=1)\n}\n\nJust because you can do something, doesn’t mean that it is fine to do it. Here we very strongly depend on the implementation details like the names of the private property and the private function. They are not part of a contract at all, and so they might change at any moment. This is like a ticking bomb for our program. \nRemember that a contract is like a warranty. As long as you use your computer correctly, the warranty protects you. When you open your computer and start hacking it, you lose your warranty. The same principle applies here: when you break the contract, it is your problem when implementation changes and your code stops working. \nContracts are inherited\nIt is especially important to respect contracts when we inherit from classes, or when we extend interfaces from another library. Remember that your object should respect their contracts. For instance, every class extends Any that have equalsand hashCode methods. They both have well-established contracts that we need to respect. If we don’t, our objects might not work correctly. For instance, when hashCode is not consistent with equals, our object might not behave correctly on HashSet. Below behavior is incorrect because a set should not allow duplicates:\nclass Id(val id: Int) {\n   override fun equals(other: Any?) =\n       other is Id && other.id == id\n}\n\nval mutableSet = mutableSetOf(Id(1))\nmutableSet.add(Id(1))\nmutableSet.add(Id(1))\nprint(mutableSet.size) // 3\n\nIn this case, it is that hashCode do not have implementation consistent with equals. We will discuss some important Kotlin contracts in Chapter 6: Class design. For now, remember to check the expectations on functions you override, and respect those. \nSummary\nIf you want your programs to be stable, respect contracts. If you are forced to break them, document this fact well. Such information will be very helpful to whoever will maintain your code. Maybe that will be you, in a few years’ time.\n"},"Part 2 Code design/Chapter 5 Object creation/Introduction.html":{"url":"Part 2 Code design/Chapter 5 Object creation/Introduction.html","title":"Introduction","keywords":"","body":"Chapter 5: Object creation\nAlthough Kotlin can be written in a purely functional style, it can also be written in object oriented programming (OOP), much like Java. In OOP, we need to create every object we use, or at least define how it ought to be created, and different ways have different characteristics. It is important to know what options do we have. This is why this chapter shows different ways how we can define object creation, and explains their advantages and disadvantages. \nIf you are familiar with the Effective Java book by Joshua Bloch, then you may notice some similarities between this chapter and that book. It is no coincidence. This chapter relates to the first chapter of Effective Java. Although Kotlin is very different from Java, and there are only morsels of knowledge that can be used. For instance, static methods are not allowed in Kotlin, but we have very good alternatives like top-level functions and companion object functions. They don’t work the same way as static functions, so it is important to understand them. Similarly, with other items, you can notice similarities, but the changes that Kotlin has introduced are important. To cheer you up: these changes are mostly to provide more possibilities or force better style. Kotlin is a powerful and really well-designed language, and this chapter should mainly open your eyes to these new possibilities.\n"},"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html":{"url":"Part 2 Code design/Chapter 5 Object creation/Item 33 Consider factory functions instead of constructors.html","title":"Item 33 Consider Factory Functions Instead Of Constructors","keywords":"","body":"Item 33: Consider factory functions instead of constructors\nThe most common way for a class to allow a client to obtain an instance in Kotlin is to provide a primary constructor:\nclass MyLinkedList(\n   val head: T, \n   val tail: MyLinkedList?\n)\n\nval list = MyLinkedList(1, MyLinkedList(2, null))\n\nThough constructors are not the only way to create objects. There are many creational design patterns for object instantiation. Most of them revolve around the idea that instead of directly creating an object, a function can create the object for us. For instance, the following top-level function creates an instance of MyLinkedList:\nfun  myLinkedListOf(\n   vararg elements: T\n): MyLinkedList? {\n   if(elements.isEmpty()) return null\n   val head = elements.first()\n   val elementsTail = elements\n       .copyOfRange(1, elements.size)\n   val tail = myLinkedListOf(*elementsTail)\n   return MyLinkedList(head, tail)\n}\n\nval list = myLinkedListOf(1, 2)\n\nFunctions used as an alternative to constructors are called factory functions because they produce an object. Using factory functions instead of a constructor has many advantages, including:\n\nUnlike constructors, functions have names. Names explain how an object is created and what the arguments are. For example, let’s say that you see the following code: ArrayList(3). Can you guess what the argument means? Is it supposed to be the first element on the newly created list, or is it the size of the list? It is definitely not self-explanatory. In such situation a name, like ArrayList.withSize(3), would clear up any confusion. Names are really useful: they explain arguments or characteristic ways of object creation. Another reason to have a name is that it solves a conflict between constructors with the same parameter types.\nUnlike constructors, functions can return an object of any subtype of their return type. This can be used to provide a better object for different cases. It is especially important when we want to hide actual object implementations behind an interface. Think of listOf from stdlib (standard library). Its declared return type is List which is an interface. What does it really return? The answer depends on the platform we use. It is different for Kotlin/JVM, Kotlin/JS, and Kotlin/Native because they each use different built-in collections. This is an important optimization made by the Kotlin team. It also gives Kotlin creators much more freedom because the actual type of list might change over time and as long as new objects still implement interface List and act the same way, everything will be fine.\nUnlike constructors, functions are not required to create a new object each time they’re invoked. It can be helpful because when we create objects using functions, we can include a caching mechanism to optimize object creation or to ensure object reuse for some cases (like in the Singleton pattern). We can also define a static factory function that returns null if the object cannot be created. Like Connections.createOrNull() which returns null when Connection cannot be created for some reason.\nFactory functions can provide objects that might not yet exist. This is intensively used by creators of libraries that are based on annotation processing. This way, programmers can operate on objects that will be generated or used via proxy without building the project.\nWhen we define a factory function outside of an object, we can control its visibility. For instance, we can make a top-level factory function accessible only in the same file or in the same module.\nFactory functions can be inline and so their type parameters can be reified.\nFactory functions can construct objects which might otherwise be complicated to construct.\nA constructor needs to immediately call a constructor of a superclass or a primary constructor. When we use factory functions, we can postpone constructor usage:\n\nfun makeListView(config: Config) : ListView {\n   val items = … // Here we read items from config\n   return ListView(items) // We call actual constructor\n}\n\nThere is a limitation on factory functions usage: it cannot be used in subclass construction. This is because in subclass construction, we need to call the superclass constructor. \nclass IntLinkedList: MyLinkedList() { \n// Supposing that MyLinkedList is open\n\n   constructor(vararg ints: Int): myLinkedListOf(*ints) \n// Error\n}\n\nThat’s generally not a problem, since if we have decided that we want to create a superclass using a factory function, why would we use a constructor for its subclass? We should rather consider implementing a factory function for such class as well.\nclass MyLinkedIntList(head: Int, tail: MyLinkedIntList?):\n   MyLinkedList(head, tail)\n\nfun myLinkedIntListOf(vararg elements: Int): \nMyLinkedIntList? {\n   if(elements.isEmpty()) return null\n   val head = elements.first()\n   val elementsTail = elements\n       .copyOfRange(1, elements.size)\n   val tail = myLinkedIntListOf(*elementsTail)\n   return MyLinkedIntList(head, tail)\n}\n\nThe above function is longer than the previous constructor, but it has better characteristics - flexibility, independence of class, and the ability to declare a nullable return type. \nThere are strong reasons standing behind factory functions, though what needs to be understood is that they are not a competition to the primary constructor1. Factory functions still need to use a constructor in their body, so constructor must exist. It can be private if we really want to force creation using factory functions, but we rarely do (Item 34: Consider primary constructor with named optional arguments). Factory functions are mainly a competition to secondary constructors, and looking at Kotlin projects they generally win as secondary constructors are used rather rarely. They are also a competition to themselves as there are variety of different kinds of factory functions. Let’s discuss different Kotlin factory functions:\n\nCompanion object factory function\nExtension factory function\nTop-level factory functions\nFake constructors\nMethods on a factory classes\n\nCompanion Object Factory Function\nThe most popular way to define a factory function is to define it in a companion object:\nclass MyLinkedList(\n   val head: T, \n   val tail: MyLinkedList?\n) {\n\n   companion object {\n      fun  of(vararg elements: T): MyLinkedList? {\n          /*...*/ \n      }\n   }\n}\n\n// Usage\nval list = MyLinkedList.of(1, 2)\n\nSuch approach should be very familiar to Java developers because it is a direct equivalent to a static factory method. Though developers of other languages might be familiar with it as well. In some languages, like C++, it is called a Named Constructor Idiom as its usage is similar to a constructor, but with a name. \nIn Kotlin, this approach works with interfaces too:\nclass MyLinkedList(\n   val head: T, \n   val tail: MyLinkedList?\n): MyList {\n   // ...\n}\n\ninterface MyList {\n   // ...\n\n   companion object {\n       fun  of(vararg elements: T): MyList? {\n           // ...\n       }\n   }\n}\n\n// Usage\nval list = MyList.of(1, 2)\n\nNotice that the name of the above function is not really descriptive, and yet it should be understandable for most developers. The reason is that there are some conventions that come from Java and thanks to them, a short word like of is enough to understand what the arguments mean. Here are some common names with their descriptions:\n\nfrom - A type-conversion function that takes a single parameter and returns a corresponding instance of the same type, for example:\n\nval date: Date = Date.from(instant)\n\n\nof - An aggregation function that takes multiple parameters and returns an instance of the same type that incorporates them, for example:\n\nval faceCards: Set = EnumSet.of(JACK, QUEEN, KING)\n\n\nvalueOf - A more verbose alternative to from and of, for example:\n\nval prime: BigInteger = BigInteger.valueOf(Integer.MAX_VALUE)\n\n\ninstance or getInstance - Used in singletons to get the only instance. When parameterized, will return an instance parameterized by arguments. Often we can expect that returned instance to always be the same when arguments are the same, for example:\n\nval luke: StackWalker = StackWalker.getInstance(options)\n\n\ncreateInstance or newInstance - Like getInstance, but this function guarantees that each call returns a new instance, for example:\n\nval newArray = Array.newInstance(classObject, arrayLen)\n\n\ngetType - Like getInstance, but used if the factory function is in a different class. Type is the type of object returned by the factory function, for example:\n\nval fs: FileStore = Files.getFileStore(path)\n\n\nnewType - Like newInstance, but used if the factory function is in a different class. Type is the type of object returned by the factory function, for example:\n\nval br: BufferedReader = Files.newBufferedReader(path)\n\nMany less-experienced Kotlin developers treat companion object members like static members which need to be grouped in a single block. However, companion objects are actually much more powerful: for example, companion objects can implement interfaces and extend classes. So, we can implement general companion object factory functions like the one below: \nabstract class ActivityFactory {\n   abstract fun getIntent(context: Context): Intent\n\n   fun start(context: Context) {\n       val intent = getIntent(context)\n       context.startActivity(intent)\n   }\n\n   fun startForResult(activity: Activity, requestCode: \nInt) {\n       val intent = getIntent(activity)\n       activity.startActivityForResult(intent, \nrequestCode)\n   }\n}\n\nclass MainActivity : AppCompatActivity() {\n   //...\n\n   companion object: ActivityFactory() {\n       override fun getIntent(context: Context): Intent =\n           Intent(context, MainActivity::class.java)\n   }\n}\n\n// Usage\nval intent = MainActivity.getIntent(context)\nMainActivity.start(context)\nMainActivity.startForResult(activity, requestCode)\n\nNotice that such abstract companion object factories can hold values, and so they can implement caching or support fake creation for testing. The advantages of companion objects are not as well-used as they could be in the Kotlin programming community. Still, if you look at the implementations of the Kotlin team products, you will see that companion objects are strongly used. For instance in the Kotlin Coroutines library, nearly every companion object of coroutine context implements an interface CoroutineContext.Key as they all serve as a key we use to identify this context. \nExtension factory functions\nSometimes we want to create a factory function that acts like an existing companion object function, and we either cannot modify this companion object or we just want to specify a new function in a separate file. In such a case we can use another advantage of companion objects: we can define extension functions for them. \nSuppose that we cannot change the Tool interface:\ninterface Tool {\n   companion object { /*...*/ }\n}\n\nNevertheless, we can define an extension function on its companion object:\nfun Tool.Companion.createBigTool( /*...*/ ) : BigTool {\n   //... \n}\n``` kotlin\n\nAt the call site we can then write:\n\n``` kotlin\nTool.createBigTool()\n\nThis is a powerful possibility that lets us extend external libraries with our own factory methods. One catch is that to make an extension on companion object, there must be some (even empty) companion object:\ninterface Tool {\n   companion object {}\n}\n\nTop-level functions\nOne popular way to create an object is by using top-level factory functions. Some common examples are listOf, setOf, and mapOf. Similarly, library designers specify top-level functions that are used to create objects. Top-level factory functions are used widely. For example, in Android, we have the tradition of defining a function to create an Intent to start an Activity. In Kotlin, the getIntent() can be written as a companion object function:\nclass MainActivity: Activity {\n\n   companion object {\n       fun getIntent(context: Context) = \n           Intent(context, MainActivity::class.java)\n   }\n}\n\nIn the Kotlin Anko library, we can use the top-level function intentFor with reified type instead:\nintentFor()\n\nThis function can be also used to pass arguments:\nintentFor(\"page\" to 2, \"row\" to 10)\n\nObject creation using top-level functions is a perfect choice for small and commonly created objects like List or Map because listOf(1,2,3) is simpler and more readable than List.of(1,2,3). However, public top-level functions need to be used judiciously. Public top-level functions have a disadvantage: they are available everywhere. It is easy to clutter up the developer’s IDE tips. The problem becomes more serious when top-level functions are named like class methods and they are confused with them. This is why top-level functions should be named wisely.\nFake constructors\nConstructors in Kotlin are used the same way as top-level functions:\nclass A\nval a = A()\n\nThey are also referenced the same as top-level functions (and constructor reference implements function interface):\nval reference: ()->A = ::A\n\nFrom a usage point of view, capitalization is the only distinction between constructors and functions. By convention, classes begin with an uppercase letter; functions a lower case letter. Although technically functions can begin with an uppercase. This fact is used in different places, for example, in case of the Kotlin standard library. List and MutableList are interfaces. They cannot have constructors, but Kotlin developers wanted to allow the following Listconstruction:\nList(4) { \"User$it\" } // [User0, User1, User2, User3]\n\nThis is why the following functions are included (since Kotlin 1.1) in the Kotlin stdlib:\npublic inline fun  List(\n   size: Int, \n   init: (index: Int) -> T\n): List = MutableList(size, init)\n\npublic inline fun  MutableList(\n   size: Int, \n   init: (index: Int) -> T\n): MutableList {\n   val list = ArrayList(size)\n   repeat(size) { index -> list.add(init(index)) }\n   return list\n}\n\nThese top-level functions look and act like constructors, but they have all the advantages of factory functions. Lots of developers are unaware of the fact that they are top-level functions under the hood. This is why they are often called fake constructors.\nTwo main reasons why developers choose fake constructors over the real ones are:\n\nTo have “constructor” for an interface\nTo have reified type arguments\n\nExcept for that, fake constructors should behave like normal constructors. They look like constructors and they should behave this way. If you want to include caching, returning a nullable type or returning a subclass of a class that can be created, consider using a factory function with a name, like a companion object factory method. \nThere is one more way to declare a fake constructor. A similar result can be achieved using a companion object with the invoke operator. Take a look at the following example:\nclass Tree {\n\n   companion object {\n       operator fun  invoke(size: Int, generator: \n(Int)->T): Tree{\n           //...\n       }\n   }\n}\n\n// Usage\nTree(10) { \"$it\" }\n\nHowever, implementing invoke in a companion object to make a fake constructor is very rarely used and I do not recommend it. First of all, because it breaks Item 12: Use operator methods according to their names. What does it mean to invoke a companion object? Remember that the name can be used instead of the operator: \nTree.invoke(10) { \"$it\" }\n\nInvocation is a different operation to object construction. Using the operator in this way is inconsistent with its name. More importantly, this approach is more complicated than just a top-level function. Looking at their reflection shows this complexity. Just compare how reflection looks like when we reference a constructor, fake constructor, and invoke function in a companion object:\nConstructor:\nval f: ()->Tree = ::Tree\n\nFake constructor:\nval f: ()->Tree = ::Tree\n\nInvoke in companion object:\nval f: ()->Tree = Tree.Companion::invoke\n\nI recommend using standard top-level functions when you need a fake constructor. These should be used sparingly to suggest typical constructor-like usage when we cannot define a constructor in the class itself, or when we need a capability that constructors do not offer (like a reified type parameter).\nMethods on a factory class\nThere are many creational patterns associated with factory classes. For instance, abstract factory or prototype. Every one of them has some advantages. \nWe will see that some of these approaches are not reasonable in Kotlin. In the next item, we will see that the telescoping constructor and builder pattern rarely make sense in Kotlin. \nFactory classes hold advantages over factory functions because classes can have a state. For instance, this very simple factory class that produces students with next id numbers:\ndata class Student(\n  val id: Int, \n  val name: String, \n  val surname: String\n)\n\nclass StudentsFactory {\n   var nextId = 0\n   fun next(name: String, surname: String) = \n         Student(nextId++, name, surname)\n}\n\nval factory = StudentsFactory()\nval s1 = factory.next(\"Marcin\", \"Moskala\")\nprintln(s1) // Student(id=0, name=Marcin, Surname=Moskala)\nval s2 = factory.next(\"Igor\", \"Wojda\")\nprintln(s2) // Student(id=1, name=Igor, Surname=Wojda)\n\nFactory classes can have properties and those properties can be used to optimize object creation. When we can hold a state we can introduce different kinds of optimizations or capabilities. We can for instance use caching, or speed up object creation by duplicating previously created objects. \nSummary\nAs you can see, Kotlin offers a variety of ways to specify factory functions and they all have their own use. We should have them in mind when we design object creation. Each of them is reasonable for different cases. Some of them should preferably be used with caution: Fake Constructors, Top-Level Factory Method, and Extension Factory Function. The most universal way to define a factory function is by using a Companion Object. It is safe and very intuitive for most developers since usage is very similar to Java Static Factory Methods, and Kotlin mainly inherits its style and practices from Java.\n"},"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html":{"url":"Part 2 Code design/Chapter 5 Object creation/Item 34 Consider a primary constructor with named optional arguments.html","title":"Item 34 Consider A Primary Constructor With Named Optional Arguments","keywords":"","body":"Item 34: Consider a primary constructor with named optional arguments\nWhen we define an object and specify how it can be created, the most popular option is to use a primary constructor:\nclass User(var name: String, var surname: String)\nval user = User(\"Marcin\", \"Moskała\")\n\nNot only are primary constructors very convenient, but in most cases, it is actually very good practice to build objects using them. It is very common that we need to pass arguments that determine the object’s initial state, as illustrated by the following examples. Starting from the most obvious one: data model objects representing data2. For such object, whole state is initialized using constructor and then hold as properties.\ndata class Student(\n   val name: String,\n   val surname: String,\n   val age: Int\n)\n\nHere’s another common example, in which we create a presenter3 for displaying a sequence of indexed quotes. There we inject dependencies using a primary constructor:\nclass QuotationPresenter(\n       private val view: QuotationView,\n       private val repo: QuotationRepository\n) {\n   private var nextQuoteId = -1\n\n   fun onStart() {\n       onNext()\n   }\n\n   fun onNext() {\n       nextQuoteId = (nextQuoteId + 1) % repo.quotesNumber\n       val quote = repo.getQuote(nextQuoteId)\n       view.showQuote(quote)\n   }\n}\n\nNote that QuotationPresenter has more properties than those declared on a primary constructor. In here nextQuoteId is a property always initialized with the value -1. This is perfectly fine, especially when the initial state is set up using default values or using primary constructor parameters.\nTo better understand why the primary constructor is such a good alternative in the majority of cases, we must first consider common Java patterns related to the use of constructors:\n\nthe telescoping constructor pattern\nthe builder pattern\n\nWe will see what problems they do solve, and what better alternatives Kotlin offers. \nTelescoping constructor pattern\nThe telescoping constructor pattern is nothing more than a set of constructors for different possible sets of arguments:\nclass Pizza {\n   val size: String\n   val cheese: Int\n   val olives: Int\n   val bacon: Int\n\n   constructor(size: String, cheese: Int, olives: Int, \nbacon: Int) {\n       this.size = size\n       this.cheese = cheese\n       this.olives = olives\n       this.bacon = bacon\n   }\n   constructor(size: String, cheese: Int, olives: Int):\nthis(size, cheese, olives, 0)\n   constructor(size: String, cheese: Int): \nthis(size, cheese, 0)\n   constructor(size: String): this(size, 0)\n}\n\nWell, this code doesn’t really make any sense in Kotlin, because instead we can use default arguments:\nclass Pizza(\n       val size: String,\n       val cheese: Int = 0,\n       val olives: Int = 0,\n       val bacon: Int = 0\n)\n\nDefault values are not only cleaner and shorter, but their usage is also more powerful than the telescoping constructor. We can specify just size and olives:\nval myFavorite = Pizza(\"L\", olives = 3)\n\nWe can also add another named argument either before or after olives:\nval myFavorite = Pizza(\"L\", olives = 3, cheese = 1)\n\nAs you can see, default arguments are more powerful than the telescoping constructor because:\n\nWe can set any subset of parameters with default arguments we want.\nWe can provide arguments in any order.\nWe can explicitly name arguments to make it clear what each value means.\n\nThe last reason is quite important. Think of the following object creation:\nval villagePizza = Pizza(\"L\", 1, 2, 3)\n\nIt is short, but is it clear? I bet that even the person who declared the pizza class won’t remember in which position bacon is, and in which position cheese can be found. Sure, in an IDE we can see an explanation, but what about those who just scan code or read it on Github? When arguments are unclear, we should explicitly say what their names are using named arguments:\nval villagePizza = Pizza(\n   size = \"L\", \n   cheese = 1, \n   olives = 2, \n   bacon = 3\n)\n\nAs you can see, constructors with default arguments surpass the telescoping constructor pattern. Though there are more popular construction patterns in Java, and one of them is the Builder Pattern. \nBuilder pattern\nNamed parameters and default arguments are not allowed in Java. This is why Java developers mainly use the builder pattern. It allows them to:\n\nname parameters,\nspecify parameters in any order,\nhave default values.\n\nHere is an example of a builder defined in Kotlin:\nclass Pizza private constructor(\n       val size: String,\n       val cheese: Int,\n       val olives: Int,\n       val bacon: Int\n) {\n   class Builder(private val size: String) {\n       private var cheese: Int = 0\n       private var olives: Int = 0\n       private var bacon: Int = 0\n\n       fun setCheese(value: Int): Builder = apply {\n           cheese = value \n       }\n       fun setOlives(value: Int): Builder = apply {\n           olives = value\n       }\n\n       fun setBacon(value: Int): Builder = apply {\n           bacon = value\n       }\n\n       fun build() = Pizza(size, cheese, olives, bacon)\n   }\n}\n\nWith the builder pattern, we can set those parameters as we want, using their names:\nval myFavorite = Pizza.Builder(\"L\").setOlives(3).build()\n\nval villagePizza = Pizza.Builder(\"L\")\n       .setCheese(1)\n       .setOlives(2)\n       .setBacon(3)\n       .build()\n\nAs we’ve already mentioned, these two advantages are fully satisfied by Kotlin default arguments and named parameters:\nval villagePizza = Pizza(\n   size = \"L\", \n   cheese = 1, \n   olives = 2, \n   bacon = 3\n)\n\nComparing these two simple usages, you can see the advantages of named parameters over the builder:\n\nIt’s shorter — a constructor or factory method with default arguments is much easier to implement than the builder pattern. It is a time-saver both for the developer who implements this code and for those who read it. It is a significant difference because the builder pattern implementation can be time-consuming. Any builder modification is hard as well, for instance, changing a name of a parameter requires not only name change of the function used to set it, but also name of parameter in this function, body of this function, internal field used to keep it, parameter name in the private constructor etc. \nIt’s cleaner — when you want to see how an object is constructed, all you need is in a single method instead of being spread around a whole builder class. How are objects held? Do they interact? These are questions that are not so easy to answer when we have a big builder. On the other hand, class creation is usually clear on a factory method.\nOffers simpler usage - the primary constructor is a built-in concept. The builder pattern is an artificial concept and it requires some knowledge about it. For instance, a developer can easily forget to call the build function (or in other cases create).\nNo problems with concurrence —this is a rare problem, but function parameters are always immutable in Kotlin, while properties in most builders are mutable. Therefore it is harder to implement a thread-safe build function for a builder.\n\nIt doesn’t mean that we should always use a constructor instead of a builder. Let’s see cases where different advantages of this pattern shine.\nBuilders can require a set of values for a name (setPositiveButton, setNegativeButton, and addRoute), and allows us to aggregate (addRoute):\nval dialog = AlertDialog.Builder(context)\n       .setMessage(R.string.fire_missiles)\n       .setPositiveButton(R.string.fire, { d, id ->\n           // FIRE MISSILES!\n       })\n       .setNegativeButton(R.string.cancel, { d, id ->\n           // User cancelled the dialog\n       })\n       .create()\n\nval router = Router.Builder()\n       .addRoute(path = \"/home\", ::showHome)\n       .addRoute(path = \"/users\", ::showUsers)\n       .build()\n\nTo achieve similar behavior with a constructor we would need to introduce special types to hold more data in a single argument:\nval dialog = AlertDialog(context,\n   message = R.string.fire_missiles,\n   positiveButtonDescription = \n       ButtonDescription(R.string.fire, { d, id ->\n           // FIRE MISSILES!\n       }),\n   negativeButtonDescription = \n       ButtonDescription(R.string.cancel, { d, id ->\n           // User cancelled the dialog\n       })\n)\n\nval router = Router(\n   routes = listOf(\n       Route(\"/home\", ::showHome),\n       Route(\"/users\", ::showUsers)\n   )\n)\n\nThis notation is generally badly received in the Kotlin community, and we tend to prefer using DSL (Domain Specific Language) builder for such cases:\nval dialog = context.alert(R.string.fire_missiles) {\n   positiveButton(R.string.fire) {\n       // FIRE MISSILES!\n   }\n   negativeButton {\n       // User cancelled the dialog\n   }\n}\n\nval route = router {\n   \"/home\" directsTo ::showHome\n   \"/users\" directsTo ::showUsers\n}\n\nThese kinds of DSL builders are generally preferred over classic builder pattern, since they give more flexibility and cleaner notation. It is true that making a DSL is harder. On the other hand making a builder is already hard. If we decide to invest more time to allow a better notation at the cost of a less obvious definition, why not take this one step further. In return we will have more flexibility and readability. In the next chapter, we are going to talk more about using DSLs for object creation. \nAnother advantage of the classic builder pattern is that it can be used as a factory. It might be filled partially and passed further, for example a default dialog in our application: \nfun Context.makeDefaultDialogBuilder() =\n   AlertDialog.Builder(this)\n       .setIcon(R.drawable.ic_dialog)\n       .setTitle(R.string.dialog_title)\n       .setOnCancelListener { it.cancel() }\n\nTo have a similar possibility in a constructor or factory method, we would need currying, which is not supported in Kotlin. Alternatively we could keep object configuration in a data class and use copy to modify an existing one:\ndata class DialogConfig(\n   val icon: Int = -1,\n   val title: Int = -1,\n   val onCancelListener: (() -> Unit)? = null\n   //...\n)\n\nfun makeDefaultDialogConfig() = DialogConfig(\n   icon = R.drawable.ic_dialog,\n   title = R.string.dialog_title,\n   onCancelListener = { it.cancel() }\n)\n\nAlthough both options are rarely seen as an option. If we want to define, let’s say, a default dialog for an application, we can create it using a function and pass all customization elements as optional arguments. Such a method would have more control over dialog creation. This is why this advantage of the builder pattern I treat as minor. \nIn the end, the builder pattern is rarely the best option in Kotlin. It is sometimes chosen:\n\nto make code consistent with libraries written in other languages that used builder pattern,\nwhen we design API to be easily used in other languages that do not support default arguments or DSLs.\n\nExcept of that, we rather prefer either a primary constructor with default arguments, or an expressive DSL. \nSummary\nCreating objects using a primary constructor is the most appropriate approach for the vast majority of objects in our projects. Telescoping constructor patterns should be treated as obsolete in Kotlin. I recommend using default values instead, as they are cleaner, more flexible, and more expressive. The builder pattern is very rarely reasonable either as in simpler cases we can just use a primary constructor with named arguments, and when we need to create more complex object we can define a DSL for that.\n"},"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html":{"url":"Part 2 Code design/Chapter 5 Object creation/Item 35 Consider defining a DSL for complex object creation.html","title":"Item 35 Consider Defining A DSL For Complex Object Creation","keywords":"","body":"Item 35: Consider defining a DSL for complex object creation\nA set of Kotlin features used together allows us to make a configuration-like Domain Specific Language (DSL). Such DSLs are useful when we need to define more complex objects or a hierarchical structure of objects. They are not easy to define, but once they are defined they hide boilerplate and complexity, and a developer can express his or her intentions clearly.\nFor instance, Kotlin DSL is a popular way to express HTML: both classic HTML, and React HTML. This is how it can look like:\nbody {\n   div {\n       a(\"https://kotlinlang.org\") {\n           target = ATarget.blank\n           +\"Main site\"\n       }\n   }\n   +\"Some content\"\n}\n\n\nViews on other platforms can be defined using DSLs as well. Here is a simple Android view defined using the Anko library:\nverticalLayout {\n   val name = editText()\n   button(\"Say Hello\") {\n       onClick { toast(\"Hello, ${name.text}!\") }\n   }\n}\n\n\nSimilarly with desktop applications. Here is a view defined on TornadoFX that is built on top of the JavaFX:\nclass HelloWorld : View() {\n   override val root = hbox {\n       label(\"Hello world\") {\n           addClass(heading)\n       }\n\n       textfield {\n           promptText = \"Enter your name\"\n       }\n   }\n}\n\n\nDSLs are also often used to define data or configurations. Here is API definition in Ktor, also a DSL:\nfun Routing.api() {\n   route(\"news\") {\n       get {\n           val newsData = NewsUseCase.getAcceptedNews()\n           call.respond(newsData)\n       }\n       get(\"propositions\") {\n           requireSecret()\n           val newsData = NewsUseCase.getPropositions()\n           call.respond(newsData)\n       }\n   }\n   // ...\n}\n\nAnd here are test case specifications defined in Kotlin Test:\nclass MyTests : StringSpec({\n   \"length should return size of string\" {\n       \"hello\".length shouldBe 5\n   }\n   \"startsWith should test for a prefix\" {\n       \"world\" should startWith(\"wor\")\n   }\n})\n\nWe can even use Gradle DSL to define Gradle configuration:\nplugins {\n   `java-library`\n}\n\ndependencies { \n   api(\"junit:junit:4.12\")\n   implementation(\"junit:junit:4.12\")\n   testImplementation(\"junit:junit:4.12\")\n}\n\nconfigurations {\n   implementation {\n       resolutionStrategy.failOnVersionConflict()\n   }\n}\n\nsourceSets { \n   main {\n       java.srcDir(\"src/core/java\")\n   }\n}\n\njava {\n   sourceCompatibility = JavaVersion.VERSION_11\n   targetCompatibility = JavaVersion.VERSION_11\n}\n\ntasks {\n   test {\n       testLogging.showExceptions = true\n   }\n}\n\nCreating complex and hierarchical data structures become easier with DSLs. Inside those DSLs we can use everything that Kotlin offers, and we have useful hints as DSLs in Kotlin are fully type-safe (unlike Groovy). It is likely that you already used some Kotlin DSL, but it is also important to know how to define them yourself.\nDefining your own DSL\nTo understand how to make own DSLs, it is important to understand the notion of function types with a receiver. But before that, we’ll first briefly review the notion of function types themselves. The function type is a type that represents an object that can be used as a function. For instance, in the filter function, it is there to represent a predicate that decides if an element can be accepted or not.\ninline fun  Iterable.filter(\n   predicate: (T) -> Boolean\n): List {\n   val list = arrayListOf()\n   for (elem in this) {\n       if (predicate(elem)) {\n           list.add(elem)\n       }\n   }\n   return list\n}\n\nHere are a few examples of function types:\n\n()->Unit - Function with no arguments and returns Unit. \n(Int)->Unit - Function that takes Int and returns Unit. \n(Int)->Int - Function that takes Int and returns Int. \n(Int, Int)->Int - Function that takes two arguments of type Int and returns Int. \n(Int)->()->Unit - Function that takes Int and returns another function. This other function has no arguments and returns Unit. \n(()->Unit)->Unit - Function that takes another function and returns Unit. This other function has no arguments and returns Unit. \n\nThe basic ways to create instances of function types are:\n\nUsing lambda expressions\nUsing anonymous functions\nUsing function references\n\nFor instance, think about the following function:\nfun plus(a: Int, b: Int) = a + b\n\nAnalogous functions can be created in the following ways:\nval plus1: (Int, Int)->Int = { a, b -> a + b }\nval plus2: (Int, Int)->Int = fun(a, b) = a + b\nval plus3: (Int, Int)->Int = ::plus\nIn the above example, property types are specified and so argument types in the lambda expression and in the anonymous function can be inferred. It could be the other way around. If we specify argument types, then the function type can be inferred.\nval plus4 = { a: Int, b: Int -> a + b }\nval plus5 = fun(a: Int, b: Int) = a + b\nFunction types are there to represent objects that represent functions. An anonymous function even looks the same as a normal function, but without a name. A lambda expression is a shorter notation for an anonymous function. \nAlthough if we have function types to represent functions, what about extension functions? Can we express them as well? \nfun Int.myPlus(other: Int) = this + other\n\nIt was mentioned before that we create an anonymous function in the same way as a normal function but without a name. And so anonymous extension functions are defined the same way:\nval myPlus = fun Int.(other: Int) = this + other\n\nWhat type does it have? The answer is that there is a special type to represent extension functions. It is called function type with receiver. It looks similar to a normal function type, but it additionally specifies the receiver type before its arguments and they are separated using a dot:\nval myPlus: Int.(Int)->Int = \n    fun Int.(other: Int) = this + other\n\nSuch a function can be defined using a lambda expression, specifically a lambda expression with receiver, since inside its scope the this keyword references the extension receiver (an instance of type Int in this case):\nval myPlus: Int.(Int)->Int = { this + it }\n\nObject created using anonymous extension function or lambda expression with receiver can be invoked in 3 ways:\n\nLike a standard object, using invoke method. \nLike a non-extension function. \nSame as a normal extension function. \n\nmyPlus.invoke(1, 2)\nmyPlus(1, 2)\n1.myPlus(2)\n\nThe most important trait of the function type with receiver is that it changes what this refers to. this is used for instance in the apply function to make it easier to reference the receiver object’s methods and properties:\ninline fun  T.apply(block: T.() -> Unit): T {\n   this.block()\n   return this\n}\n\nclass User {\n   var name: String = \"\"\n   var surname: String = \"\"\n}\n\nval user = User().apply {\n   name = \"Marcin\"\n   surname = \"Moskała\"\n}\n\nFunction type with a receiver is the most basic building block of Kotlin DSL. Let’s create a very simple DSL that would allow us to make the following HTML table:\nfun createTable(): TableBuilder = table {\n   tr {\n       for (i in 1..2) {\n           td {\n               +\"This is column $i\"\n           }\n       }\n   }\n}\n\nStarting from the beginning of this DSL, we can see a function table. We are at top-level without any receivers so it needs to be a top-level function. Although inside its function argument you can see that we use tr. The tr function should be allowed only inside the table definition. This is why the table function argument should have a receiver with such a function. Similarly, the tr function argument needs to have a receiver that will contain a td function.\nfun table(init: TableBuilder.()->Unit): TableBuilder {\n   //...\n}\n\nclass TableBuilder {\n   fun tr(init: TrBuilder.() -> Unit) { /*...*/ }\n}\n\nclass TrBuilder {\n   fun td(init: TdBuilder.()->Unit) { /*...*/ }\n}\n\nclass TdBuilder\n\nHow about this statement:\n+\"This is row $i\"\nWhat is that? This is nothing else but a unary plus operator on String. It needs to be defined inside TdBuilder:\nclass TdBuilder {\n   var text = \"\"\n\n   operator fun String.unaryPlus() {\n       text += this\n   }\n}\n\nNow our DSL is well defined. To make it work fine, at every step we need to create a builder and initialize it using a function from parameter (init in the example below). After that, the builder will contain all the data specified in this initfunction argument. This is the data we need. Therefore we can either return this builder or we can produce another object holding this data. In this example, we’ll just return builder. This is how the table function could be defined:\nfun table(init: TableBuilder.()->Unit): TableBuilder {\n   val tableBuilder = TableBuilder()\n   init.invoke(tableBuilder)\n   return tableBuilder\n}\n\nNotice that we can use the apply function, as shown before, to shorten this function: \nfun table(init: TableBuilder.()->Unit) = \n     TableBuilder().apply(init)\n\nSimilarly we can use it in other parts of this DSL to be more concise:\nclass TableBuilder {\n   var trs = listOf()\n\n   fun tr(init: TrBuilder.()->Unit) {\n       trs = trs + TrBuilder().apply(init)\n   }\n}\n\nclass TrBuilder {\n   var tds = listOf()\n\n   fun td(init: TdBuilder.()->Unit) {\n       tds = tds + TdBuilder().apply(init)\n   }\n}\n\nThis is a fully functional DSL builder for HTML table creation. It could be improved using a DslMarker explained in Item 15: Consider referencing receiver explicitly. \nWhen should we use it?\nDSLs give us a way to define information. It can be used to express any kind of information you want, but it is never clear to users how this information will be later used. In Anko, TornadoFX or HTML DSL we trust that the view will be correctly built based on our definitions, but it is often hard to track how exactly. Some more complicated uses can be hard to discover. Usage can be also confusing to those not used to them. Not to mention maintenance. The way how they are defined can be a cost - both in developer confusion and in performance. DSLs are an overkill when we can use other, simpler features instead. Though they are really useful when we need to express:\n\ncomplicated data structures,\nhierarchical structures,\nhuge amount of data.\n\nEverything can be expressed without DSL-like structure, by using builders or just constructors instead. DSLs are about boilerplate elimination for such structures. You should consider using DSL when you see repeatable boilerplate code4and there are no simpler Kotlin features that can help. \nSummary\nA DSL is a special language inside of a language. It can make it really simple to create complex object, and even whole object hierarchies, like HTML code or complex configuration files. On the other hand DSL implementations might be confusing or hard for new developers. They are also hard to define. This is why they should be only used when they offer real value. For instance, for the creation of a really complex object, or possibly for complex object hierarchies. This is why they are also preferably defined in libraries rather than in projects. It is not easy to make a good DSL, but a well defined DSL can make our project much better.\n"},"Part 2 Code design/Chapter 6 Class design/Introduction.html":{"url":"Part 2 Code design/Chapter 6 Class design/Introduction.html","title":"Introduction","keywords":"","body":"Chapter 6: Class design\nClasses are the most important abstraction in the Object-Oriented Programming (OOP) paradigm. Since OOP is the most popular paradigm in Kotlin, classes are very important for us as well. This chapter is about class design. Not about system design, since it would require much more space and there are already many great books on this topic such as Clean Architecture by Robert C. Martin or Design Patterns by Erich Gamma, John Vlissides, Ralph Johnson, and Richard Helm. Instead, we will mainly talk about contracts that Kotlin classes are expected to fulfill - how we use Kotlin structures and what is expected from us when we use them. When and how should we use inheritance? How do we expect data classes to be used? When should we use function types instead of interfaces with a single method? What are the contracts of equals, hashCode and compareTo? When should we use extensions instead of members? These are the kind of questions we will answer here. They are all important because breaking them might cause serious problems, and following them will help you make your code safer and cleaner.\n"},"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 36 Prefer composition over inheritance.html","title":"Item 36 Prefer Composition Over Inheritance","keywords":"","body":"Item 36: Prefer composition over inheritance\nInheritance is a powerful feature, but it is designed to create a hierarchy of objects with the “is-a” relationship. When such a relationship is not clear, inheritance might be problematic and dangerous. When all we need is a simple code extraction or reuse, inheritance should be used with caution, and we should instead prefer a lighter alternative: class composition. \nSimple behavior reuse\nLet’s start with a simple problem: we have two classes with partially similar behavior - progress bar display before and hide after logic. \nclass ProfileLoader {\n\n  fun load() {\n       // show progress\n       // load profile\n       // hide progress\n   }\n}\n\nclass ImageLoader {\n\n   fun load() {\n       // show progress\n       // load image\n       // hide progress\n   }\n}\n\nFrom my experience, many developers would extract this common behavior by extracting a common superclass:\nabstract class LoaderWithProgress {\n\n   fun load() {\n       // show progress\n       innerLoad()\n       // hide progress\n   }\n\n   abstract fun innerLoad()\n}\n\nclass ProfileLoader: LoaderWithProgress() {\n\n   override fun innerLoad() {\n       // load profile\n   }\n}\n\nclass ImageLoader: LoaderWithProgress() {\n\n   override fun innerLoad() {\n       // load image\n   }\n}\n\nThis approach works for such a simple case, but it has important downsides we should be aware of:\n\nWe can only extend one class. Extracting functionalities using inheritance often leads to huge BaseXXX classes that accumulate many functionalities or too deep and complex hierarchies of types.\nWhen we extend, we take everything from a class, which leads to classes that have functionalities and methods they don’t need (a violation of the Interface Segregation Principle).\nUsing superclass functionality is much less explicit. In general, it is a bad sign when a developer reads a method and needs to jump into superclasses many times to understand how the method works.\n\nThose are strong reasons that should make us think about an alternative, and a very good one is composition. By composition, we mean holding an object as a property (we compose it) and reusing its functionalities. This is an example of how we can use composition instead of inheritance to solve our problem:\nclass Progress {\n   fun showProgress() { /* show progress */ }\n   fun hideProgress() { /* hide progress */ }\n}\n\nclass ProfileLoader {\n   val progress = Progress()\n\n   fun load() {\n       progress.showProgress()\n       // load profile\n       progress.hideProgress()\n   }\n}\n\nclass ImageLoader {\n   val progress = Progress()\n\n   fun load() {\n       progress.showProgress()\n       // load image\n       progress.hideProgress()\n   }\n}\n\nNotice that composition is harder, as we need to include the composed object and use it in every single class. This is the key reason why many prefer inheritance. However, this additional code is not useless; it informs the reader that progress is used and how it is used. It also gives the developer more power over how progress works.\nAnother thing to note is that composition is better in a case when we want to extract multiple pieces of functionality. For instance, information that loading has finished:\nclass ImageLoader {\n   private val progress = Progress()\n   private val finishedAlert = FinishedAlert()\n\n   fun load() {\n       progress.showProgress()\n       // load image\n       progress.hideProgress()\n       finishedAlert.show()\n   }\n}\n\nWe cannot extend more than a single class, so if we would want to use inheritance instead, we would be forced to place both functionalities in a single superclass. This often leads to a complex hierarchy of types used to add these functionalities. Such hierarchies are very hard to read and often also to modify. Just think about what happens if we need alert in two subclasses, but not in the third one? One way to deal with this problem is to use a parameterized constructor:\nabstract class InternetLoader(val showAlert: Boolean) {\n\n   fun load() {\n       // show progress\n       innerLoad()\n       // hide progress\n       if (showAlert) {\n           // show alert\n       }\n   }\n\n   abstract fun innerLoad()\n}\n\nclass ProfileLoader : InternetLoader(showAlert = true) {\n\n   override fun innerLoad() {\n       // load profile\n   }\n}\n\nclass ImageLoader : InternetLoader(showAlert = false) {\n\n   override fun innerLoad() {\n       // load image\n   }\n}\n\nThis is a bad solution. It gives functionality a subclass doesn’t need and blocks it. The problem is compounded when the subclass cannot block other unneeded functionality. When we use inheritance we take everything from the superclass, not only what we need.\nTaking the whole package\nWhen we use inheritance, we take from superclass everything - both methods, expectations (contract) and behavior. Therefore inheritance is a great tool to represent the hierarchy of objects, but not necessarily to just reuse some common parts. For such cases, the composition is better because we can choose what behavior do we need. To think of an example, let’s say that in our system we decided to represent a Dog that can bark and sniff:\nabstract class Dog {\n   open fun bark() { /*...*/ }\n   open fun sniff() { /*...*/ }\n}\n\nWhat if then we need to create a robot dog that can bark but can’t sniff? \nclass Labrador: Dog()\n\nclass RobotDog : Dog() {\n   override fun sniff() {\n       throw Error(\"Operation not supported\")\n       // Do you really want that?\n   }\n}\n\nNotice that such a solution violates interface-segregation principle - RobotDog has a method it doesn’t need. It also violates the Liskov Substitution Principle by breaking superclass behavior. On the other hand, what if your RobotDog needs to be a Robot class as well because Robot can calculate (have calculate method)? Multiple inheritance is not supported in Kotlin.\nabstract class Robot {\n   open fun calculate() { /*...*/ }\n}\n\nclass RobotDog : Dog(), Robot() // Error\n\nThese are serious design problems and limitations that do not occur when you use composition instead. When we use composition we choose what we want to reuse. To represent type hierarchy it is safer to use interfaces, and we can implement multiple interfaces. What was not yet shown is that inheritance can lead to unexpected behavior. \nInheritance breaks encapsulation\nTo some degree, when we extend a class, we depend not only on how it works from outside but also on how it is implemented inside. This is why we say that inheritance breaks encapsulation. Let’s look at an example inspired by the book Effective Java by Joshua Bloch. Let’s say that we need a set that will know how many elements were added to it during its lifetime. This set can be created using inheritance from HashSet:\nclass CounterSet: HashSet() {\n   var elementsAdded: Int = 0\n       private set\n\n   override fun add(element: T): Boolean {\n       elementsAdded++\n       return super.add(element)\n   }\n\n   override fun addAll(elements: Collection): Boolean {\n       elementsAdded += elements.size\n       return super.addAll(elements)\n   }\n}\n\nThis implementation might look good, but it doesn’t work correctly:\nval counterList = CounterSet()\ncounterList.addAll(listOf(\"A\", \"B\", \"C\"))\nprint(counterList.elementsAdded) // 6\n\nWhy is that? The reason is that HashSet uses the add method under the hood of addAll. The counter is then incremented twice for each element added using addAll. The problem can be naively solved by removing custom addAllfunction:\nclass CounterSet: HashSet() {\n   var elementsAdded: Int = 0\n       private set\n\n   override fun add(element: T): Boolean {\n       elementsAdded++\n       return super.add(element)\n   }\n}\n\nAlthough this solution is dangerous. What if the creators of Java decided to optimize HashSet.addAll and implement it in a way that doesn’t depend on the add method? If they would do that, this implementation would break with a Java update. Together with this implementation, any other libraries which depend on our current implementation will break as well. The Java creators know this, so they are cautious of making changes to these types of implementations. The same problem affects any library creator or even developers of large projects. How can we solve this problem? We should use composition instead of inheritance:\nclass CounterSet {\n   private val innerSet = HashSet()\n   var elementsAdded: Int = 0\n       private set\n\n   fun add(element: T) {\n       elementsAdded++\n       innerSet.add(element)\n   }\n\n   fun addAll(elements: Collection) {\n       elementsAdded += elements.size\n       innerSet.addAll(elements)\n   }\n}\n\nval counterList = CounterSet()\ncounterList.addAll(listOf(\"A\", \"B\", \"C\"))\nprint(counterList.elementsAdded) // 3\n\nOne problem is that in this case, we lose polymorphic behavior: CounterSet is not a Set anymore. To keep it, we can use the delegation pattern. The delegation pattern is when our class implements an interface, composes an object that implements the same interface, and forwards methods defined in the interface to this composed object. Such methods are called forwarding methods. Take a look at the following example:\nclass CounterSet : MutableSet {\n   private val innerSet = HashSet()\n   var elementsAdded: Int = 0\n       private set\n\n   override fun add(element: T): Boolean {\n       elementsAdded++\n       return innerSet.add(element)\n   }\n\n   override fun addAll(elements: Collection): Boolean {\n       elementsAdded += elements.size\n       return innerSet.addAll(elements)\n   }\n\n   override val size: Int\n       get() = innerSet.size\n\n   override fun contains(element: T): Boolean =\n           innerSet.contains(element)\n\n   override fun containsAll(elements: Collection): \nBoolean = innerSet.containsAll(elements)\n\n   override fun isEmpty(): Boolean = innerSet.isEmpty()\n\n   override fun iterator() =\n           innerSet.iterator()\n\n   override fun clear() =\n           innerSet.clear()\n\n   override fun remove(element: T): Boolean =\n           innerSet.remove(element)\n\n   override fun removeAll(elements: Collection): \nBoolean = innerSet.removeAll(elements)\n\n   override fun retainAll(elements: Collection): \nBoolean = innerSet.retainAll(elements)\n}\n\nThe problem now is that we need to implement a lot of forwarding methods (nine, in this case). Thankfully, Kotlin introduced interface delegation support that is designed to help in this kind of scenario. When we delegate an interface to an object, Kotlin will generate all the required forwarding methods during compilation. Here is Kotlin interface delegation presented in action:\nclass CounterSet(\n   private val innerSet: MutableSet = mutableSetOf()\n) : MutableSet by innerSet {\n\n   var elementsAdded: Int = 0\n       private set\n\n   override fun add(element: T): Boolean {\n       elementsAdded++\n       return innerSet.add(element)\n   }\n\n   override fun addAll(elements: Collection): Boolean {\n       elementsAdded += elements.size\n       return innerSet.addAll(elements)\n   }\n}\n\nThis is a case where delegation is a good choice: we need polymorphic behavior and inheritance would be dangerous. In most cases, polymorphic behavior is not needed or we use it in a different way. In such a case composition without delegation is more suitable. It is easier to understand and more flexible.\nThe fact that inheritance breaks encapsulation is a security concern, but in many cases, the behavior is specified in a contract or we don’t depend on it in subclasses (this is generally true when methods are designed for inheritance). There are other reasons to choose the composition. The composition is easier to reuse and gives us more flexibility. \nRestricting overriding\nTo prevent developers from extending classes that are not designed for an inheritance, we can just keep them final. Though if for a reason we need to allow inheritance, still all methods are final by default. To let developers override them, they must be set to open:\nopen class Parent {\n   fun a() {}\n   open fun b() {}\n}\n\nclass Child: Parent() {\n   override fun a() {} // Error\n   override fun b() {}\n}\n\nUse this mechanism wisely and open only those methods that are designed for inheritance. Also remember that when you override a method, you can make it final for all subclasses:\nopen class ProfileLoader: InternetLoader() {\n\n   final override fun loadFromInterner() {\n       // load profile\n   }\n}\n\nThis way you can limit the number of methods that can be overridden in subclasses. \nSummary\nThere are a few important differences between composition and inheritance:\n\nComposition is more secure - We do not depend on how a class is implemented, but only on its externally observable behavior. \nComposition is more flexible - We can only extend a single class, while we can compose many. When we inherit, we take everything, while when we compose, we can choose what we need. When we change the behavior of a superclass, we change the behavior of all subclasses. It is hard to change the behavior of only some subclasses. When a class we composed changes, it will only change our behavior if it changed its contract to the outside world.\nComposition is more explicit - This is both an advantage and a disadvantage. When we use a method from a superclass we don’t need to reference any receiver (we don’t need to use this keyword). It is less explicit, which means that it requires less work but it can be confusing and is more dangerous as it is easy to confuse where a method comes from (is it from the same class, superclass, top-level or is it an extension). When we call a method on a composed object, we know where it comes from. \nComposition is more demanding - We need to use composed object explicitly. When we add some functionalities to a superclass we often do not need to modify subclasses. When we use composition we more often need to adjust usages. \nInheritance gives us a strong polymorphic behavior - This is also a double-edged sword. From one side, it is comfortable that a dog can be treated like an animal. On the other side, it is very constraining. It must be an animal. Every subclass of the animal should be consistent with animal behavior. Superclass set contract and subclasses should respect it. \n\nIt is a general OOP rule to prefer composition over inheritance, but Kotlin encourages composition even more by making all classes and methods final by default and by making interface delegation a first-class citizen. This makes this rule even more important in Kotlin projects.\nWhen is composition more reasonable then? The rule of thumb: we should use inheritance when there is a definite “is a” relationship. Not only linguistically, but meaning that every class that inherits from a superclass needs to “be” its superclass. All unit tests for superclasses should always pass for their subclasses (Liskov substitution principle). Object-oriented frameworks for displaying views are good examples: Application in JavaFX, Activity in Android, UIViewController in iOS, and React.Component in React. The same is true when we define our own special kind of view element that always has the same set of functionalities and characteristics. Just remember to design these classes with inheritance in mind, and specify how inheritance should be used. Also, keep methods that are not designed for inheritance final.\n"},"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 37 Use the data modifier to represent a bundle of data.html","title":"Item 37 Use The Data Modifier To Represent A Bundle Of Data","keywords":"","body":""},"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 38 Use function types instead of interfaces to pass operations and actions.html","title":"Item 38 Use Function Types Instead Of Interfaces To Pass Operations And Actions","keywords":"","body":""},"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 39 Prefer class hierarchies to tagged classes.html","title":"Item 39 Prefer Class Hierarchies To Tagged Classes","keywords":"","body":""},"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 40 Respect the contract of  equals.html","title":"Item 40 Respect The Contract Of Equals","keywords":"","body":""},"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 41 Respect the contract of  hashCode.html","title":"Item 41 Respect The Contract Of Hash Code","keywords":"","body":""},"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 42 Respect the contract of compareTo.html","title":"Item 42 Respect The Contract Of Compare To","keywords":"","body":""},"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 43 Consider extracting non-essential parts of your API into extensions.html","title":"Item 43 Consider Extracting Non Essential Parts Of Your API Into Extensions","keywords":"","body":""},"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html":{"url":"Part 2 Code design/Chapter 6 Class design/Item 44 Avoid member extensions.html","title":"Item 44 Avoid Member Extensions","keywords":"","body":""},"Part 3 Efficiency/Chapter 7 Make it cheap/Introduction.html":{"url":"Part 3 Efficiency/Chapter 7 Make it cheap/Introduction.html","title":"Introduction","keywords":"","body":""},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html":{"url":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 45 Avoid unnecessary object creation.html","title":"Item 45 Avoid Unnecessary Object Creation","keywords":"","body":""},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html":{"url":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 46 Use inline modifier for functions with parameters of functional types.html","title":"Item 46 Use Inline Modifier For Functions With Parameters Of Functional Types","keywords":"","body":""},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html":{"url":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 47 Consider using inline classes.html","title":"Item 47 Consider Using Inline Classes","keywords":"","body":""},"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html":{"url":"Part 3 Efficiency/Chapter 7 Make it cheap/Item 48 Eliminate obsolete object references.html","title":"Item 48 Eliminate Obsolete Object References","keywords":"","body":""},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Introduction.html":{"url":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Introduction.html","title":"Introduction","keywords":"","body":""},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html":{"url":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 49 Prefer Sequence for big collections with more than one processing step.html","title":"Item 49 Prefer Sequence For Big Collections With More Than One Processing Step","keywords":"","body":""},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html":{"url":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 50 Limit the number of operations.html","title":"Item 50 Limit The Number Of Operations","keywords":"","body":""},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html":{"url":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 51 Consider Arrays with primitives for performance-critical processing.html","title":"Item 51 Consider Arrays With Primitives For Performance Critical Processing","keywords":"","body":""},"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html":{"url":"Part 3 Efficiency/Chapter 8 Efficient collection processing/Item 52 Consider using mutable collections.html","title":"Item 52 Consider Using Mutable Collections","keywords":"","body":""}}}